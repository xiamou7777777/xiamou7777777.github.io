<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Javaweb-day08</title>
      <link href="/2023/10/16/day08-Mybatis/"/>
      <url>/2023/10/16/day08-Mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Mybatis基础操作"><a href="#1-Mybatis基础操作" class="headerlink" title="1. Mybatis基础操作"></a>1. Mybatis基础操作</h1><p>学习完mybatis入门后，我们继续学习mybatis基础操作。</p><h2 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h2><p>需求说明：</p><ul><li>根据资料中提供的《tlias智能学习辅助系统》页面原型及需求，完成员工管理的需求开发。</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210180155700.png"> </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210180343288.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210180515206.png"></p><p>通过分析以上的页面原型和需求，我们确定了功能列表：</p><ol><li><p>查询</p><ul><li>根据主键ID查询</li><li>条件查询</li></ul></li><li><p>新增</p></li><li><p>更新</p></li><li><p>删除</p><ul><li>根据主键ID删除</li><li>根据主键ID批量删除</li></ul></li></ol><h2 id="1-2-准备"><a href="#1-2-准备" class="headerlink" title="1.2 准备"></a>1.2 准备</h2><p>实施前的准备工作：</p><ol><li>准备数据库表</li><li>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</li><li>application.properties中引入数据库连接信息</li><li>创建对应的实体类 Emp（实体类属性采用驼峰命名）</li><li>准备Mapper接口 EmpMapper</li></ol><p><strong>准备数据库表</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 部门管理</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dept</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;部门名称&#x27;</span>,</span><br><span class="line">    create_time datetime    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime    <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;部门表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 部门表测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> dept (id, name, create_time, update_time)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">1</span>, <span class="string">&#x27;学工部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;教研部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;咨询部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;就业部&#x27;</span>, now(), now()),</span><br><span class="line">       (<span class="number">5</span>, <span class="string">&#x27;人事部&#x27;</span>, now(), now());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 员工管理</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp</span><br><span class="line">(</span><br><span class="line">    id          <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    username    <span class="type">varchar</span>(<span class="number">20</span>)      <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">unique</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    password    <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="string">&#x27;123456&#x27;</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    name        <span class="type">varchar</span>(<span class="number">10</span>)      <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    gender      tinyint unsigned <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;性别, 说明: 1 男, 2 女&#x27;</span>,</span><br><span class="line">    image       <span class="type">varchar</span>(<span class="number">300</span>) comment <span class="string">&#x27;图像&#x27;</span>,</span><br><span class="line">    job         tinyint unsigned comment <span class="string">&#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;</span>,</span><br><span class="line">    entrydate   <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span>,</span><br><span class="line">    dept_id     <span class="type">int</span> unsigned comment <span class="string">&#x27;部门ID&#x27;</span>,</span><br><span class="line">    create_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time datetime         <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;修改时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"><span class="comment">-- 员工表测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time)</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;jinyong&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;金庸&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;1.jpg&#x27;</span>, <span class="number">4</span>, <span class="string">&#x27;2000-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;zhangwuji&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2015-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;yangxiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;3.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2008-05-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;weiyixiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;4.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2007-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;changyuchun&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;5.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2012-12-05&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">6</span>, <span class="string">&#x27;xiaozhao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;6.jpg&#x27;</span>, <span class="number">3</span>, <span class="string">&#x27;2013-09-05&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">(<span class="number">7</span>, <span class="string">&#x27;jixiaofu&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;纪晓芙&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;7.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2005-08-01&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">(<span class="number">8</span>, <span class="string">&#x27;zhouzhiruo&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;8.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2014-11-09&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">(<span class="number">9</span>, <span class="string">&#x27;dingminjun&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;丁敏君&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;9.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2011-03-11&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">(<span class="number">10</span>, <span class="string">&#x27;zhaomin&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;10.jpg&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;2013-09-05&#x27;</span>, <span class="number">1</span>, now(), now()),</span><br><span class="line">(<span class="number">11</span>, <span class="string">&#x27;luzhangke&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;鹿杖客&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;11.jpg&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2007-02-01&#x27;</span>, <span class="number">3</span>, now(), now()),</span><br><span class="line">(<span class="number">12</span>, <span class="string">&#x27;hebiweng&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;鹤笔翁&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;12.jpg&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2008-08-18&#x27;</span>, <span class="number">3</span>, now(), now()),</span><br><span class="line">(<span class="number">13</span>, <span class="string">&#x27;fangdongbai&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;方东白&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;13.jpg&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;2012-11-01&#x27;</span>, <span class="number">3</span>, now(), now()),</span><br><span class="line">(<span class="number">14</span>, <span class="string">&#x27;zhangsanfeng&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;14.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2002-08-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">15</span>, <span class="string">&#x27;yulianzhou&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;俞莲舟&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;15.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2011-05-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">16</span>, <span class="string">&#x27;songyuanqiao&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;宋远桥&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;16.jpg&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;2010-01-01&#x27;</span>, <span class="number">2</span>, now(), now()),</span><br><span class="line">(<span class="number">17</span>, <span class="string">&#x27;chenyouliang&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;17.jpg&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;2015-03-21&#x27;</span>, <span class="keyword">NULL</span>, now(), now());</span><br></pre></td></tr></table></figure><p><strong>创建一个新的springboot工程，选择引入对应的起步依赖（mybatis、mysql驱动、lombok）</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210182008131.png"></p><p><strong>application.properties中引入数据库连接信息</strong></p><blockquote><p>提示：可以把之前项目中已有的配置信息复制过来即可</p></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#驱动类名称</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#数据库连接的url</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="comment">#连接数据库的用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#连接数据库的密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p><strong>创建对应的实体类Emp（实体类属性采用驼峰命名）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Emp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="keyword">private</span> Short job;</span><br><span class="line">    <span class="keyword">private</span> LocalDate entrydate;     <span class="comment">//LocalDate类型对应数据表中的date类型</span></span><br><span class="line">    <span class="keyword">private</span> Integer deptId;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;<span class="comment">//LocalDateTime类型对应数据表中的datetime类型</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>准备Mapper接口：EmpMapper</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@Mapper注解：表示当前接口为mybatis中的Mapper接口</span></span><br><span class="line"><span class="comment">  程序运行时会自动创建接口的实现类对象(代理对象)，并交给Spring的IOC容器管理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成以上操作后，项目工程结构目录如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210182500817.png"></p><h2 id="1-3-删除"><a href="#1-3-删除" class="headerlink" title="1.3 删除"></a>1.3 删除</h2><h3 id="1-3-1-功能实现"><a href="#1-3-1-功能实现" class="headerlink" title="1.3.1 功能实现"></a>1.3.1 功能实现</h3><p>页面原型：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210183336095.png"></p><blockquote><p>当我们点击后面的”删除”按钮时，前端页面会给服务端传递一个参数，也就是该行数据的ID。 我们接收到ID后，根据ID删除数据即可。</p></blockquote><p><strong>功能：根据主键删除数据</strong></p><ul><li>SQL语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 删除id=17的数据</span><br><span class="line">delete from emp where id = 17;</span><br></pre></td></tr></table></figure><blockquote><p>Mybatis框架让程序员更关注于SQL语句</p></blockquote><ul><li>接口方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//@Delete(&quot;delete from emp where id = 17&quot;)</span></span><br><span class="line">    <span class="comment">//public void delete();</span></span><br><span class="line">    <span class="comment">//以上delete操作的SQL语句中的id值写成固定的17，就表示只能删除id=17的用户数据</span></span><br><span class="line">    <span class="comment">//SQL语句中的id值不能写成固定数值，需要变为动态的数值</span></span><br><span class="line">    <span class="comment">//解决方案：在delete方法中添加一个参数(用户id)，将方法中的参数，传给SQL语句</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id    用户id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from emp where id = #&#123;id&#125;&quot;)</span><span class="comment">//使用#&#123;key&#125;方式获取方法中的参数值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Delete注解：用于编写delete操作的SQL语句</p></blockquote><blockquote><p>如果mapper接口方法形参只有一个普通类型的参数，#{…} 里面的属性名可以随便写，如：#{id}、#{value}。但是建议保持名字一致。</p></blockquote><ul><li>测试<ul><li>在单元测试类中通过@Autowired注解注入EmpMapper类型对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//从Spring的IOC容器中，获取类型是EmpMapper的对象并注入</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDel</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//调用删除方法</span></span><br><span class="line">        empMapper.delete(<span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-日志输入"><a href="#1-3-2-日志输入" class="headerlink" title="1.3.2 日志输入"></a>1.3.2 日志输入</h3><p>在Mybatis当中我们可以借助日志，查看到sql语句的执行、执行传递的参数以及执行结果。具体操作如下：</p><ol><li><p>打开application.properties文件</p></li><li><p>开启mybatis的日志，并指定输出到控制台</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#指定mybatis输出日志的位置, 输出控制台</span></span><br><span class="line"><span class="attr">mybatis.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>开启日志之后，我们再次运行单元测试，可以看到在控制台中，输出了以下的SQL语句信息：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901164225644.png"> </p><blockquote><p>但是我们发现输出的SQL语句：delete from emp where id &#x3D; ?，我们输入的参数16并没有在后面拼接，id的值是使用?进行占位。那这种SQL语句我们称为预编译SQL。</p></blockquote><h3 id="1-3-3-预编译SQL"><a href="#1-3-3-预编译SQL" class="headerlink" title="1.3.3 预编译SQL"></a>1.3.3 预编译SQL</h3><h4 id="1-3-3-1-介绍"><a href="#1-3-3-1-介绍" class="headerlink" title="1.3.3.1 介绍"></a>1.3.3.1 介绍</h4><p>预编译SQL有两个优势：</p><ol><li>性能更高</li><li>更安全(防止SQL注入)</li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210202222206.png"></p><blockquote><p>性能更高：预编译SQL，编译一次之后会将编译后的SQL语句缓存起来，后面再次执行这条语句时，不会再次编译。（只是输入的参数不同）</p><p>更安全(防止SQL注入)：将敏感字进行转义，保障SQL的安全性。</p></blockquote><h4 id="1-3-3-2-SQL注入"><a href="#1-3-3-2-SQL注入" class="headerlink" title="1.3.3.2 SQL注入"></a>1.3.3.2 SQL注入</h4><p>SQL注入：是通过操作输入的数据来修改事先定义好的SQL语句，以达到执行代码对服务器进行攻击的方法。</p><blockquote><p>由于没有对用户输入进行充分检查，而SQL又是拼接而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，也可以完成恶意攻击。</p></blockquote><p><strong>测试1：使用资料中提供的程序，来验证SQL注入问题</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210205419634.png"></p><p>第1步：进入到DOS</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211124744203.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211124840720.png"></p><p>第2步：执行以下命令，启动程序</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动存在SQL注入的程序</span></span><br><span class="line">java <span class="literal">-jar</span> sql_Injection_demo<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar </span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210211605231.png"></p><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210212406527.png"></p><p>发现竟然能够登录成功：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210212511915.png"></p><p>以上操作为什么能够登录成功呢？</p><ul><li>由于没有对用户输入内容进行充分检查，而SQL又是字符串拼接方式而成，在用户输入参数时，在参数中添加一些SQL关键字，达到改变SQL运行结果的目的，从而完成恶意攻击。</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210213311518.png"></p><blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210214431228.png"></p><p>用户在页面提交数据的时候人为的添加一些特殊字符，使得sql语句的结构发生了变化，最终可以在没有用户名或者密码的情况下进行登录。</p></blockquote><p><strong>测试2：使用资料中提供的程序，来验证SQL注入问题</strong></p><p>第1步：进入到DOS</p><p>第2步：执行以下命令，启动程序：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动解决了SQL注入的程序</span></span><br><span class="line">java <span class="literal">-jar</span> sql_prepared_demo<span class="literal">-0</span>.<span class="number">0.1</span><span class="literal">-SNAPSHOT</span>.jar</span><br></pre></td></tr></table></figure><p>第3步：打开浏览器输入<code>http://localhost:9090/login.html</code></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210212406527.png"></p><p>发现无法登录：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211125751981.png"></p><p>以上操作SQL语句的执行：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211130011973.png"></p><blockquote><p>把整个<code>&#39; or &#39;1&#39;=&#39;1</code>作为一个完整的参数，赋值给第2个问号（<code>&#39; or &#39;1&#39;=&#39;1</code>进行了转义，只当做字符串使用）</p></blockquote><h4 id="1-3-3-3-参数占位符"><a href="#1-3-3-3-参数占位符" class="headerlink" title="1.3.3.3 参数占位符"></a>1.3.3.3 参数占位符</h4><p>在Mybatis中提供的参数占位符有两种：${…} 、#{…}</p><ul><li><p>#{…}</p><ul><li>执行SQL时，会将#{…}替换为?，生成预编译SQL，会自动设置参数值</li><li>使用时机：参数传递，都使用#{…}</li></ul></li><li><p>${…}</p><ul><li>拼接SQL。直接将参数拼接在SQL语句中，存在SQL注入问题</li><li>使用时机：如果对表名、列表进行动态设置时使用</li></ul></li></ul><blockquote><p>注意事项：在项目开发中，建议使用#{…}，生成预编译SQL，防止SQL注入安全。</p></blockquote><h2 id="1-4-新增"><a href="#1-4-新增" class="headerlink" title="1.4 新增"></a>1.4 新增</h2><p>功能：新增员工信息</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211134239610.png"></p><h3 id="1-4-1-基本新增"><a href="#1-4-1-基本新增" class="headerlink" title="1.4.1 基本新增"></a>1.4.1 基本新增</h3><p>员工表结构：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211134746319.png"></p><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) <span class="keyword">values</span> (<span class="string">&#x27;songyuanqiao&#x27;</span>,<span class="string">&#x27;宋远桥&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;1.jpg&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2012-10-09&#x27;</span>,<span class="number">2</span>,<span class="string">&#x27;2022-10-01 10:00:00&#x27;</span>,<span class="string">&#x27;2022-10-01 10:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：#{…} 里面写的名称是对象的属性名</p></blockquote><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.mapper.EmpMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.pojo.Emp;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建员工对象</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setUsername(<span class="string">&quot;tom&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;汤姆&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setJob((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//调用添加方法</span></span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>日志输出：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211140222240.png"></p></blockquote><h3 id="1-4-2-主键返回"><a href="#1-4-2-主键返回" class="headerlink" title="1.4.2 主键返回"></a>1.4.2 主键返回</h3><p>概念：在数据添加成功后，需要获取插入数据库数据的主键。</p><blockquote><p>如：添加套餐数据时，还需要维护套餐菜品关系表数据。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221211150353385.png"></p><p>业务场景：在前面讲解到的苍穹外卖菜品与套餐模块的表结构，菜品与套餐是多对多的关系，一个套餐对应多个菜品。既然是多对多的关系，是不是有一张套餐菜品中间表来维护它们之间的关系。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212093655389.png"></p><p>在添加套餐的时候，我们需要在界面当中来录入套餐的基本信息，还需要来录入套餐与菜品的关联信息。这些信息录入完毕之后，我们一点保存，就需要将套餐的信息以及套餐与菜品的关联信息都需要保存到数据库当中。其实具体的过程包括两步，首先第一步先需要将套餐的基本信息保存了，接下来第二步再来保存套餐与菜品的关联信息。套餐与菜品的关联信息就是往中间表当中来插入数据，来维护它们之间的关系。而中间表当中有两个外键字段，一个是菜品的ID，就是当前菜品的ID，还有一个就是套餐的ID，而这个套餐的 ID 指的就是此次我所添加的套餐的ID，所以我们在第一步保存完套餐的基本信息之后，就需要将套餐的主键值返回来供第二步进行使用。这个时候就需要用到主键返回功能。</p></blockquote><p>那要如何实现在插入数据之后返回所插入行的主键值呢？</p><ul><li>默认情况下，执行插入操作时，是不会主键值返回的。如果我们想要拿到主键值，需要在Mapper接口中的方法上添加一个Options注解，并在注解中指定属性useGeneratedKeys&#x3D;true和keyProperty&#x3D;”实体类属性名”</li></ul><p>主键返回代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//会自动将生成的主键值，赋值给emp对象的id属性</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into emp(username, name, gender, image, job, entrydate, dept_id, create_time, update_time) values (#&#123;username&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;image&#125;, #&#123;job&#125;, #&#123;entrydate&#125;, #&#123;deptId&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Emp emp)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//创建员工对象</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setUsername(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;杰克&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;1.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setJob((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(LocalDateTime.now());</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//调用添加方法</span></span><br><span class="line">        empMapper.insert(emp);</span><br><span class="line"></span><br><span class="line">        System.out.println(emp.getDeptId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-更新"><a href="#1-5-更新" class="headerlink" title="1.5 更新"></a>1.5 更新</h2><p>功能：修改员工信息</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212095605863.png"></p><blockquote><p>点击”编辑”按钮后，会查询所在行记录的员工信息，并把员工信息回显在修改员工的窗体上(下个知识点学习)</p><p>在修改员工的窗体上，可以修改的员工数据：用户名、员工姓名、性别、图像、职位、入职日期、归属部门</p><p>思考：在修改员工数据时，要以什么做为条件呢？</p><p>答案：员工id</p></blockquote><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> emp <span class="keyword">set</span> username <span class="operator">=</span> <span class="string">&#x27;linghushaoxia&#x27;</span>, name <span class="operator">=</span> <span class="string">&#x27;令狐少侠&#x27;</span>, gender <span class="operator">=</span> <span class="number">1</span> , image <span class="operator">=</span> <span class="string">&#x27;1.jpg&#x27;</span> , job <span class="operator">=</span> <span class="number">2</span>, entrydate <span class="operator">=</span> <span class="string">&#x27;2012-01-01&#x27;</span>, dept_id <span class="operator">=</span> <span class="number">2</span>, update_time <span class="operator">=</span> <span class="string">&#x27;2022-10-01 12:12:12&#x27;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id修改员工信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update emp set username=#&#123;username&#125;, name=#&#123;name&#125;, gender=#&#123;gender&#125;, image=#&#123;image&#125;, job=#&#123;job&#125;, entrydate=#&#123;entrydate&#125;, dept_id=#&#123;deptId&#125;, update_time=#&#123;updateTime&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//要修改的员工信息</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setId(<span class="number">23</span>);</span><br><span class="line">        emp.setUsername(<span class="string">&quot;songdaxia&quot;</span>);</span><br><span class="line">        emp.setPassword(<span class="literal">null</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;老宋&quot;</span>);</span><br><span class="line">        emp.setImage(<span class="string">&quot;2.jpg&quot;</span>);</span><br><span class="line">        emp.setGender((<span class="type">short</span>)<span class="number">1</span>);</span><br><span class="line">        emp.setJob((<span class="type">short</span>)<span class="number">2</span>);</span><br><span class="line">        emp.setEntrydate(LocalDate.of(<span class="number">2012</span>,<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">        emp.setCreateTime(<span class="literal">null</span>);</span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        emp.setDeptId(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//调用方法，修改员工数据</span></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-查询"><a href="#1-6-查询" class="headerlink" title="1.6 查询"></a>1.6 查询</h2><h3 id="1-6-1-根据ID查询"><a href="#1-6-1-根据ID查询" class="headerlink" title="1.6.1 根据ID查询"></a>1.6.1 根据ID查询</h3><p>在员工管理的页面中，当我们进行更新数据时，会点击 “编辑” 按钮，然后此时会发送一个请求到服务端，会根据Id查询该员工信息，并将员工数据回显在页面上。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212101331292.png"> </p><p>SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp;</span><br></pre></td></tr></table></figure><p>接口方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpringbootMybatisCrudApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmpMapper empMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> empMapper.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212103004961.png"></p><p>而在测试的过程中，我们会发现有几个字段(deptId、createTime、updateTime)是没有数据值的</p></blockquote><h3 id="1-6-2-数据封装"><a href="#1-6-2-数据封装" class="headerlink" title="1.6.2 数据封装"></a>1.6.2 数据封装</h3><p>我们看到查询返回的结果中大部分字段是有值的，但是deptId，createTime，updateTime这几个字段是没有值的，而数据库中是有对应的字段值的，这是为什么呢？</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212103124490.png"></p><p>原因如下： </p><ul><li>实体类属性名和数据库表查询返回的字段名一致，mybatis会自动封装。</li><li>如果实体类属性名和数据库表查询返回的字段名不一致，不能自动封装。</li></ul><p> 解决方案：</p><ol><li>起别名</li><li>结果映射</li><li>开启驼峰命名</li></ol><p><strong>起别名</strong>：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, &quot; +</span></span><br><span class="line"><span class="meta">        &quot;dept_id AS deptId, create_time AS createTime, update_time AS updateTime &quot; +</span></span><br><span class="line"><span class="meta">        &quot;from emp &quot; +</span></span><br><span class="line"><span class="meta">        &quot;where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>再次执行测试类：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212111027396.png"></p></blockquote><p><strong>手动结果映射</strong>：通过 @Results及@Result 进行手动结果映射</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Results(&#123;@Result(column = &quot;dept_id&quot;, property = &quot;deptId&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;create_time&quot;, property = &quot;createTime&quot;),</span></span><br><span class="line"><span class="meta">          @Result(column = &quot;update_time&quot;, property = &quot;updateTime&quot;)&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp where id=#&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Emp <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure><blockquote><p>@Results源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Results &#123;</span><br><span class="line"> String <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"> Result[] value() <span class="keyword">default</span> &#123;&#125;;  <span class="comment">//Result类型的数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Result源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Repeatable(Results.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Result &#123;</span><br><span class="line"> <span class="type">boolean</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">false</span>;<span class="comment">//表示当前列是否为主键（true:是主键）</span></span><br><span class="line"></span><br><span class="line"> String <span class="title function_">column</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//指定表中字段名</span></span><br><span class="line"></span><br><span class="line"> String <span class="title function_">property</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;<span class="comment">//指定类中属性名</span></span><br><span class="line"></span><br><span class="line"> Class&lt;?&gt; javaType() <span class="keyword">default</span> <span class="keyword">void</span>.class;</span><br><span class="line"></span><br><span class="line"> JdbcType <span class="title function_">jdbcType</span><span class="params">()</span> <span class="keyword">default</span> JdbcType.UNDEFINED;</span><br><span class="line"></span><br><span class="line"> Class&lt;? <span class="keyword">extends</span> <span class="title class_">TypeHandler</span>&gt; typeHandler() <span class="keyword">default</span> UnknownTypeHandler.class;</span><br><span class="line"></span><br><span class="line"> One <span class="title function_">one</span><span class="params">()</span> <span class="keyword">default</span> <span class="meta">@One</span>;</span><br><span class="line"></span><br><span class="line"> Many <span class="title function_">many</span><span class="params">()</span> <span class="keyword">default</span> <span class="meta">@Many</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>**开启驼峰命名(推荐)**：如果字段名与属性名符合驼峰命名规则，mybatis会自动通过驼峰命名规则映射</p><blockquote><p>驼峰命名规则：   abc_xyz    &#x3D;&gt;   abcXyz</p><ul><li>表中字段名：abc_xyz</li><li>类中属性名：abcXyz</li></ul></blockquote><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在application.properties中添加：</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><blockquote><p>要使用驼峰命名前提是 实体类的属性 与 数据库表中的字段名严格遵守驼峰命名。</p></blockquote><h3 id="1-6-3-条件查询"><a href="#1-6-3-条件查询" class="headerlink" title="1.6.3 条件查询"></a>1.6.3 条件查询</h3><p>在员工管理的列表页面中，我们需要根据条件查询员工信息，查询条件包括：姓名、性别、入职时间。 </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212113422924.png"></p><p>通过页面原型以及需求描述我们要实现的查询：</p><ul><li>姓名：要求支持模糊匹配</li><li>性别：要求精确匹配</li><li>入职时间：要求进行范围查询</li><li>根据最后修改时间进行降序排序</li></ul><p>SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time </span><br><span class="line"><span class="keyword">from</span> emp </span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> </span><br><span class="line">      <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">1</span> </span><br><span class="line">      <span class="keyword">and</span> entrydate <span class="keyword">between</span> <span class="string">&#x27;2010-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2020-01-01 &#x27;</span> </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>接口方法：</p><ul><li>方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp &quot; +</span></span><br><span class="line"><span class="meta">            &quot;where name like &#x27;%$&#123;name&#125;%&#x27; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and gender = #&#123;gender&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and entrydate between #&#123;begin&#125; and #&#123;end&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;order by update_time desc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212115149151.png"></p><p>以上方式注意事项：</p><ol><li><p>方法中的形参名和SQL语句中的参数占位符名保持一致</p></li><li><p>模糊查询使用${…}进行字符串拼接，这种方式呢，由于是字符串拼接，并不是预编译的形式，所以效率不高、且存在sql注入风险。</p></li></ol></blockquote><ul><li>方式二（解决SQL注入风险）<ul><li>使用MySQL提供的字符串拼接函数：concat(‘%’ , ‘关键字’ , ‘%’)</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from emp &quot; +</span></span><br><span class="line"><span class="meta">            &quot;where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and gender = #&#123;gender&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;and entrydate between #&#123;begin&#125; and #&#123;end&#125; &quot; +</span></span><br><span class="line"><span class="meta">            &quot;order by update_time desc&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">list</span><span class="params">(String name, Short gender, LocalDate begin, LocalDate end)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>执行结果：生成的SQL都是预编译的SQL语句（性能高、安全）</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212120006242.png"></p></blockquote><h3 id="1-6-4-参数名说明"><a href="#1-6-4-参数名说明" class="headerlink" title="1.6.4 参数名说明"></a>1.6.4 参数名说明</h3><p>在上面我们所编写的条件查询功能中，我们需要保证接口中方法的形参名和SQL语句中的参数占位符名相同。</p><blockquote><p>当方法中的形参名和SQL语句中的占位符参数名不相同时，就会出现以下问题：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212150611796.png"></p></blockquote><p>参数名在不同的SpringBoot版本中，处理方案还不同：</p><ul><li>在springBoot的2.x版本（保证参数名一致）</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212151156273.png"></p><blockquote><p>springBoot的父工程对compiler编译插件进行了默认的参数parameters配置，使得在编译时，会在生成的字节码文件中保留原方法形参的名称，所以#{…}里面可以直接通过形参名获取对应的值</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212151411154.png"></p></blockquote><ul><li>在springBoot的1.x版本&#x2F;单独使用mybatis（使用@Param注解来指定SQL语句中的参数名）</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212151628715.png"></p><blockquote><p>在编译时，生成的字节码文件当中，不会保留Mapper接口中方法的形参名称，而是使用var1、var2、…这样的形参名字，此时要获取参数值时，就要通过@Param注解来指定SQL语句中的参数名</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212151736274.png"></p></blockquote><h1 id="2-Mybatis的XML配置文件"><a href="#2-Mybatis的XML配置文件" class="headerlink" title="2. Mybatis的XML配置文件"></a>2. Mybatis的XML配置文件</h1><p>Mybatis的开发有两种方式：</p><ol><li>注解</li><li>XML</li></ol><h2 id="2-1-XML配置文件规范"><a href="#2-1-XML配置文件规范" class="headerlink" title="2.1 XML配置文件规范"></a>2.1 XML配置文件规范</h2><p>使用Mybatis的注解方式，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句，也就是将SQL语句写在XML配置文件中。</p><p>在Mybatis中使用XML映射文件方式开发，需要符合一定的规范：</p><ol><li><p>XML映射文件的名称与Mapper接口名称一致，并且将XML映射文件和Mapper接口放置在相同包下（同包同名）</p></li><li><p>XML映射文件的namespace属性为Mapper接口全限定名一致</p></li><li><p>XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致。</p></li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212153529732.png"></p><blockquote><p>&lt;select&gt;标签：就是用于编写select查询语句的。</p><ul><li>resultType属性，指的是查询返回的单条记录所封装的类型。</li></ul></blockquote><h2 id="2-2-XML配置文件实现"><a href="#2-2-XML配置文件实现" class="headerlink" title="2.2 XML配置文件实现"></a>2.2 XML配置文件实现</h2><p>第1步：创建XML映射文件</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212154908306.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212155304635.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212155544404.png"></p><p>第2步：编写XML映射文件</p><blockquote><p>xml映射文件中的dtd约束，直接从mybatis官网复制即可</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置：XML映射文件的namespace属性为Mapper接口全限定名</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212160316644.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置：XML映射文件中sql语句的id与Mapper接口中的方法名一致，并保持返回类型一致</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212163528787.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--查询操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">              and gender = #&#123;gender&#125;</span><br><span class="line">              and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        order by update_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>运行测试类，执行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221212163719534.png"></p></blockquote><h2 id="2-3-MybatisX的使用"><a href="#2-3-MybatisX的使用" class="headerlink" title="2.3 MybatisX的使用"></a>2.3 MybatisX的使用</h2><p>MybatisX是一款基于IDEA的快速开发Mybatis的插件，为效率而生。</p><p>MybatisX的安装：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213120923252.png"></p><p>可以通过MybatisX快速定位：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213121521406.png"></p><blockquote><p>MybatisX的使用在后续学习中会继续分享</p></blockquote><p>学习了Mybatis中XML配置文件的开发方式了，大家可能会存在一个疑问：到底是使用注解方式开发还是使用XML方式开发？</p><blockquote><p>官方说明：<a href="https://mybatis.net.cn/getting-started.html">https://mybatis.net.cn/getting-started.html</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901173948645.png"> </p></blockquote><p><strong>结论：</strong>使用Mybatis的注解，主要是来完成一些简单的增删改查功能。如果需要实现复杂的SQL功能，建议使用XML来配置映射语句。</p><h1 id="3-Mybatis动态SQL"><a href="#3-Mybatis动态SQL" class="headerlink" title="3. Mybatis动态SQL"></a>3. Mybatis动态SQL</h1><h2 id="3-1-什么是动态SQL"><a href="#3-1-什么是动态SQL" class="headerlink" title="3.1 什么是动态SQL"></a>3.1 什么是动态SQL</h2><p>在页面原型中，列表上方的条件是动态的，是可以不传递的，也可以只传递其中的1个或者2个或者全部。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901172933012.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901173203491.png"></p><p>而在我们刚才编写的SQL语句中，我们会看到，我们将三个条件直接写死了。 如果页面只传递了参数姓名name 字段，其他两个字段 性别 和 入职时间没有传递，那么这两个参数的值就是null。</p><p>此时，执行的SQL语句为：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901173431554.png"> </p><p>这个查询结果是不正确的。正确的做法应该是：传递了参数，再组装这个查询条件；如果没有传递参数，就不应该组装这个查询条件。</p><p>比如：如果姓名输入了”张”, 对应的SQL为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>如果姓名输入了”张”,，性别选择了”男”，则对应的SQL为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>  <span class="keyword">from</span> emp <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%张%&#x27;</span> <span class="keyword">and</span> gender <span class="operator">=</span> <span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p>SQL语句会随着用户的输入或外部条件的变化而变化，我们称为：<strong>动态SQL</strong>。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213122623278.png"></p><p>在Mybatis中提供了很多实现动态SQL的标签，我们学习Mybatis中的动态SQL就是掌握这些动态SQL标签。</p><h2 id="3-2-动态SQL-if"><a href="#3-2-动态SQL-if" class="headerlink" title="3.2 动态SQL-if"></a>3.2 动态SQL-if</h2><p><code>&lt;if&gt;</code>：用于判断条件是否成立。使用test属性进行条件判断，如果条件为true，则拼接SQL。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件表达式&quot;</span>&gt;</span></span><br><span class="line">   要拼接的sql语句</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，我们就通过<code>&lt;if&gt;</code>标签来改造之前条件查询的案例。</p><h3 id="3-2-1-条件查询"><a href="#3-2-1-条件查询" class="headerlink" title="3.2.1 条件查询"></a>3.2.1 条件查询</h3><p>示例：把SQL语句改造为动态SQL方式</p><ul><li>原有的SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">              and gender = #&#123;gender&#125;</span><br><span class="line">              and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>动态SQL语句</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        where</span><br><span class="line">    </span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                 name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                 and gender = #&#123;gender&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//性别数据为null、开始时间和结束时间也为null</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="string">&quot;张&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句： </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213140353285.png"></p></blockquote><p>下面呢，我们修改测试方法中的代码，再次进行测试，观察执行情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//姓名为null</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="literal">null</span>, (<span class="type">short</span>)<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213141139015.png"> </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213141253355.png"> </p><p>再次修改测试方法中的代码，再次进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//传递的数据全部为null</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行的SQL语句：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213143854434.png"></p><p>以上问题的解决方案：使用<code>&lt;where&gt;</code>标签代替SQL语句中的where关键字</p><ul><li><code>&lt;where&gt;</code>只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- if做为where标签的子元素 --&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                 and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                 and gender = #&#123;gender&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">                 and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">             <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//只有性别</span></span><br><span class="line">    List&lt;Emp&gt; list = empMapper.list(<span class="literal">null</span>, (<span class="type">short</span>)<span class="number">1</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">for</span>(Emp emp : list)&#123;</span><br><span class="line">        System.out.println(emp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213141909455.png"></p></blockquote><h3 id="3-2-2-更新员工"><a href="#3-2-2-更新员工" class="headerlink" title="3.2.2 更新员工"></a>3.2.2 更新员工</h3><p>案例：完善更新员工功能，修改为动态更新员工数据信息</p><ul><li>动态更新员工信息，如果更新时传递有值，则更新；如果更新时没有传递值，则不更新</li><li>解决方案：动态SQL</li></ul><p>修改Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//删除@Update注解编写的SQL语句</span></span><br><span class="line">    <span class="comment">//update操作的SQL语句编写在Mapper映射文件中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Emp emp)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改Mapper映射文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update emp</span><br><span class="line">        set</span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span></span><br><span class="line">                image=#&#123;image&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job=#&#123;job&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entrydate != null&quot;</span>&gt;</span></span><br><span class="line">                entrydate=#&#123;entrydate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null&quot;</span>&gt;</span></span><br><span class="line">                dept_id=#&#123;deptId&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">                update_time=#&#123;updateTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//要修改的员工信息</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setId(<span class="number">20</span>);</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Tom111&quot;</span>);</span><br><span class="line">        emp.setName(<span class="string">&quot;汤姆111&quot;</span>);</span><br><span class="line"></span><br><span class="line">        emp.setUpdateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，修改员工数据</span></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213152533851.png"></p></blockquote><p>再次修改测试方法，观察SQL语句执行情况：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//要修改的员工信息</span></span><br><span class="line">        <span class="type">Emp</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Emp</span>();</span><br><span class="line">        emp.setId(<span class="number">20</span>);</span><br><span class="line">        emp.setUsername(<span class="string">&quot;Tom222&quot;</span>);</span><br><span class="line">      </span><br><span class="line">        <span class="comment">//调用方法，修改员工数据</span></span><br><span class="line">        empMapper.update(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行的SQL语句：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213152850322.png"></p></blockquote><p>以上问题的解决方案：使用<code>&lt;set&gt;</code>标签代替SQL语句中的set关键字</p><ul><li><code>&lt;set&gt;</code>：动态的在SQL语句中插入set关键字，并会删掉额外的逗号。（用于update语句中）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--更新操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">        update emp</span><br><span class="line">        <span class="comment">&lt;!-- 使用set标签，代替update语句中的set关键字 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null&quot;</span>&gt;</span></span><br><span class="line">                username=#&#123;username&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">                name=#&#123;name&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">                gender=#&#123;gender&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span></span><br><span class="line">                image=#&#123;image&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;job != null&quot;</span>&gt;</span></span><br><span class="line">                job=#&#123;job&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;entrydate != null&quot;</span>&gt;</span></span><br><span class="line">                entrydate=#&#123;entrydate&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;deptId != null&quot;</span>&gt;</span></span><br><span class="line">                dept_id=#&#123;deptId&#125;,</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span></span><br><span class="line">                update_time=#&#123;updateTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        where id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>再次执行测试方法，执行的SQL语句：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213153329553.png"></p></blockquote><p><strong>小结</strong></p><ul><li><p><code>&lt;if&gt;</code></p><ul><li><p>用于判断条件是否成立，如果条件为true，则拼接SQL</p></li><li><p>形式：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> … <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>&lt;where&gt;</code></p><ul><li>where元素只会在子元素有内容的情况下才插入where子句，而且会自动去除子句的开头的AND或OR</li></ul></li><li><p><code>&lt;set&gt;</code></p><ul><li>动态地在行首插入 SET 关键字，并会删掉额外的逗号。（用在update语句中）</li></ul></li></ul><h2 id="3-3-动态SQL-foreach"><a href="#3-3-动态SQL-foreach" class="headerlink" title="3.3 动态SQL-foreach"></a>3.3 动态SQL-foreach</h2><p>案例：员工删除功能（既支持删除单条记录，又支持批量删除）</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901181751004.png"> </p><p>SQL语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from emp where id in (1,2,3);</span><br></pre></td></tr></table></figure><p>Mapper接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpMapper</span> &#123;</span><br><span class="line">    <span class="comment">//批量删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(List&lt;Integer&gt; ids)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML映射文件：</p><ul><li>使用<code>&lt;foreach&gt;</code>遍历deleteByIds方法中传递的参数ids集合</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;集合名称&quot;</span> <span class="attr">item</span>=<span class="string">&quot;集合遍历出来的元素/项&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;每一次遍历使用的分隔符&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">open</span>=<span class="string">&quot;遍历开始前拼接的片段&quot;</span> <span class="attr">close</span>=<span class="string">&quot;遍历结束后拼接的片段&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.EmpMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--删除操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">        delete from emp where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;ids&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span> </span><br></pre></td></tr></table></figure><blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213165710141.png"></p></blockquote><blockquote><p>执行的SQL语句：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213164957636.png"></p></blockquote><h2 id="3-4-动态SQL-sql-include"><a href="#3-4-动态SQL-sql-include" class="headerlink" title="3.4 动态SQL-sql&amp;include"></a>3.4 动态SQL-sql&amp;include</h2><p>问题分析：</p><ul><li>在xml映射文件中配置的SQL，有时可能会存在很多重复的片段，此时就会存在很多冗余的代码</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901182204358.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901182249421.png"></p><p>我们可以对重复的代码片段进行抽取，将其通过<code>&lt;sql&gt;</code>标签封装到一个SQL片段，然后再通过<code>&lt;include&gt;</code>标签进行引用。</p><ul><li><p><code>&lt;sql&gt;</code>：定义可重用的SQL片段</p></li><li><p><code>&lt;include&gt;</code>：通过属性refid，指定包含的SQL片段</p></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221213171244796.png"></p><p>SQL片段： 抽取重复的代码</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;commonSelect&quot;</span>&gt;</span></span><br><span class="line"> select id, username, password, name, gender, image, job, entrydate, dept_id, create_time, update_time from emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后通过<code>&lt;include&gt;</code> 标签在原来抽取的地方进行引用。操作如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itheima.pojo.Emp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;commonSelect&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;gender != null&quot;</span>&gt;</span></span><br><span class="line">            and gender = #&#123;gender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;begin != null and end != null&quot;</span>&gt;</span></span><br><span class="line">            and entrydate between #&#123;begin&#125; and #&#123;end&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by update_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-day07</title>
      <link href="/2023/10/16/day07-Mybatis%E7%9A%84%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
      <url>/2023/10/16/day07-Mybatis%E7%9A%84%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis入门"><a href="#Mybatis入门" class="headerlink" title="Mybatis入门"></a>Mybatis入门</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在前面我们学习MySQL数据库时，都是利用图形化客户端工具(如：idea、datagrip)，来操作数据库的。</p><blockquote><p>在客户端工具中，编写增删改查的SQL语句，发给MySQL数据库管理系统，由数据库管理系统执行SQL语句并返回执行结果。</p><p>增删改操作：返回受影响行数</p><p>查询操作：返回结果集(查询的结果)</p></blockquote><p>我们做为后端程序开发人员，通常会使用Java程序来完成对数据库的操作。Java程序操作数据库，现在主流的方式是：Mybatis。</p><p>什么是MyBatis?</p><ul><li><p>MyBatis是一款优秀的 <strong>持久层</strong> <strong>框架</strong>，用于简化JDBC的开发。</p></li><li><p>MyBatis本是 Apache的一个开源项目iBatis，2010年这个项目由apache迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。</p></li><li><p>官网：<a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p></li></ul><p>在上面我们提到了两个词：一个是持久层，另一个是框架。</p><ul><li>持久层：指的是就是数据访问层(dao)，是用来操作数据库的。</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901114951631.png"> </p><ul><li>框架：是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。在框架的基础上进行软件开发更加高效、规范、通用、可拓展。</li></ul><p>Mybatis课程安排：</p><ul><li><p>Mybatis入门</p></li><li><p>Mybatis基础增删改查</p></li><li><p>Mybatis动态SQL</p></li></ul><p>接下来，我们就通过一个入门程序，让大家快速感受一下通过Mybatis如何来操作数据库。</p><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门"></a>1. 快速入门</h2><p>需求：使用Mybatis查询所有用户数据。</p><h3 id="1-1-入门程序分析"><a href="#1-1-入门程序分析" class="headerlink" title="1.1 入门程序分析"></a>1.1 入门程序分析</h3><p>以前我们是在图形化客户端工具中编写SQL查询代码，发送给数据库执行，数据库执行后返回操作结果。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209155704203.png"> </p><p>图形化工具会把数据库执行的查询结果，使用表格的形式展现出来</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901121116813.png"> </p><p>现在使用Mybatis操作数据库，就是在Mybatis中编写SQL查询代码，发送给数据库执行，数据库执行后返回结果。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209155904370.png"></p><p> Mybatis会把数据库执行的查询结果，使用实体类封装起来（一行记录对应一个实体类对象）</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209161623051.png"></p><p>Mybatis操作数据库的步骤：</p><ol><li><p>准备工作(创建springboot工程、数据库表user、实体类User)</p></li><li><p>引入Mybatis的相关依赖，配置Mybatis(数据库连接信息)</p></li><li><p>编写SQL语句(注解&#x2F;XML)</p></li></ol><h3 id="1-2-入门程序实现"><a href="#1-2-入门程序实现" class="headerlink" title="1.2 入门程序实现"></a>1.2 入门程序实现</h3><h4 id="1-2-1-准备工作"><a href="#1-2-1-准备工作" class="headerlink" title="1.2.1 准备工作"></a>1.2.1 准备工作</h4><h5 id="1-2-1-1-创建springboot工程"><a href="#1-2-1-1-创建springboot工程" class="headerlink" title="1.2.1.1 创建springboot工程"></a>1.2.1.1 创建springboot工程</h5><p>创建springboot工程，并导入 mybatis的起步依赖、mysql的驱动包。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209162827242.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209163123443.png"></p><blockquote><p>项目工程创建完成后，自动在pom.xml文件中，导入Mybatis依赖和MySQL驱动依赖</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 仅供参考：只粘贴了pom.xml中部分内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis起步依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动包依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- spring单元测试 (集成了junit) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-2-1-2-数据准备"><a href="#1-2-1-2-数据准备" class="headerlink" title="1.2.1.2 数据准备"></a>1.2.1.2 数据准备</h5><p>创建用户表user，并创建对应的实体类User。</p><ul><li>用户表：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</span><br><span class="line">    id <span class="type">int</span> unsigned <span class="keyword">primary</span> key auto_increment comment <span class="string">&#x27;ID&#x27;</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    gender tinyint unsigned comment <span class="string">&#x27;性别, 1:男, 2:女&#x27;</span>,</span><br><span class="line">    phone <span class="type">varchar</span>(<span class="number">11</span>) comment <span class="string">&#x27;手机号&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, age, gender, phone) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;白眉鹰王&#x27;</span>,<span class="number">55</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800000000&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, age, gender, phone) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;金毛狮王&#x27;</span>,<span class="number">45</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800000001&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, age, gender, phone) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;青翼蝠王&#x27;</span>,<span class="number">38</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800000002&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, age, gender, phone) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;紫衫龙王&#x27;</span>,<span class="number">42</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;18800000003&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, age, gender, phone) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;光明左使&#x27;</span>,<span class="number">37</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800000004&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span>(id, name, age, gender, phone) <span class="keyword">VALUES</span> (<span class="keyword">null</span>,<span class="string">&#x27;光明右使&#x27;</span>,<span class="number">48</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;18800000005&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901121116813.png"> </p><ul><li><p>实体类</p><ul><li>实体类的属性名与表中的字段名一一对应。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;   <span class="comment">//id（主键）</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> Short age;    <span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> Short gender; <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> String phone; <span class="comment">//手机号</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略GET, SET方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209170354143.png"></p><h4 id="1-2-2-配置Mybatis"><a href="#1-2-2-配置Mybatis" class="headerlink" title="1.2.2 配置Mybatis"></a>1.2.2 配置Mybatis</h4><blockquote><p>在之前使用图形化客户端工具，连接MySQL数据库时，需要配置：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209172527630.png"></p><p>连接数据库的四大参数：</p><ul><li>MySQL驱动类 </li><li>登录名</li><li>密码</li><li>数据库连接字符串</li></ul></blockquote><p>基于上述分析，在Mybatis中要连接数据库，同样也需要以上4个参数配置。</p><p>在springboot项目中，可以编写application.properties文件，配置数据库连接信息。我们要连接数据库，就需要配置数据库连接的基本信息，包括：driver-class-name、url 、username，password。</p><blockquote><p>在入门程序中，大家可以直接这么配置，后面会介绍什么是驱动。</p></blockquote><p>application.properties:</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#驱动类名称</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#数据库连接的url</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="comment">#连接数据库的用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#连接数据库的密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><blockquote><p>上述的配置，可以直接复制过去，不要敲错了。 全部都是 spring.datasource.xxxx 开头。</p></blockquote><h4 id="1-2-3-编写SQL语句"><a href="#1-2-3-编写SQL语句" class="headerlink" title="1.2.3 编写SQL语句"></a>1.2.3 编写SQL语句</h4><p>在创建出来的springboot工程中，在引导类所在包下，在创建一个包 mapper。在mapper包下创建一个接口 UserMapper ，这是一个持久层接口（Mybatis的持久层接口规范一般都叫 XxxMapper）。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209175843651.png"></p><p>UserMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查询所有用户数据</span></span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>@Mapper注解：表示是mybatis中的Mapper接口</p><ul><li>程序运行时：框架会自动生成接口的实现类对象(代理对象)，并给交Spring的IOC容器管理</li></ul><p> @Select注解：代表的就是select查询，用于书写select查询语句</p></blockquote><h4 id="1-2-4-单元测试"><a href="#1-2-4-单元测试" class="headerlink" title="1.2.4 单元测试"></a>1.2.4 单元测试</h4><p>在创建出来的SpringBoot工程中，在src下的test目录下，已经自动帮我们创建好了测试类 ，并且在测试类上已经添加了注解 @SpringBootTest，代表该测试类已经与SpringBoot整合。 </p><p>该测试类在运行时，会自动通过引导类加载Spring的环境（IOC容器）。我们要测试那个bean对象，就可以直接通过@Autowired注解直接将其注入进行，然后就可以测试了。 </p><p>测试类代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisQuickstartApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; userList = userMapper.list();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User&#123;id=1, name=&#x27;白眉鹰王&#x27;, age=55, gender=1, phone=&#x27;18800000000&#x27;&#125;</span><br><span class="line">User&#123;id=2, name=&#x27;金毛狮王&#x27;, age=45, gender=1, phone=&#x27;18800000001&#x27;&#125;</span><br><span class="line">User&#123;id=3, name=&#x27;青翼蝠王&#x27;, age=38, gender=1, phone=&#x27;18800000002&#x27;&#125;</span><br><span class="line">User&#123;id=4, name=&#x27;紫衫龙王&#x27;, age=42, gender=2, phone=&#x27;18800000003&#x27;&#125;</span><br><span class="line">User&#123;id=5, name=&#x27;光明左使&#x27;, age=37, gender=1, phone=&#x27;18800000004&#x27;&#125;</span><br><span class="line">User&#123;id=6, name=&#x27;光明右使&#x27;, age=48, gender=1, phone=&#x27;18800000005&#x27;&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-3-解决SQL警告与提示"><a href="#1-3-解决SQL警告与提示" class="headerlink" title="1.3 解决SQL警告与提示"></a>1.3 解决SQL警告与提示</h3><p>默认我们在UserMapper接口上加的@Select注解中编写SQL语句是没有提示的。 如果想让idea给我们提示对应的SQL语句，我们需要在IDEA中配置与MySQL数据库的链接。 </p><p>默认我们在UserMapper接口上的@Select注解中编写SQL语句是没有提示的。如果想让idea给出提示，可以做如下配置：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210143348119.png"></p><p>配置完成之后，发现SQL语句中的关键字有提示了，但还存在不识别表名(列名)的情况：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210143934318.png"></p><blockquote><p>产生原因：Idea和数据库没有建立连接，不识别表信息</p><p>解决方案：在Idea中配置MySQL数据库连接</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210144139792.png"> </p><blockquote><p>在配置的时候指定连接那个数据库，如上图所示连接的就是mybatis数据库。</p></blockquote><h2 id="2-JDBC介绍-了解"><a href="#2-JDBC介绍-了解" class="headerlink" title="2. JDBC介绍(了解)"></a>2. JDBC介绍(了解)</h2><h3 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h3><p>通过Mybatis的快速入门，我们明白了，通过Mybatis可以很方便的进行数据库的访问操作。但是大家要明白，其实java语言操作数据库呢，只能通过一种方式：使用sun公司提供的 JDBC 规范。</p><blockquote><p>Mybatis框架，就是对原始的JDBC程序的封装。 </p></blockquote><p>那到底什么是JDBC呢，接下来，我们就来介绍一下。</p><p>JDBC： ( Java DataBase Connectivity )，就是使用Java语言操作关系型数据库的一套API。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210144811961.png"> </p><blockquote><p>本质：</p><ul><li><p>sun公司官方定义的一套操作所有关系型数据库的规范，即接口。</p></li><li><p>各个数据库厂商去实现这套接口，提供数据库驱动jar包。</p></li><li><p>我们可以使用这套接口(JDBC)编程，真正执行的代码是驱动jar包中的实现类。</p></li></ul></blockquote><h3 id="2-2-代码"><a href="#2-2-代码" class="headerlink" title="2.2 代码"></a>2.2 代码</h3><p>下面我们看看原始的JDBC程序是如何操作数据库的。操作步骤如下：</p><ol><li>注册驱动</li><li>获取连接对象</li><li>执行SQL语句，返回执行结果</li><li>处理执行结果</li><li>释放资源</li></ol><blockquote><p>在pom.xml文件中已引入MySQL驱动依赖，我们直接编写JDBC代码即可</p></blockquote><p>JDBC具体代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itheima.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdbc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 注册驱动</span></span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 获取数据库连接</span></span><br><span class="line">        String url=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/mybatis&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 执行SQL</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement(); <span class="comment">//操作SQL的对象</span></span><br><span class="line">        String sql=<span class="string">&quot;select id,name,age,gender,phone from user&quot;</span>;</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> statement.executeQuery(sql);<span class="comment">//SQL查询结果会封装在ResultSet对象中</span></span><br><span class="line"></span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//集合对象（用于存储User对象）</span></span><br><span class="line">        <span class="comment">//4. 处理SQL执行结果</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">            <span class="comment">//取出一行记录中id、name、age、gender、phone下的数据</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">age</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            <span class="type">short</span> <span class="variable">gender</span> <span class="operator">=</span> rs.getShort(<span class="string">&quot;gender&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> rs.getString(<span class="string">&quot;phone&quot;</span>);</span><br><span class="line">            <span class="comment">//把一行记录中的数据，封装到User对象中</span></span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(id,name,age,gender,phone);</span><br><span class="line">            userList.add(user);<span class="comment">//User对象添加到集合</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 释放资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        rs.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DriverManager(类)：数据库驱动管理类。</p><ul><li><p>作用：</p><ol><li><p>注册驱动</p></li><li><p>创建java代码和数据库之间的连接，即获取Connection对象</p></li></ol></li></ul><p>Connection(接口)：建立数据库连接的对象</p><ul><li>作用：用于建立java程序和数据库之间的连接</li></ul><p>Statement(接口)： 数据库操作对象(执行SQL语句的对象)。</p><ul><li>作用：用于向数据库发送sql语句</li></ul><p>ResultSet(接口)：结果集对象（一张虚拟表）</p><ul><li>作用：sql查询语句的执行结果会封装在ResultSet中</li></ul></blockquote><p>通过上述代码，我们看到直接基于JDBC程序来操作数据库，代码实现非常繁琐，所以在项目开发中，我们很少使用。  在项目开发中，通常会使用Mybatis这类的高级技术来操作数据库，从而简化数据库操作、提高开发效率。</p><h3 id="2-3-问题分析"><a href="#2-3-问题分析" class="headerlink" title="2.3 问题分析"></a>2.3 问题分析</h3><p>原始的JDBC程序，存在以下几点问题：</p><ol><li>数据库链接的四要素(驱动、链接、用户名、密码)全部硬编码在java代码中</li><li>查询结果的解析及封装非常繁琐</li><li>每一次查询数据库都需要获取连接,操作完毕后释放连接, 资源浪费, 性能降低</li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210153407998.png"></p><h3 id="2-4-技术对比"><a href="#2-4-技术对比" class="headerlink" title="2.4 技术对比"></a>2.4 技术对比</h3><p>分析了JDBC的缺点之后，我们再来看一下在mybatis中，是如何解决这些问题的：</p><ol><li><p>数据库连接四要素(驱动、链接、用户名、密码)，都配置在springboot默认的配置文件 application.properties中</p></li><li><p>查询结果的解析及封装，由mybatis自动完成映射封装，我们无需关注</p></li><li><p>在mybatis中使用了数据库连接池技术，从而避免了频繁的创建连接、销毁连接而带来的资源浪费。</p></li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210154324151.png"></p><blockquote><p>使用SpringBoot+Mybatis的方式操作数据库，能够提升开发效率、降低资源浪费</p></blockquote><p>而对于Mybatis来说，我们在开发持久层程序操作数据库时，需要重点关注以下两个方面：</p><ol><li><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#驱动类名称</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#数据库连接的url</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="comment">#连接数据库的用户名</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">#连接数据库的密码</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure></li><li><p>Mapper接口（编写SQL语句）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select id, name, age, gender, phone from user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">list</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-数据库连接池"><a href="#3-数据库连接池" class="headerlink" title="3. 数据库连接池"></a>3. 数据库连接池</h2><p>在前面我们所讲解的mybatis中，使用了数据库连接池技术，避免频繁的创建连接、销毁连接而带来的资源浪费。</p><p>下面我们就具体的了解下数据库连接池。</p><h3 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h3><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210160341852.png"></p><blockquote><p>没有使用数据库连接池：</p><ul><li>客户端执行SQL语句：要先创建一个新的连接对象，然后执行SQL语句，SQL语句执行后又需要关闭连接对象从而释放资源，每次执行SQL时都需要创建连接、销毁链接，这种频繁的重复创建销毁的过程是比较耗费计算机的性能。</li></ul></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210161016314.png"></p><p>数据库连接池是个容器，负责分配、管理数据库连接(Connection)</p><ul><li>程序在启动时，会在数据库连接池(容器)中，创建一定数量的Connection对象</li></ul><p>允许应用程序重复使用一个现有的数据库连接，而不是再重新建立一个</p><ul><li>客户端在执行SQL时，先从连接池中获取一个Connection对象，然后在执行SQL语句，SQL语句执行完之后，释放Connection时就会把Connection对象归还给连接池（Connection对象可以复用）</li></ul><p>释放空闲时间超过最大空闲时间的连接，来避免因为没有释放连接而引起的数据库连接遗漏</p><ul><li>客户端获取到Connection对象了，但是Connection对象并没有去访问数据库(处于空闲)，数据库连接池发现Connection对象的空闲时间 &gt; 连接池中预设的最大空闲时间，此时数据库连接池就会自动释放掉这个连接对象</li></ul><p>数据库连接池的好处：</p><ol><li>资源重用</li><li>提升系统响应速度</li><li>避免数据库连接遗漏</li></ol><h3 id="3-2-产品"><a href="#3-2-产品" class="headerlink" title="3.2 产品"></a>3.2 产品</h3><p>要怎么样实现数据库连接池呢？</p><ul><li><p>官方(sun)提供了数据库连接池标准（javax.sql.DataSource接口）</p><ul><li><p>功能：获取连接 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException;</span><br></pre></td></tr></table></figure></li><li><p>第三方组织必须按照DataSource接口实现</p></li></ul></li></ul><p>常见的数据库连接池：</p><ul><li>C3P0</li><li>DBCP</li><li>Druid</li><li>Hikari (springboot默认)</li></ul><p>现在使用更多的是：Hikari、Druid  （性能更优越）</p><ul><li>Hikari（追光者） [默认的连接池]</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901144923251.png"> </p><ul><li><p>Druid（德鲁伊）</p><ul><li><p>Druid连接池是阿里巴巴开源的数据库连接池项目 </p></li><li><p>功能强大，性能优秀，是Java语言最好的数据库连接池之一</p></li></ul></li></ul><p>​</p><p>如果我们想把默认的数据库连接池切换为Druid数据库连接池，只需要完成以下两步操作即可：</p><blockquote><p>参考官方地址：<a href="https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter">https://github.com/alibaba/druid/tree/master/druid-spring-boot-starter</a></p></blockquote><ol><li>在pom.xml文件中引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Druid连接池依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>在application.properties中引入数据库连接配置</li></ol><p>方式1：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.druid.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.druid.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.druid.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.druid.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">1234</span></span><br></pre></td></tr></table></figure><h2 id="4-lombok"><a href="#4-lombok" class="headerlink" title="4. lombok"></a>4. lombok</h2><h3 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1 介绍"></a>4.1 介绍</h3><p>Lombok是一个实用的Java类库，可以通过简单的注解来简化和消除一些必须有但显得很臃肿的Java代码。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210164641266.png"></p><blockquote><p>通过注解的形式自动生成构造器、getter&#x2F;setter、equals、hashcode、toString等方法，并可以自动化生成日志变量，简化java开发、提高效率。</p></blockquote><table><thead><tr><th><strong>注解</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>@Getter&#x2F;@Setter</td><td>为所有的属性提供get&#x2F;set方法</td></tr><tr><td>@ToString</td><td>会给类自动生成易阅读的  toString 方法</td></tr><tr><td>@EqualsAndHashCode</td><td>根据类所拥有的非静态字段自动重写 equals 方法和  hashCode 方法</td></tr><tr><td>@Data</td><td>提供了更综合的生成代码功能（@Getter  + @Setter + @ToString + @EqualsAndHashCode）</td></tr><tr><td>@NoArgsConstructor</td><td>为实体类生成无参的构造器方法</td></tr><tr><td>@AllArgsConstructor</td><td>为实体类生成除了static修饰的字段之外带有各参数的构造器方法。</td></tr></tbody></table><h3 id="4-2-使用"><a href="#4-2-使用" class="headerlink" title="4.2 使用"></a>4.2 使用</h3><p>第1步：在pom.xml文件中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在springboot的父工程中，已经集成了lombok并指定了版本号，故当前引入依赖时不需要指定version --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第2步：在实体类上添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short age;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在实体类上添加了@Data注解，那么这个类在编译时期，就会生成getter&#x2F;setter、equals、hashcode、toString等方法。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210170733921.png"></p></blockquote><p>说明：@Data注解中不包含全参构造方法，通常在实体类上，还会添加上：全参构造、无参构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//getter方法、setter方法、toString方法、hashCode方法、equals方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//无参构造</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//全参构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Short age;</span><br><span class="line">    <span class="keyword">private</span> Short gender;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Lombok的注意事项：</p><ul><li>Lombok会在编译时，会自动生成对应的java代码</li><li>在使用lombok时，还需要安装一个lombok的插件（新版本的IDEA中自带）</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221210165506359.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-06</title>
      <link href="/2023/10/16/day06-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL/"/>
      <url>/2023/10/16/day06-%E6%95%B0%E6%8D%AE%E5%BA%93-MySQL/</url>
      
        <content type="html"><![CDATA[<h1 id="一-数据库开发1-MySQL"><a href="#一-数据库开发1-MySQL" class="headerlink" title="一.数据库开发1-MySQL"></a>一.数据库开发1-MySQL</h1><p>在上次学习的内容中，我们讲解了：</p><ul><li>使用DDL语句来操作数据库以及表结构（数据库设计）</li><li>使用DML语句来完成数据库中数据的增、删、改操作（数据库操作）</li></ul><p>我们今天还是继续学习数据库操作方面的内容：查询（DQL语句）。</p><p>查询操作我们分为两部分学习：</p><ul><li>DQL语句-单表操作</li><li>DQL语句-多表操作</li></ul><h2 id="1-数据库操作-DQL"><a href="#1-数据库操作-DQL" class="headerlink" title="1. 数据库操作-DQL"></a>1. 数据库操作-DQL</h2><h3 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h3><p>DQL英文全称是Data Query Language(数据查询语言)，用来查询数据库表中的记录。</p><p>查询关键字：SELECT</p><p>查询操作是所有SQL语句当中最为常见，也是最为重要的操作。在一个正常的业务系统中，查询操作的使用频次是要远高于增删改操作的。当我们打开某个网站或APP所看到的展示信息，都是通过从数据库中查询得到的，而在这个查询过程中，还会涉及到条件、排序、分页等操作。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220611103943417.png"> </p><h3 id="1-2-语法"><a href="#1-2-语法" class="headerlink" title="1.2 语法"></a>1.2 语法</h3><p>DQL查询语句，语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">字段列表</span><br><span class="line">FROM</span><br><span class="line">表名列表</span><br><span class="line">WHERE</span><br><span class="line">条件列表</span><br><span class="line">GROUP  BY</span><br><span class="line">分组字段列表</span><br><span class="line">HAVING</span><br><span class="line">分组后条件列表</span><br><span class="line">ORDER BY</span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p>我们今天会将上面的完整语法拆分为以下几个部分学习：</p><ul><li>基本查询（不带任何条件）</li><li>条件查询（where）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><p>准备一些测试数据用于查询操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">create database db02; -- 创建数据库</span><br><span class="line">use db02; -- 切换数据库</span><br><span class="line">-- 员工管理(带约束)</span><br><span class="line">create table tb_emp (</span><br><span class="line">    id int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    username varchar(20) not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    password varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    name varchar(10) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">    image varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">    job tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,</span><br><span class="line">    entrydate date comment &#x27;入职时间&#x27;,</span><br><span class="line">    create_time datetime not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br><span class="line"></span><br><span class="line">-- 准备测试数据</span><br><span class="line">INSERT INTO tb_emp (id, username, password, name, gender, image, job, entrydate, create_time, update_time) VALUES</span><br><span class="line">    (1, &#x27;jinyong&#x27;, &#x27;123456&#x27;, &#x27;金庸&#x27;, 1, &#x27;1.jpg&#x27;, 4, &#x27;2000-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:35&#x27;),</span><br><span class="line">    (2, &#x27;zhangwuji&#x27;, &#x27;123456&#x27;, &#x27;张无忌&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:37&#x27;),</span><br><span class="line">    (3, &#x27;yangxiao&#x27;, &#x27;123456&#x27;, &#x27;杨逍&#x27;, 1, &#x27;3.jpg&#x27;, 2, &#x27;2008-05-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:39&#x27;),</span><br><span class="line">    (4, &#x27;weiyixiao&#x27;, &#x27;123456&#x27;, &#x27;韦一笑&#x27;, 1, &#x27;4.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:41&#x27;),</span><br><span class="line">    (5, &#x27;changyuchun&#x27;, &#x27;123456&#x27;, &#x27;常遇春&#x27;, 1, &#x27;5.jpg&#x27;, 2, &#x27;2012-12-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:43&#x27;),</span><br><span class="line">    (6, &#x27;xiaozhao&#x27;, &#x27;123456&#x27;, &#x27;小昭&#x27;, 2, &#x27;6.jpg&#x27;, 3, &#x27;2013-09-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:45&#x27;),</span><br><span class="line">    (7, &#x27;jixiaofu&#x27;, &#x27;123456&#x27;, &#x27;纪晓芙&#x27;, 2, &#x27;7.jpg&#x27;, 1, &#x27;2005-08-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:47&#x27;),</span><br><span class="line">    (8, &#x27;zhouzhiruo&#x27;, &#x27;123456&#x27;, &#x27;周芷若&#x27;, 2, &#x27;8.jpg&#x27;, 1, &#x27;2014-11-09&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:49&#x27;),</span><br><span class="line">    (9, &#x27;dingminjun&#x27;, &#x27;123456&#x27;, &#x27;丁敏君&#x27;, 2, &#x27;9.jpg&#x27;, 1, &#x27;2011-03-11&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:51&#x27;),</span><br><span class="line">    (10, &#x27;zhaomin&#x27;, &#x27;123456&#x27;, &#x27;赵敏&#x27;, 2, &#x27;10.jpg&#x27;, 1, &#x27;2013-09-05&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:53&#x27;),</span><br><span class="line">    (11, &#x27;luzhangke&#x27;, &#x27;123456&#x27;, &#x27;鹿杖客&#x27;, 1, &#x27;11.jpg&#x27;, 2, &#x27;2007-02-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:55&#x27;),</span><br><span class="line">    (12, &#x27;hebiweng&#x27;, &#x27;123456&#x27;, &#x27;鹤笔翁&#x27;, 1, &#x27;12.jpg&#x27;, 2, &#x27;2008-08-18&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:57&#x27;),</span><br><span class="line">    (13, &#x27;fangdongbai&#x27;, &#x27;123456&#x27;, &#x27;方东白&#x27;, 1, &#x27;13.jpg&#x27;, 1, &#x27;2012-11-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:35:59&#x27;),</span><br><span class="line">    (14, &#x27;zhangsanfeng&#x27;, &#x27;123456&#x27;, &#x27;张三丰&#x27;, 1, &#x27;14.jpg&#x27;, 2, &#x27;2002-08-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:01&#x27;),</span><br><span class="line">    (15, &#x27;yulianzhou&#x27;, &#x27;123456&#x27;, &#x27;俞莲舟&#x27;, 1, &#x27;15.jpg&#x27;, 2, &#x27;2011-05-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:03&#x27;),</span><br><span class="line">    (16, &#x27;songyuanqiao&#x27;, &#x27;123456&#x27;, &#x27;宋远桥&#x27;, 1, &#x27;16.jpg&#x27;, 2, &#x27;2010-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:05&#x27;),</span><br><span class="line">    (17, &#x27;chenyouliang&#x27;, &#x27;12345678&#x27;, &#x27;陈友谅&#x27;, 1, &#x27;17.jpg&#x27;, null, &#x27;2015-03-21&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:07&#x27;),</span><br><span class="line">    (18, &#x27;zhang1&#x27;, &#x27;123456&#x27;, &#x27;张一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:09&#x27;),</span><br><span class="line">    (19, &#x27;zhang2&#x27;, &#x27;123456&#x27;, &#x27;张二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:11&#x27;),</span><br><span class="line">    (20, &#x27;zhang3&#x27;, &#x27;123456&#x27;, &#x27;张三&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2018-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:13&#x27;),</span><br><span class="line">    (21, &#x27;zhang4&#x27;, &#x27;123456&#x27;, &#x27;张四&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2015-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:15&#x27;),</span><br><span class="line">    (22, &#x27;zhang5&#x27;, &#x27;123456&#x27;, &#x27;张五&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2016-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:17&#x27;),</span><br><span class="line">    (23, &#x27;zhang6&#x27;, &#x27;123456&#x27;, &#x27;张六&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2012-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:19&#x27;),</span><br><span class="line">    (24, &#x27;zhang7&#x27;, &#x27;123456&#x27;, &#x27;张七&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2006-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:21&#x27;),</span><br><span class="line">    (25, &#x27;zhang8&#x27;, &#x27;123456&#x27;, &#x27;张八&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2002-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:23&#x27;),</span><br><span class="line">    (26, &#x27;zhang9&#x27;, &#x27;123456&#x27;, &#x27;张九&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2011-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:25&#x27;),</span><br><span class="line">    (27, &#x27;zhang10&#x27;, &#x27;123456&#x27;, &#x27;张十&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2004-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:27&#x27;),</span><br><span class="line">    (28, &#x27;zhang11&#x27;, &#x27;123456&#x27;, &#x27;张十一&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2007-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:29&#x27;),</span><br><span class="line">    (29, &#x27;zhang12&#x27;, &#x27;123456&#x27;, &#x27;张十二&#x27;, 1, &#x27;2.jpg&#x27;, 2, &#x27;2020-01-01&#x27;, &#x27;2022-10-27 16:35:33&#x27;, &#x27;2022-10-27 16:36:31&#x27;);</span><br></pre></td></tr></table></figure><h3 id="1-3-基本查询"><a href="#1-3-基本查询" class="headerlink" title="1.3 基本查询"></a>1.3 基本查询</h3><p>在基本查询的DQL语句中，不带任何的查询条件，语法如下：</p><ul><li><p>查询多个字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1, 字段2, 字段3 from  表名;</span><br></pre></td></tr></table></figure></li><li><p>查询所有字段（通配符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select *  from  表名;</span><br></pre></td></tr></table></figure></li><li><p>设置别名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select 字段1 [ as 别名1 ] , 字段2 [ as 别名2 ]  from  表名;</span><br></pre></td></tr></table></figure></li><li><p>去除重复记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct 字段列表 from  表名;</span><br></pre></td></tr></table></figure></li></ul><p>案例1：查询指定字段 name，entrydate并返回</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,entrydate from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206112810199.png"></p><p>案例2：查询返回所有字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_emp;</span><br></pre></td></tr></table></figure><blockquote><p><code>*</code>号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206113904763.png"></p><p>案例3：查询所有员工的 name,entrydate，并起别名(姓名、入职日期)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：</span><br><span class="line">select name AS 姓名, entrydate AS 入职日期 from tb_emp;</span><br><span class="line">-- 方式2： 别名中有特殊字符时，使用&#x27;&#x27;或&quot;&quot;包含</span><br><span class="line">select name AS &#x27;姓 名&#x27;, entrydate AS &#x27;入职日期&#x27; from tb_emp;</span><br><span class="line">-- 方式3：</span><br><span class="line">select name AS &quot;姓名&quot;, entrydate AS &quot;入职日期&quot; from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206114752149.png"></p><p>案例4：查询已有的员工关联了哪几种职位(不要重复)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select distinct job from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206115440117.png"></p><h3 id="1-4-条件查询"><a href="#1-4-条件查询" class="headerlink" title="1.4 条件查询"></a>1.4 条件查询</h3><p><strong>语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段列表  <span class="keyword">from</span>   表名   <span class="keyword">where</span>   条件列表 ; <span class="comment">-- 条件列表：意味着可以有多个条件</span></span><br></pre></td></tr></table></figure><p>学习条件查询就是学习条件的构建方式，而在SQL语句当中构造条件的运算符分为两类：</p><ul><li>比较运算符</li><li>逻辑运算符</li></ul><p>常用的比较运算符如下: </p><table><thead><tr><th><strong>比较运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>between …  and …</td><td>在某个范围之内(含最小、最大值)</td></tr><tr><td>in(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>like 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>is null</td><td>是null</td></tr></tbody></table><p>常用的逻辑运算符如下:</p><table><thead><tr><th><strong>逻辑运算符</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>and 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>or 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>not 或 !</td><td>非 , 不是</td></tr></tbody></table><p>案例1：查询 姓名 为 杨逍 的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name = &#x27;杨逍&#x27;; -- 字符串使用&#x27;&#x27;或&quot;&quot;包含</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206121255784.png"></p><p>案例2：查询 id小于等于5 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where id &lt;=5;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206121523712.png"></p><p>案例3：查询 没有分配职位 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job is null ;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206121754267.png"></p><blockquote><p>注意：查询为NULL的数据时，不能使用 <code>= null</code></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206122036970.png"></p></blockquote><p>案例4：查询 有职位 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job is not null ;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206122454101.png"></p><p>案例5：查询 密码不等于 ‘123456’ 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where password &lt;&gt; &#x27;123456&#x27;;</span><br><span class="line">-- 方式2：</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where password != &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206122712152.png"></p><p>案例6：查询 入职日期 在 ‘2000-01-01’ (包含) 到 ‘2010-01-01’(包含) 之间的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate&gt;=&#x27;2000-01-01&#x27; and entrydate&lt;=&#x27;2010-01-01&#x27;;</span><br><span class="line">-- 方式2： between...and</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206125100857.png"></p><p>案例7：查询 入职时间 在 ‘2000-01-01’ (包含) 到 ‘2010-01-01’(包含) 之间 且 性别为女 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate between &#x27;2000-01-01&#x27; and &#x27;2010-01-01&#x27;</span><br><span class="line">      and gender = 2;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206125356737.png"></p><p>案例8：查询 职位是 2 (讲师), 3 (学工主管), 4 (教研主管) 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 方式1：使用or连接多个条件</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job=2 or job=3 or job=4;</span><br><span class="line">-- 方式2：in关键字</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where job in (2,3,4);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206141451342.png"></p><p>案例9：查询 姓名 为两个字的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name like &#x27;__&#x27;;  # 通配符 &quot;_&quot; 代表任意1个字符</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206141937293.png"></p><p>案例10：查询 姓 ‘张’ 的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name like &#x27;张%&#x27;; # 通配符 &quot;%&quot; 代表任意个字符（0个 ~ 多个）</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206142156154.png"></p><h3 id="1-5-聚合函数"><a href="#1-5-聚合函数" class="headerlink" title="1.5 聚合函数"></a>1.5 聚合函数</h3><p>之前我们做的查询都是横向查询，就是根据条件一行一行的进行判断，而使用聚合函数查询就是纵向查询，它是对一列的值进行计算，然后返回一个结果值。（将一列数据作为一个整体，进行纵向计算）</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  聚合函数(字段列表)  from  表名 ;</span><br></pre></td></tr></table></figure><blockquote><p>注意 : 聚合函数会忽略空值，对NULL值不作为统计。</p></blockquote><p>常用聚合函数：</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>count</td><td>统计数量</td></tr><tr><td>max</td><td>最大值</td></tr><tr><td>min</td><td>最小值</td></tr><tr><td>avg</td><td>平均值</td></tr><tr><td>sum</td><td>求和</td></tr></tbody></table><blockquote><p>count ：按照列去统计有多少行数据。</p><ul><li>在根据指定的列统计的时候，如果这一列中有null的行，该行不会被统计在其中。</li></ul><p>sum ：计算指定列的数值和，如果不是数值类型，那么计算结果为0</p><p>max ：计算指定列的最大值</p><p>min ：计算指定列的最小值</p><p>avg ：计算指定列的平均值</p></blockquote><p>案例1：统计该企业员工数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># count(字段)</span><br><span class="line">select count(id) from tb_emp;-- 结果：29</span><br><span class="line">select count(job) from tb_emp;-- 结果：28 （聚合函数对NULL值不做计算）</span><br><span class="line"></span><br><span class="line"># count(常量)</span><br><span class="line">select count(0) from tb_emp;</span><br><span class="line">select count(&#x27;A&#x27;) from tb_emp;</span><br><span class="line"></span><br><span class="line"># count(*)  推荐此写法（MySQL底层进行了优化）</span><br><span class="line">select count(*) from tb_emp;</span><br></pre></td></tr></table></figure><p>案例2：统计该企业最早入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select min(entrydate) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206160145339.png"></p><p>案例3：统计该企业最迟入职的员工</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max(entrydate) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206160307416.png"></p><p>案例4：统计该企业员工 ID 的平均值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(id) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206160416605.png"></p><p>案例5：统计该企业员工的 ID 之和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sum(id) from tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206160604073.png"></p><h3 id="1-6-分组查询"><a href="#1-6-分组查询" class="headerlink" title="1.6 分组查询"></a>1.6 分组查询</h3><p>分组： 按照某一列或者某几列，把相同的数据进行合并输出。</p><blockquote><p>分组其实就是按列进行分类(指定列下相同的数据归为一类)，然后可以对分类完的数据进行合并计算。</p><p>分组查询通常会使用聚合函数进行计算。</p></blockquote><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表  from  表名  [where 条件]  group by 分组字段名  [having 分组后过滤条件];</span><br></pre></td></tr></table></figure><p>案例1：根据性别分组 , 统计男性和女性员工的数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select gender, count(*)</span><br><span class="line">from tb_emp</span><br><span class="line">group by gender; -- 按照gender字段进行分组（gender字段下相同的数据归为一组）</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206172615000.png"></p><p>案例2：查询入职时间在 ‘2015-01-01’ (包含) 以前的员工 , 并对结果根据职位分组 , 获取员工数量大于等于2的职位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select job, count(*)</span><br><span class="line">from tb_emp</span><br><span class="line">where entrydate &lt;= &#x27;2015-01-01&#x27;   -- 分组前条件</span><br><span class="line">group by job                      -- 按照job字段分组</span><br><span class="line">having count(*) &gt;= 2;             -- 分组后条件</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206172431873.png"></p><blockquote><p>注意事项:</p><p>​• 分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</p><p>​• 执行顺序：where &gt; 聚合函数 &gt; having </p></blockquote><p><strong>where与having区别（面试题）</strong></p><ul><li>执行时机不同：where是分组之前进行过滤，不满足where条件，不参与分组；而having是分组之后对结果进行过滤。</li><li>判断条件不同：where不能对聚合函数进行判断，而having可以。</li></ul><h3 id="1-7-排序查询"><a href="#1-7-排序查询" class="headerlink" title="1.7 排序查询"></a>1.7 排序查询</h3><p>排序在日常开发中是非常常见的一个操作，有升序排序，也有降序排序。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表  </span><br><span class="line">from   表名   </span><br><span class="line">[where  条件列表] </span><br><span class="line">[group by  分组字段 ] </span><br><span class="line">order  by  字段1  排序方式1 , 字段2  排序方式2 … ;</span><br></pre></td></tr></table></figure><ul><li><p>排序方式：</p><ul><li><p>ASC ：升序（默认值）</p></li><li><p>DESC：降序</p></li></ul></li></ul><p>案例1：根据入职时间, 对员工进行升序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by entrydate ASC; -- 按照entrydate字段下的数据进行升序排序</span><br><span class="line"></span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by  entrydate; -- 默认就是ASC（升序）</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206175720337.png"></p><blockquote><p>注意事项：如果是升序, 可以不指定排序方式ASC </p></blockquote><p>案例2：根据入职时间，对员工进行降序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by entrydate DESC; -- 按照entrydate字段下的数据进行降序排序</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206180358367.png"></p><p>案例3：根据入职时间对公司的员工进行升序排序，入职时间相同，再按照更新时间进行降序排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">order by entrydate ASC , update_time DESC;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206180824583.png"></p><blockquote><p>注意事项：如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序 </p></blockquote><h3 id="1-8-分页查询"><a href="#1-8-分页查询" class="headerlink" title="1.8 分页查询"></a>1.8 分页查询</h3><p>分页操作在业务系统开发时，也是非常常见的一个功能，日常我们在网站中看到的各种各样的分页条，后台也都需要借助于数据库的分页操作。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206183310586.png"></p><p>分页查询语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  字段列表  <span class="keyword">from</span>   表名  limit  起始索引, 查询记录数 ;</span><br></pre></td></tr></table></figure><p>案例1：从起始索引0开始查询员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 0 , 5; -- 从索引0开始，向后取5条记录</span><br></pre></td></tr></table></figure><p><img src="/assets/image-20221206185257834.png"></p><p>案例2：查询 第1页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 5; -- 如果查询的是第1页数据，起始索引可以省略，直接简写为：limit 条数</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206184957410.png"></p><p>案例3：查询 第2页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 5 , 5; -- 从索引5开始，向后取5条记录</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206184602569.png"></p><p>案例4：查询 第3页 员工数据, 每页展示5条记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">limit 10 , 5; -- 从索引10开始，向后取5条记录</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206184414356.png"></p><blockquote><p>注意事项:</p><ol><li><p>起始索引从0开始。        计算公式 ：   起始索引 &#x3D; （查询页码 - 1）* 每页显示记录数</p></li><li><p>分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT</p></li><li><p>如果查询的是第一页数据，起始索引可以省略，直接简写为 limit  条数</p></li></ol></blockquote><h3 id="1-9-案例"><a href="#1-9-案例" class="headerlink" title="1.9 案例"></a>1.9 案例</h3><p>DQL的基本语法我们学习结束了，接下来我们就运用所掌握的DQL语句的语法来完成两个案例。</p><h4 id="1-9-1-案例一"><a href="#1-9-1-案例一" class="headerlink" title="1.9.1 案例一"></a>1.9.1 案例一</h4><p>案例：根据需求完成员工管理的条件分页查询</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206212240773.png"></p><blockquote><p>分析：根据输入的条件，查询第1页数据</p><ol><li><p>在员工管理的列表上方有一些查询条件：员工姓名、员工性别，员工入职时间(开始时间~结束时间)</p><ul><li>姓名：张</li><li>性别：男</li><li>入职时间：2000-01-01  ~  2015-12-31</li></ul></li><li><p>除了查询条件外，在列表的下面还有一个分页条，这就涉及到了分页查询</p><ul><li>查询第1页数据（每页显示10条数据）</li></ul></li><li><p>基于查询的结果，按照修改时间进行降序排序</p></li></ol><p>结论：条件查询 + 分页查询 + 排序查询</p></blockquote><p>SQL语句代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 根据输入条件查询第1页数据（每页展示10条记录）</span><br><span class="line">-- 输入条件：</span><br><span class="line">   -- 姓名：张 （模糊查询）</span><br><span class="line">   -- 性别：男</span><br><span class="line">   -- 入职时间：2000-01-01 ~ 2015-12-31</span><br><span class="line">-- 分页： 0 , 10</span><br><span class="line">-- 排序： 修改时间  DESC</span><br><span class="line">select id, username, password, name, gender, image, job, entrydate, create_time, update_time</span><br><span class="line">from tb_emp</span><br><span class="line">where name like &#x27;张%&#x27; and gender = 1 and entrydate between &#x27;2000-01-01&#x27; and &#x27;2015-12-31&#x27;</span><br><span class="line">order by update_time desc</span><br><span class="line">limit 0 , 10;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206213235786.png"></p><h4 id="1-9-2-案例二"><a href="#1-9-2-案例二" class="headerlink" title="1.9.2 案例二"></a>1.9.2 案例二</h4><p>案例：根据需求完成员工信息的统计</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206210536118.png"></p><blockquote><p>分析：以上信息统计在开发中也叫图形报表(将统计好的数据以可视化的形式展示出来)</p><ul><li>员工性别统计：以饼状图的形式展示出企业男性员人数和女性员工人数<ul><li>只要查询出男性员工和女性员工各自有多少人就可以了</li></ul></li><li>员工职位统计：以柱状图的形式展示各职位的在岗人数<ul><li>只要查询出各个职位有多少人就可以了</li></ul></li></ul></blockquote><p>员工性别统计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- if(条件表达式, true取值 , false取值)</span><br><span class="line">select if(gender=1,&#x27;男性员工&#x27;,&#x27;女性员工&#x27;) AS 性别, count(*) AS 人数</span><br><span class="line">from tb_emp</span><br><span class="line">group by gender;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206220908397.png"></p><blockquote><p>if(表达式, tvalue, fvalue) ：当表达式为true时，取值tvalue；当表达式为false时，取值fvalue</p></blockquote><p>员工职位统计：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- case 表达式 when 值1 then 结果1  when 值2  then  结果2 ...  else  result  end</span><br><span class="line">select (case job</span><br><span class="line">             when 1 then &#x27;班主任&#x27;</span><br><span class="line">             when 2 then &#x27;讲师&#x27;</span><br><span class="line">             when 3 then &#x27;学工主管&#x27;</span><br><span class="line">             when 4 then &#x27;教研主管&#x27;</span><br><span class="line">             else &#x27;未分配职位&#x27;</span><br><span class="line">        end) AS 职位 ,</span><br><span class="line">       count(*) AS 人数</span><br><span class="line">from tb_emp</span><br><span class="line">group by job;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206221718731.png"></p><blockquote><p>case   表达式    when   值1   then  结果1   [when 值2  then  结果2 …]     [else result]     end</p></blockquote><h2 id="2-多表设计"><a href="#2-多表设计" class="headerlink" title="2. 多表设计"></a>2. 多表设计</h2><p>关于单表的操作(单表的设计、单表的增删改查)我们就已经学习完了。接下来我们就要来学习多表的操作，首先来学习多表的设计。</p><p>项目开发中，在进行数据库表结构设计时，会根据业务需求及业务模块之间的关系，分析并设计表结构，由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本上分为三种：</p><ul><li><p>一对多(多对一)</p></li><li><p>多对多</p></li><li><p>一对一</p></li></ul><h3 id="2-1-一对多"><a href="#2-1-一对多" class="headerlink" title="2.1 一对多"></a>2.1 一对多</h3><h4 id="2-1-1-表设计"><a href="#2-1-1-表设计" class="headerlink" title="2.1.1 表设计"></a>2.1.1 表设计</h4><p>需求：根据页面原型及需求文档 ，完成部门及员工的表结构设计</p><ul><li>员工管理页面原型：（前面已完成tb_emp表结构设计）</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220831195520739.png"></p><ul><li>部门管理页面原型：</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220831195603106.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206224149094.png"></p><blockquote><p>经过上述分析，现已明确的部门表结构：</p><ul><li>业务字段 ： 部门名称</li><li>基础字段 ： id(主键)、创建时间、修改时间</li></ul></blockquote><p>部门表 - SQL语句： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 建议：创建新的数据库（多表设计存放在新数据库下）</span><br><span class="line">create database db03;</span><br><span class="line">use db03;</span><br><span class="line"></span><br><span class="line">-- 部门表</span><br><span class="line">create table tb_dept</span><br><span class="line">(</span><br><span class="line">    id int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name varchar(10) not null unique  comment &#x27;部门名称&#x27;,</span><br><span class="line">    create_time datetime not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;部门表&#x27;;</span><br></pre></td></tr></table></figure><p>部门表创建好之后，我们还需要再修改下员工表。为什么要修改员工表呢？是因为我们之前设计员工表(单表)的时候，并没有考虑员工的归属部门。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206224642902.png"></p><p>员工表：添加归属部门字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-- 员工表</span><br><span class="line">create table tb_emp</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    name        varchar(10)      not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">    image       varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管&#x27;,</span><br><span class="line">    entrydate   date comment &#x27;入职时间&#x27;,</span><br><span class="line">    </span><br><span class="line">    dept_id     int unsigned comment &#x27;部门ID&#x27;, -- 员工的归属部门</span><br><span class="line">    </span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br></pre></td></tr></table></figure><p>测试数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">-- 部门表测试数据</span><br><span class="line">insert into tb_dept (id, name, create_time, update_time) values</span><br><span class="line">(1,&#x27;学工部&#x27;,now(),now()),</span><br><span class="line">(2,&#x27;教研部&#x27;,now(),now()),</span><br><span class="line">(3,&#x27;咨询部&#x27;,now(),now()),</span><br><span class="line">(4,&#x27;就业部&#x27;,now(),now()),</span><br><span class="line">(5,&#x27;人事部&#x27;,now(),now());</span><br><span class="line"></span><br><span class="line">-- 员工表测试数据</span><br><span class="line">INSERT INTO tb_emp</span><br><span class="line">(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) VALUES</span><br><span class="line">(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),</span><br><span class="line">(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),</span><br><span class="line">(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),</span><br><span class="line">(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),</span><br><span class="line">(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),</span><br><span class="line">(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),</span><br><span class="line">(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),</span><br><span class="line">(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,1,&#x27;2007-02-01&#x27;,1,now(),now()),</span><br><span class="line">(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,1,&#x27;2008-08-18&#x27;,1,now(),now()),</span><br><span class="line">(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,2,&#x27;2012-11-01&#x27;,2,now(),now()),</span><br><span class="line">(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),</span><br><span class="line">(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),</span><br><span class="line">(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2010-01-01&#x27;,2,now(),now()),</span><br><span class="line">(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());</span><br></pre></td></tr></table></figure><p>员工表 - 部门表之间的关系：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206230156403.png"></p><blockquote><p><strong>一对多关系实现：在数据库表中多的一方，添加字段，来关联属于一这方的主键。</strong></p></blockquote><h4 id="2-1-2-外键约束"><a href="#2-1-2-外键约束" class="headerlink" title="2.1.2 外键约束"></a>2.1.2 外键约束</h4><p><strong>问题</strong></p><ul><li>表结构创建完毕后，我们看到两张表的数据分别为：</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220831201844375.png"> </p><p>现在员工表中有五个员工都归属于1号部门(学工部)，当删除了1号部门后，数据变为：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220831202111247.png"> </p><p>1号部门被删除了，但是依然还有5个员工是属于1号部门的。 此时：就出现数据的不完整、不一致了。 </p><p><strong>问题分析</strong></p><p>目前上述的两张表(员工表、部门表)，在数据库层面，并未建立关联，所以是无法保证数据的一致性和完整性的</p><p><strong>问题解决</strong></p><p>想解决上述的问题呢，我们就可以通过数据库中的 <strong>外键约束</strong> 来解决。</p><blockquote><p>外键约束：让两张表的数据建立连接，保证数据的一致性和完整性。  </p><p>对应的关键字：foreign key</p></blockquote><p>外键约束的语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建表时指定</span><br><span class="line">create table 表名(</span><br><span class="line">字段名    数据类型,</span><br><span class="line">...</span><br><span class="line">[constraint]   [外键名称]  foreign  key (外键字段名)   references   主表 (主表列名)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 建完表后，添加外键</span><br><span class="line">alter table  表名  add constraint  外键名称  foreign key(外键字段名) references 主表(主表列名);</span><br></pre></td></tr></table></figure><p>那接下来，我们就为员工表的dept_id 建立外键约束，来关联部门表的主键。</p><p>方式1：通过SQL语句操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 修改表： 添加外键约束</span><br><span class="line">alter table tb_emp  </span><br><span class="line">add  constraint  fk_dept_id  foreign key (dept_id)  references  tb_dept(id);</span><br></pre></td></tr></table></figure><p>方式2：图形化界面操作</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221206232750376.png"> </p><blockquote><p>当我们添加外键约束时，我们得保证当前数据库表中的数据是完整的。 所以，我们需要将之前删除掉的数据再添加回来。</p></blockquote><blockquote><p>当我们添加了外键之后，再删除ID为1的部门，就会发现，此时数据库报错了，不允许删除。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220831205523647.png"></p><p>外键约束（foreign key）：保证了数据的完整性和一致性。</p></blockquote><p><strong>物理外键和逻辑外键</strong></p><ul><li><p>物理外键</p><ul><li>概念：使用foreign key定义外键关联另外一张表。</li><li>缺点：<ul><li>影响增、删、改的效率（需要检查外键关系）。</li><li>仅用于单节点数据库，不适用与分布式、集群场景。</li><li>容易引发数据库的死锁问题，消耗性能。</li></ul></li></ul></li><li><p>逻辑外键</p><ul><li>概念：在业务层逻辑中，解决外键关联。</li><li>通过逻辑外键，就可以很方便的解决上述问题。</li></ul></li></ul><blockquote><p>**在现在的企业开发中，很少会使用物理外键，都是使用逻辑外键。 甚至在一些数据库开发规范中，会明确指出禁止使用物理外键 foreign key **</p></blockquote><h3 id="2-2-一对一"><a href="#2-2-一对一" class="headerlink" title="2.2 一对一"></a>2.2 一对一</h3><p>一对一关系表在实际开发中应用起来比较简单，通常是用来做单表的拆分，也就是将一张大表拆分成两张小表，将大表中的一些基础字段放在一张表当中，将其他的字段放在另外一张表当中，以此来提高数据的操作效率。</p><blockquote><p>一对一的应用场景： 用户表(基本信息+身份信息)</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207104508080.png"></p><ul><li>基本信息：用户的ID、姓名、性别、手机号、学历</li><li>身份信息：民族、生日、身份证号、身份证签发机关，身份证的有效期(开始时间、结束时间)</li></ul><p>如果在业务系统当中，对用户的基本信息查询频率特别的高，但是对于用户的身份信息查询频率很低，此时出于提高查询效率的考虑，我就可以将这张大表拆分成两张小表，第一张表存放的是用户的基本信息，而第二张表存放的就是用户的身份信息。他们两者之间一对一的关系，一个用户只能对应一个身份证，而一个身份证也只能关联一个用户。</p></blockquote><p>那么在数据库层面怎么去体现上述两者之间是一对一的关系呢？</p><p>其实一对一我们可以看成一种特殊的一对多。一对多我们是怎么设计表关系的？是不是在多的一方添加外键。同样我们也可以通过外键来体现一对一之间的关系，我们只需要在任意一方来添加一个外键就可以了。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207105632634.png"></p><blockquote><p>一对一 ：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)</p></blockquote><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">-- 用户基本信息表</span><br><span class="line">create table tb_user(</span><br><span class="line">    id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    name varchar(10) not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender tinyint unsigned not null comment &#x27;性别, 1 男  2 女&#x27;,</span><br><span class="line">    phone char(11) comment &#x27;手机号&#x27;,</span><br><span class="line">    degree varchar(10) comment &#x27;学历&#x27;</span><br><span class="line">) comment &#x27;用户基本信息表&#x27;;</span><br><span class="line">-- 测试数据</span><br><span class="line">insert into tb_user values (1,&#x27;白眉鹰王&#x27;,1,&#x27;18812340001&#x27;,&#x27;初中&#x27;),</span><br><span class="line">                        (2,&#x27;青翼蝠王&#x27;,1,&#x27;18812340002&#x27;,&#x27;大专&#x27;),</span><br><span class="line">                        (3,&#x27;金毛狮王&#x27;,1,&#x27;18812340003&#x27;,&#x27;初中&#x27;),</span><br><span class="line">                        (4,&#x27;紫衫龙王&#x27;,2,&#x27;18812340004&#x27;,&#x27;硕士&#x27;);</span><br><span class="line"></span><br><span class="line">-- 用户身份信息表</span><br><span class="line">create table tb_user_card(</span><br><span class="line">    id int unsigned  primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    nationality varchar(10) not null comment &#x27;民族&#x27;,</span><br><span class="line">    birthday date not null comment &#x27;生日&#x27;,</span><br><span class="line">    idcard char(18) not null comment &#x27;身份证号&#x27;,</span><br><span class="line">    issued varchar(20) not null comment &#x27;签发机关&#x27;,</span><br><span class="line">    expire_begin date not null comment &#x27;有效期限-开始&#x27;,</span><br><span class="line">    expire_end date comment &#x27;有效期限-结束&#x27;,</span><br><span class="line">    user_id int unsigned not null unique comment &#x27;用户ID&#x27;,</span><br><span class="line">    constraint fk_user_id foreign key (user_id) references tb_user(id)</span><br><span class="line">) comment &#x27;用户身份信息表&#x27;;</span><br><span class="line">-- 测试数据</span><br><span class="line">insert into tb_user_card values (1,&#x27;汉&#x27;,&#x27;1960-11-06&#x27;,&#x27;100000100000100001&#x27;,&#x27;朝阳区公安局&#x27;,&#x27;2000-06-10&#x27;,null,1),</span><br><span class="line">        (2,&#x27;汉&#x27;,&#x27;1971-11-06&#x27;,&#x27;100000100000100002&#x27;,&#x27;静安区公安局&#x27;,&#x27;2005-06-10&#x27;,&#x27;2025-06-10&#x27;,2),</span><br><span class="line">        (3,&#x27;汉&#x27;,&#x27;1963-11-06&#x27;,&#x27;100000100000100003&#x27;,&#x27;昌平区公安局&#x27;,&#x27;2006-06-10&#x27;,null,3),</span><br><span class="line">        (4,&#x27;回&#x27;,&#x27;1980-11-06&#x27;,&#x27;100000100000100004&#x27;,&#x27;海淀区公安局&#x27;,&#x27;2008-06-10&#x27;,&#x27;2028-06-10&#x27;,4);</span><br></pre></td></tr></table></figure><h3 id="2-3-多对多"><a href="#2-3-多对多" class="headerlink" title="2.3 多对多"></a>2.3 多对多</h3><p>多对多的关系在开发中属于也比较常见的。比如：学生和老师的关系，一个学生可以有多个授课老师，一个授课老师也可以有多个学生。在比如：学生和课程的关系，一个学生可以选修多门课程，一个课程也可以供多个学生选修。</p><p>案例：学生与课程的关系</p><ul><li><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p></li><li><p>实现关系：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207113341028.png"></p><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-- 学生表</span><br><span class="line">create table tb_student(</span><br><span class="line">    id int auto_increment primary key comment &#x27;主键ID&#x27;,</span><br><span class="line">    name varchar(10) comment &#x27;姓名&#x27;,</span><br><span class="line">    no varchar(10) comment &#x27;学号&#x27;</span><br><span class="line">) comment &#x27;学生表&#x27;;</span><br><span class="line">-- 学生表测试数据</span><br><span class="line">insert into tb_student(name, no) values (&#x27;黛绮丝&#x27;, &#x27;2000100101&#x27;),(&#x27;谢逊&#x27;, &#x27;2000100102&#x27;),(&#x27;殷天正&#x27;, &#x27;2000100103&#x27;),(&#x27;韦一笑&#x27;, &#x27;2000100104&#x27;);</span><br><span class="line"></span><br><span class="line">-- 课程表</span><br><span class="line">create table tb_course(</span><br><span class="line">   id int auto_increment primary key comment &#x27;主键ID&#x27;,</span><br><span class="line">   name varchar(10) comment &#x27;课程名称&#x27;</span><br><span class="line">) comment &#x27;课程表&#x27;;</span><br><span class="line">-- 课程表测试数据</span><br><span class="line">insert into tb_course (name) values (&#x27;Java&#x27;), (&#x27;PHP&#x27;), (&#x27;MySQL&#x27;) , (&#x27;Hadoop&#x27;);</span><br><span class="line"></span><br><span class="line">-- 学生课程表（中间表）</span><br><span class="line">create table tb_student_course(</span><br><span class="line">   id int auto_increment comment &#x27;主键&#x27; primary key,</span><br><span class="line">   student_id int not null comment &#x27;学生ID&#x27;,</span><br><span class="line">   course_id  int not null comment &#x27;课程ID&#x27;,</span><br><span class="line">   constraint fk_courseid foreign key (course_id) references tb_course (id),</span><br><span class="line">   constraint fk_studentid foreign key (student_id) references tb_student (id)</span><br><span class="line">)comment &#x27;学生课程中间表&#x27;;</span><br><span class="line">-- 学生课程表测试数据</span><br><span class="line">insert into tb_student_course(student_id, course_id) values (1,1),(1,2),(1,3),(2,2),(2,3),(3,4);</span><br></pre></td></tr></table></figure><h3 id="2-4-案例"><a href="#2-4-案例" class="headerlink" title="2.4 案例"></a>2.4 案例</h3><p>下面通过一个综合案例加深对于多表关系的理解，并掌握多表设计的流程。</p><p><strong>需求</strong></p><ul><li>根据参考资料中提供的《<a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">苍穹外卖</a><a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">_</a><a href="https://app.mockplus.cn/app/share-e928208474edd220b75e9faff1380e4ashare-VaH7dpoIaqRr/preview/BlJ_BHC42AEaa/tKNB7Tamh14B54?allowShare=1&cps=expand&ha=1">管理后台</a>》页面原型，设计分类管理、菜品管理、套餐管理模块的表结构。</li></ul><p><strong>步骤</strong></p><ol><li><p>阅读页面原型及需求文档，分析各个模块涉及到的表结构，及表结构之间的关系。</p></li><li><p>根据页面原型及需求文档，分析各个表结构中具体的字段及约束。</p></li></ol><p><strong>分析</strong></p><ul><li>页面原型-分类管理</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207114241260.png"></p><blockquote><p>分类的信息：分类名称、分类类型[菜品&#x2F;套餐]、分类排序、分类状态[禁用&#x2F;启用]、分类的操作时间(修改时间)。</p></blockquote><ul><li>页面原型-菜品管理</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207114300057.png"></p><blockquote><p>菜品的信息：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态、菜品的操作时间(修改时间)。</p></blockquote><blockquote><p>思考：分类与菜品之间是什么关系？</p><ul><li>思考逻辑：一个分类下可以有多个菜品吗？反过来再想一想，一个菜品会对应多个分类吗？</li></ul><p>答案：一对多关系。一个分类下会有多个菜品，而一个菜品只能归属一个分类。</p><p>设计表原则：在多的一方，添加字段，关联属于一这方的主键。</p></blockquote><ul><li>页面原型-套餐管理</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207114327139.png"> </p><blockquote><p>套餐的信息：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态、套餐的操作时间。</p></blockquote><blockquote><p>思考：套餐与菜品之间是什么关系？</p><ul><li>思考逻辑：一个套餐下可以有多个菜品吗？反过来再想一想，一个菜品可以出现在多个套餐中吗？</li></ul><p>答案：多对多关系。一个套餐下会有多个菜品，而一个菜品也可以出现在多个套餐中。</p><p>设计表原则：创建第三张中间表，建立两个字段分别关联菜品表的主键和套餐表的主键。</p></blockquote><p>分析页面原型及需求文档后，我们获得：</p><ul><li>分类表<ul><li>业务字段：分类名称、分类类型、分类排序、分类状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li><li>菜品表<ul><li>业务字段：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li><li>套餐表<ul><li>业务字段：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul></li></ul><p>表结构之间的关系：</p><ul><li>分类表 - 菜品表 ： 一对多<ul><li>在菜品表中添加字段(菜品分类)，关联分类表</li></ul></li><li>菜品表 - 套餐表 ： 多对多<ul><li>创建第三张中间表(套餐菜品关联表)，在中间表上添加两个字段(菜品id、套餐id)，分别关联菜品表和分类表</li></ul></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220831211756004.png"></p><p><strong>表结构</strong></p><p>分类表：category</p><ul><li>业务字段：分类名称、分类类型、分类排序、分类状态</li><li>基础字段：id(主键)、创建时间、修改时间</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207143907853.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 分类表</span><br><span class="line">create table category</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(20)      not null unique comment &#x27;分类名称&#x27;,</span><br><span class="line">    type        tinyint unsigned not null comment &#x27;类型 1 菜品分类 2 套餐分类&#x27;,</span><br><span class="line">    sort        tinyint unsigned not null comment &#x27;顺序&#x27;,</span><br><span class="line">    status      tinyint unsigned not null default 0 comment &#x27;状态 0 禁用，1 启用&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;更新时间&#x27;</span><br><span class="line">) comment &#x27;菜品及套餐分类&#x27;;</span><br></pre></td></tr></table></figure><p>菜品表：dish</p><ul><li>业务字段：菜品名称、菜品图片、菜品分类、菜品售价、菜品售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207144323100.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 菜品表</span><br><span class="line">create table dish</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(20)      not null unique comment &#x27;菜品名称&#x27;,</span><br><span class="line">    category_id int unsigned     not null comment &#x27;菜品分类ID&#x27;,   -- 逻辑外键</span><br><span class="line">    price       decimal(8, 2)    not null comment &#x27;菜品价格&#x27;,</span><br><span class="line">    image       varchar(300)     not null comment &#x27;菜品图片&#x27;,</span><br><span class="line">    description varchar(200) comment &#x27;描述信息&#x27;,</span><br><span class="line">    status      tinyint unsigned not null default 0 comment &#x27;状态, 0 停售 1 起售&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;更新时间&#x27;</span><br><span class="line">) comment &#x27;菜品&#x27;;</span><br></pre></td></tr></table></figure><p>套餐表：setmeal</p><ul><li>业务字段：套餐名称、套餐图片、套餐分类、套餐价格、套餐售卖状态</li><li>基础字段：id(主键)、分类的创建时间、分类的修改时间</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207144723621.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 套餐表</span><br><span class="line">create table setmeal</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(20)      not null unique comment &#x27;套餐名称&#x27;,</span><br><span class="line">    category_id int unsigned     not null comment &#x27;分类id&#x27;,       -- 逻辑外键</span><br><span class="line">    price       decimal(8, 2)    not null comment &#x27;套餐价格&#x27;,</span><br><span class="line">    image       varchar(300)     not null comment &#x27;图片&#x27;,</span><br><span class="line">    description varchar(200) comment &#x27;描述信息&#x27;,</span><br><span class="line">    status      tinyint unsigned not null default 0 comment &#x27;状态 0:停用 1:启用&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;更新时间&#x27;</span><br><span class="line">) comment &#x27;套餐&#x27;;</span><br></pre></td></tr></table></figure><p>套餐菜品关联表：setmeal_dish</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207145016440.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 套餐菜品关联表</span><br><span class="line">create table setmeal_dish</span><br><span class="line">(</span><br><span class="line">    id         int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    setmeal_id int unsigned     not null comment &#x27;套餐id &#x27;,    -- 逻辑外键</span><br><span class="line">    dish_id    int unsigned     not null comment &#x27;菜品id&#x27;,     -- 逻辑外键</span><br><span class="line">    copies     tinyint unsigned not null comment &#x27;份数&#x27;</span><br><span class="line">) comment &#x27;套餐菜品关联表&#x27;;</span><br></pre></td></tr></table></figure><h1 id="二-数据库开发2-MySQL"><a href="#二-数据库开发2-MySQL" class="headerlink" title="二.数据库开发2-MySQL"></a>二.数据库开发2-MySQL</h1><h1 id="1-多表查询"><a href="#1-多表查询" class="headerlink" title="1. 多表查询"></a>1. 多表查询</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><h3 id="1-1-1-数据准备"><a href="#1-1-1-数据准备" class="headerlink" title="1.1.1 数据准备"></a>1.1.1 数据准备</h3><p>SQL脚本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#建议：创建新的数据库</span><br><span class="line">create database db04;</span><br><span class="line">use db04;</span><br><span class="line"></span><br><span class="line">-- 部门表</span><br><span class="line">create table tb_dept</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;主键ID&#x27;,</span><br><span class="line">    name        varchar(10) not null unique comment &#x27;部门名称&#x27;,</span><br><span class="line">    create_time datetime    not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime    not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;部门表&#x27;;</span><br><span class="line">-- 部门表测试</span><br><span class="line">insert into tb_dept (id, name, create_time, update_time)</span><br><span class="line">values (1, &#x27;学工部&#x27;, now(), now()),</span><br><span class="line">       (2, &#x27;教研部&#x27;, now(), now()),</span><br><span class="line">       (3, &#x27;咨询部&#x27;, now(), now()),</span><br><span class="line">       (4, &#x27;就业部&#x27;, now(), now()),</span><br><span class="line">       (5, &#x27;人事部&#x27;, now(), now());</span><br><span class="line"></span><br><span class="line">-- 员工表</span><br><span class="line">create table tb_emp</span><br><span class="line">(</span><br><span class="line">    id          int unsigned primary key auto_increment comment &#x27;ID&#x27;,</span><br><span class="line">    username    varchar(20)      not null unique comment &#x27;用户名&#x27;,</span><br><span class="line">    password    varchar(32) default &#x27;123456&#x27; comment &#x27;密码&#x27;,</span><br><span class="line">    name        varchar(10)      not null comment &#x27;姓名&#x27;,</span><br><span class="line">    gender      tinyint unsigned not null comment &#x27;性别, 说明: 1 男, 2 女&#x27;,</span><br><span class="line">    image       varchar(300) comment &#x27;图像&#x27;,</span><br><span class="line">    job         tinyint unsigned comment &#x27;职位, 说明: 1 班主任,2 讲师, 3 学工主管, 4 教研主管, 5 咨询师&#x27;,</span><br><span class="line">    entrydate   date comment &#x27;入职时间&#x27;,</span><br><span class="line">    dept_id     int unsigned comment &#x27;部门ID&#x27;,</span><br><span class="line">    create_time datetime         not null comment &#x27;创建时间&#x27;,</span><br><span class="line">    update_time datetime         not null comment &#x27;修改时间&#x27;</span><br><span class="line">) comment &#x27;员工表&#x27;;</span><br><span class="line">-- 员工表测试数据</span><br><span class="line">INSERT INTO tb_emp(id, username, password, name, gender, image, job, entrydate,dept_id, create_time, update_time) </span><br><span class="line">VALUES </span><br><span class="line">(1,&#x27;jinyong&#x27;,&#x27;123456&#x27;,&#x27;金庸&#x27;,1,&#x27;1.jpg&#x27;,4,&#x27;2000-01-01&#x27;,2,now(),now()),</span><br><span class="line">(2,&#x27;zhangwuji&#x27;,&#x27;123456&#x27;,&#x27;张无忌&#x27;,1,&#x27;2.jpg&#x27;,2,&#x27;2015-01-01&#x27;,2,now(),now()),</span><br><span class="line">(3,&#x27;yangxiao&#x27;,&#x27;123456&#x27;,&#x27;杨逍&#x27;,1,&#x27;3.jpg&#x27;,2,&#x27;2008-05-01&#x27;,2,now(),now()),</span><br><span class="line">(4,&#x27;weiyixiao&#x27;,&#x27;123456&#x27;,&#x27;韦一笑&#x27;,1,&#x27;4.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(5,&#x27;changyuchun&#x27;,&#x27;123456&#x27;,&#x27;常遇春&#x27;,1,&#x27;5.jpg&#x27;,2,&#x27;2012-12-05&#x27;,2,now(),now()),</span><br><span class="line">(6,&#x27;xiaozhao&#x27;,&#x27;123456&#x27;,&#x27;小昭&#x27;,2,&#x27;6.jpg&#x27;,3,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(7,&#x27;jixiaofu&#x27;,&#x27;123456&#x27;,&#x27;纪晓芙&#x27;,2,&#x27;7.jpg&#x27;,1,&#x27;2005-08-01&#x27;,1,now(),now()),</span><br><span class="line">(8,&#x27;zhouzhiruo&#x27;,&#x27;123456&#x27;,&#x27;周芷若&#x27;,2,&#x27;8.jpg&#x27;,1,&#x27;2014-11-09&#x27;,1,now(),now()),</span><br><span class="line">(9,&#x27;dingminjun&#x27;,&#x27;123456&#x27;,&#x27;丁敏君&#x27;,2,&#x27;9.jpg&#x27;,1,&#x27;2011-03-11&#x27;,1,now(),now()),</span><br><span class="line">(10,&#x27;zhaomin&#x27;,&#x27;123456&#x27;,&#x27;赵敏&#x27;,2,&#x27;10.jpg&#x27;,1,&#x27;2013-09-05&#x27;,1,now(),now()),</span><br><span class="line">(11,&#x27;luzhangke&#x27;,&#x27;123456&#x27;,&#x27;鹿杖客&#x27;,1,&#x27;11.jpg&#x27;,5,&#x27;2007-02-01&#x27;,3,now(),now()),</span><br><span class="line">(12,&#x27;hebiweng&#x27;,&#x27;123456&#x27;,&#x27;鹤笔翁&#x27;,1,&#x27;12.jpg&#x27;,5,&#x27;2008-08-18&#x27;,3,now(),now()),</span><br><span class="line">(13,&#x27;fangdongbai&#x27;,&#x27;123456&#x27;,&#x27;方东白&#x27;,1,&#x27;13.jpg&#x27;,5,&#x27;2012-11-01&#x27;,3,now(),now()),</span><br><span class="line">(14,&#x27;zhangsanfeng&#x27;,&#x27;123456&#x27;,&#x27;张三丰&#x27;,1,&#x27;14.jpg&#x27;,2,&#x27;2002-08-01&#x27;,2,now(),now()),</span><br><span class="line">(15,&#x27;yulianzhou&#x27;,&#x27;123456&#x27;,&#x27;俞莲舟&#x27;,1,&#x27;15.jpg&#x27;,2,&#x27;2011-05-01&#x27;,2,now(),now()),</span><br><span class="line">(16,&#x27;songyuanqiao&#x27;,&#x27;123456&#x27;,&#x27;宋远桥&#x27;,1,&#x27;16.jpg&#x27;,2,&#x27;2007-01-01&#x27;,2,now(),now()),</span><br><span class="line">(17,&#x27;chenyouliang&#x27;,&#x27;123456&#x27;,&#x27;陈友谅&#x27;,1,&#x27;17.jpg&#x27;,NULL,&#x27;2015-03-21&#x27;,NULL,now(),now());</span><br></pre></td></tr></table></figure><h3 id="1-1-2-介绍"><a href="#1-1-2-介绍" class="headerlink" title="1.1.2 介绍"></a>1.1.2 介绍</h3><p>多表查询：查询时从多张表中获取所需数据</p><blockquote><p>单表查询的SQL语句：select  字段列表  from  表名;</p><p>那么要执行多表查询，只需要使用逗号分隔多张表即可，如： select   字段列表  from  表1, 表2;</p></blockquote><p>查询用户表和部门表中的数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from  tb_emp , tb_dept;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901093654673.png">  </p><p>此时,我们看到查询结果中包含了大量的结果集，总共85条记录，而这其实就是员工表所有的记录(17行)与部门表所有记录(5行)的所有组合情况，这种现象称之为笛卡尔积。</p><p>笛卡尔积：笛卡尔乘积是指在数学中，两个集合(A集合和B集合)的所有组合情况。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207155509696.png"></p><blockquote><p>在多表查询时，需要消除无效的笛卡尔积，只保留表关联部分的数据</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220901093756992.png"></p><p>在SQL语句中，如何去除无效的笛卡尔积呢？只需要给多表查询加上连接查询的条件即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tb_emp , tb_dept where tb_emp.dept_id = tb_dept.id ;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207164518904.png"></p><blockquote><p>由于id为17的员工，没有dept_id字段值，所以在多表查询时，根据连接查询的条件并没有查询到。</p></blockquote><h3 id="1-1-3-分类"><a href="#1-1-3-分类" class="headerlink" title="1.1.3 分类"></a>1.1.3 分类</h3><p>多表查询可以分为：</p><ol><li><p>连接查询</p><ul><li>内连接：相当于查询A、B交集部分数据</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207165446062.png"> </p></li><li><p>外连接</p><ul><li><p>左外连接：查询左表所有数据(包括两张表交集部分数据)</p></li><li><p>右外连接：查询右表所有数据(包括两张表交集部分数据)</p></li></ul></li><li><p>子查询</p></li></ol><h2 id="1-2-内连接"><a href="#1-2-内连接" class="headerlink" title="1.2 内连接"></a>1.2 内连接</h2><p>内连接查询：查询两表或多表中交集部分数据。</p><p>内连接从语法上可以分为：</p><ul><li><p>隐式内连接</p></li><li><p>显式内连接</p></li></ul><p>隐式内连接语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1 , 表2   where  条件 ... ;</span><br></pre></td></tr></table></figure><p>显式内连接语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1  [ inner ]  join 表2  on  连接条件 ... ;</span><br></pre></td></tr></table></figure><p>案例：查询员工的姓名及所属的部门名称</p><ul><li>隐式内连接实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select tb_emp.name , tb_dept.name -- 分别查询两张表中的数据</span><br><span class="line">from tb_emp , tb_dept -- 关联两张表</span><br><span class="line">where tb_emp.dept_id = tb_dept.id; -- 消除笛卡尔积</span><br></pre></td></tr></table></figure><ul><li>显式内连接实现</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select tb_emp.name , tb_dept.name</span><br><span class="line">from tb_emp inner join tb_dept</span><br><span class="line">on tb_emp.dept_id = tb_dept.id;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207173435289.png"></p><p>多表查询时给表起别名：</p><ul><li><p>tableA  as  别名1  ,  tableB  as  别名2 ;</p></li><li><p>tableA  别名1  ,  tableB  别名2 ;</p></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207174234522.png"></p><p>使用了别名的多表查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select emp.name , dept.name</span><br><span class="line">from tb_emp emp inner join tb_dept dept</span><br><span class="line">on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项:</p><p>一旦为表起了别名，就不能再使用表名来指定对应的字段了，此时只能够使用别名来指定字段。</p></blockquote><h2 id="1-3-外连接"><a href="#1-3-外连接" class="headerlink" title="1.3 外连接"></a>1.3 外连接</h2><p>外连接分为两种：左外连接 和 右外连接。</p><p>左外连接语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1  left  [ outer ]  join 表2  on  连接条件 ... ;</span><br></pre></td></tr></table></figure><blockquote><p>左外连接相当于查询表1(左表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>右外连接语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  字段列表   from   表1  right  [ outer ]  join 表2  on  连接条件 ... ;</span><br></pre></td></tr></table></figure><blockquote><p>右外连接相当于查询表2(右表)的所有数据，当然也包含表1和表2交集部分的数据。</p></blockquote><p>案例：查询员工表中所有员工的姓名, 和对应的部门名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 左外连接：以left join关键字左边的表为主表，查询主表中所有数据，以及和主表匹配的右边表中的数据</span><br><span class="line">select emp.name , dept.name</span><br><span class="line">from tb_emp AS emp left join tb_dept AS dept </span><br><span class="line">     on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207181204792.png"></p><p>案例：查询部门表中所有部门的名称, 和对应的员工名称 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-- 右外连接</span><br><span class="line">select dept.name , emp.name</span><br><span class="line">from tb_emp AS emp right join  tb_dept AS dept</span><br><span class="line">     on emp.dept_id = dept.id;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207181048208.png"></p><blockquote><p>注意事项：</p><p>左外连接和右外连接是可以相互替换的，只需要调整连接查询时SQL语句中表的先后顺序就可以了。而我们在日常开发使用时，更偏向于左外连接。</p></blockquote><h2 id="1-4-子查询"><a href="#1-4-子查询" class="headerlink" title="1.4 子查询"></a>1.4 子查询</h2><h3 id="1-4-1-介绍"><a href="#1-4-1-介绍" class="headerlink" title="1.4.1 介绍"></a>1.4.1 介绍</h3><p>SQL语句中嵌套select语句，称为嵌套查询，又称子查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span>  <span class="keyword">FROM</span>   t1   <span class="keyword">WHERE</span>  column1 <span class="operator">=</span>  ( <span class="keyword">SELECT</span>  column1  <span class="keyword">FROM</span>  t2 ... );</span><br></pre></td></tr></table></figure><blockquote><p>子查询外部的语句可以是insert &#x2F; update &#x2F; delete &#x2F; select 的任何一个，最常见的是 select。</p></blockquote><p>根据子查询结果的不同分为：</p><ol><li><p>标量子查询（子查询结果为单个值[一行一列]）</p></li><li><p>列子查询（子查询结果为一列，但可以是多行）</p></li><li><p>行子查询（子查询结果为一行，但可以是多列）</p></li><li><p>表子查询（子查询结果为多行多列[相当于子查询结果是一张表]）</p></li></ol><p>子查询可以书写的位置：</p><ol><li>where之后</li><li>from之后</li><li>select之后</li></ol><h3 id="1-4-2-标量子查询"><a href="#1-4-2-标量子查询" class="headerlink" title="1.4.2 标量子查询"></a>1.4.2 标量子查询</h3><p>子查询返回的结果是单个值(数字、字符串、日期等)，最简单的形式，这种子查询称为标量子查询。</p><p>常用的操作符： &#x3D;   &lt;&gt;   &gt;    &gt;&#x3D;    &lt;   &lt;&#x3D;   </p><p>案例1：查询”教研部”的所有员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 “教研部” 部门ID</li><li>根据 “教研部” 部门ID，查询员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询&quot;教研部&quot;部门ID</span><br><span class="line">select id from tb_dept where name = &#x27;教研部&#x27;;    #查询结果：2</span><br><span class="line">-- 2.根据&quot;教研部&quot;部门ID, 查询员工信息</span><br><span class="line">select * from tb_emp where dept_id = 2;</span><br><span class="line"></span><br><span class="line">-- 合并出上两条SQL语句</span><br><span class="line">select * from tb_emp where dept_id = (select id from tb_dept where name = &#x27;教研部&#x27;);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207202215946.png"></p><p>案例2：查询在 “方东白” 入职之后的员工信息</p><blockquote><p>可以将需求分解为两步：</p><ol><li>查询 方东白 的入职日期</li><li>查询 指定入职日期之后入职的员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询&quot;方东白&quot;的入职日期</span><br><span class="line">select entrydate from tb_emp where name = &#x27;方东白&#x27;;     #查询结果：2012-11-01</span><br><span class="line">-- 2.查询指定入职日期之后入职的员工信息</span><br><span class="line">select * from tb_emp where entrydate &gt; &#x27;2012-11-01&#x27;;</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from tb_emp where entrydate &gt; (select entrydate from tb_emp where name = &#x27;方东白&#x27;);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207203000445.png"></p><h3 id="1-4-3-列子查询"><a href="#1-4-3-列子查询" class="headerlink" title="1.4.3 列子查询"></a>1.4.3 列子查询</h3><p>子查询返回的结果是一列(可以是多行)，这种子查询称为列子查询。</p><p>常用的操作符：</p><table><thead><tr><th><strong>操作符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>IN</td><td>在指定的集合范围之内，多选一</td></tr><tr><td>NOT IN</td><td>不在指定的集合范围之内</td></tr></tbody></table><p>案例：查询”教研部”和”咨询部”的所有员工信息</p><blockquote><p>分解为以下两步：</p><ol><li>查询 “销售部” 和 “市场部” 的部门ID</li><li>根据部门ID, 查询员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.查询&quot;销售部&quot;和&quot;市场部&quot;的部门ID</span><br><span class="line">select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;;    #查询结果：3,2</span><br><span class="line">-- 2.根据部门ID, 查询员工信息</span><br><span class="line">select * from tb_emp where dept_id in (3,2);</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from tb_emp where dept_id in (select id from tb_dept where name = &#x27;教研部&#x27; or name = &#x27;咨询部&#x27;);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207203620472.png"></p><h3 id="1-4-4-行子查询"><a href="#1-4-4-行子查询" class="headerlink" title="1.4.4 行子查询"></a>1.4.4 行子查询</h3><p>子查询返回的结果是一行(可以是多列)，这种子查询称为行子查询。</p><p>常用的操作符：&#x3D; 、&lt;&gt; 、IN 、NOT IN</p><p>案例：查询与”韦一笑”的入职日期及职位都相同的员工信息 </p><blockquote><p>可以拆解为两步进行： </p><ol><li>查询 “韦一笑” 的入职日期 及 职位</li><li>查询与”韦一笑”的入职日期及职位相同的员工信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 查询&quot;韦一笑&quot;的入职日期 及 职位</span><br><span class="line">select entrydate , job from tb_emp where name = &#x27;韦一笑&#x27;;  #查询结果： 2007-01-01 , 2</span><br><span class="line">-- 查询与&quot;韦一笑&quot;的入职日期及职位相同的员工信息</span><br><span class="line">select * from tb_emp where (entrydate,job) = (&#x27;2007-01-01&#x27;,2);</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from tb_emp where (entrydate,job) = (select entrydate , job from tb_emp where name = &#x27;韦一笑&#x27;);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221207204452202.png"></p><h3 id="1-4-5-表子查询"><a href="#1-4-5-表子查询" class="headerlink" title="1.4.5 表子查询"></a>1.4.5 表子查询</h3><p>子查询返回的结果是多行多列，常作为临时表，这种子查询称为表子查询。</p><p>案例：查询入职日期是 “2006-01-01” 之后的员工信息 , 及其部门信息</p><blockquote><p>分解为两步执行：</p><ol><li>查询入职日期是 “2006-01-01” 之后的员工信息</li><li>基于查询到的员工信息，在查询对应的部门信息</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;;</span><br><span class="line"></span><br><span class="line">select e.*, d.* from (select * from emp where entrydate &gt; &#x27;2006-01-01&#x27;) e left join dept d on e.dept_id = d.id ;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208142154263.png"></p><h2 id="1-5-案例"><a href="#1-5-案例" class="headerlink" title="1.5 案例"></a>1.5 案例</h2><p>基于之前设计的多表案例的表结构，我们来完成今天的多表查询案例需求。</p><p><strong>准备环境</strong></p><p>将资料中准备好的多表查询的数据准备的SQL脚本导入数据库中。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208143318921.png"> </p><ul><li>分类表：category</li><li>菜品表：dish</li><li>套餐表：setmeal</li><li>套餐菜品关系表：setmeal_dish</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208143312292.png"> </p><p><strong>需求实现</strong></p><ol><li>查询价格低于 10元 的菜品的名称 、价格 及其 菜品的分类名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/*查询技巧：</span><br><span class="line">     明确1：查询需要用到哪些字段</span><br><span class="line">        菜品名称、菜品价格 、 菜品分类名</span><br><span class="line">     明确2：查询的字段分别归属于哪张表</span><br><span class="line">        菜品表：[菜品名称、菜品价格]</span><br><span class="line">        分类表：[分类名]</span><br><span class="line">     明确3：如查多表，建立表与表之间的关联</span><br><span class="line">        菜品表.caategory_id = 分类表.id</span><br><span class="line">     其他：（其他条件、其他要求）</span><br><span class="line">        价格 &lt; 10</span><br><span class="line">*/</span><br><span class="line">select d.name , d.price , c.name</span><br><span class="line">from dish AS d , category AS c</span><br><span class="line">where d.category_id = c.id</span><br><span class="line">      and d.price &lt; 10;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208145036602.png"></p><ol start="2"><li>查询所有价格在 10元(含)到50元(含)之间 且 状态为”起售”的菜品名称、价格及其分类名称 (即使菜品没有分类 , 也要将菜品查询出来)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select d.name , d.price, c.name</span><br><span class="line">from dish AS d left join category AS c on d.category_id = c.id</span><br><span class="line">where d.price between 10 and 50</span><br><span class="line">      and d.status = 1;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208145432077.png"></p><ol start="3"><li>查询每个分类下最贵的菜品, 展示出分类的名称、最贵的菜品的价格</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select c.name , max(d.price)</span><br><span class="line">from dish AS d , category AS c</span><br><span class="line">where d.category_id = c.id</span><br><span class="line">group by c.name;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208150016895.png"></p><ol start="4"><li>查询各个分类下 菜品状态为 “起售” , 并且 该分类下菜品总数量大于等于3 的 分类名称</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/*查询技巧：</span><br><span class="line">     明确1：查询需要用到哪些字段</span><br><span class="line">        分类名称、菜品总数量</span><br><span class="line">     明确2：查询用到的字段分别归属于哪张表</span><br><span class="line">        分类表：[分类名]</span><br><span class="line">        菜品表：[菜品状态]</span><br><span class="line">     明确3：如查多表，建立表与表之间的关联</span><br><span class="line">        菜品表.caategory_id = 分类表.id</span><br><span class="line">     其他：（其他条件、其他要求）</span><br><span class="line">        条件：菜品状态 = 1 (1表示起售)</span><br><span class="line">        分组：分类名</span><br><span class="line">        分组后条件： 总数量 &gt;= 3</span><br><span class="line">*/</span><br><span class="line">select c.name , count(*)</span><br><span class="line">from dish AS d , category AS c</span><br><span class="line">where d.category_id = c.id</span><br><span class="line">      and d.status = 1 -- 起售状态</span><br><span class="line">group by c.name  -- 按照分类名分组</span><br><span class="line">having count(*)&gt;=3; -- 各组后筛选菜品总数据&gt;=3</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208152107502.png"></p><ol start="5"><li>查询出 “商务套餐A” 中包含了哪些菜品 （展示出套餐名称、价格, 包含的菜品名称、价格、份数）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select s.name, s.price, d.name, d.price, sd.copies</span><br><span class="line">from setmeal AS s , setmeal_dish AS sd , dish AS d</span><br><span class="line">where s.id = sd.setmeal_id and sd.dish_id = d.id</span><br><span class="line">      and s.name=&#x27;商务套餐A&#x27;;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208152626138.png"></p><ol start="6"><li>查询出低于菜品平均价格的菜品信息 (展示出菜品名称、菜品价格)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- 1.计算菜品平均价格</span><br><span class="line">select avg(price) from dish;    -- 查询结果：37.736842</span><br><span class="line">-- 2.查询出低于菜品平均价格的菜品信息</span><br><span class="line">select * from dish where price &lt; 37.736842;</span><br><span class="line"></span><br><span class="line">-- 合并以上两条SQL语句</span><br><span class="line">select * from dish where price &lt; (select avg(price) from dish);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208153051333.png"></p><h1 id="2-事务"><a href="#2-事务" class="headerlink" title="2. 事务"></a>2. 事务</h1><p>场景：学工部整个部门解散了，该部门及部门下的员工都需要删除了。</p><ul><li><p>操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除学工部</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">-- 删除成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 删除失败（操作过程中出现错误：造成删除没有成功）</span></span><br></pre></td></tr></table></figure></li><li><p>问题：如果删除部门成功了，而删除该部门的员工时失败了，此时就造成了数据的不一致。</p></li></ul><p>​要解决上述的问题，就需要通过数据库中的事务来解决。</p><h2 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h2><p>在实际的业务开发中，有些业务操作要多次访问数据库。一个业务要发送多条SQL语句给数据库执行。需要将多次访问数据库的操作视为一个整体来执行，要么所有的SQL语句全部执行成功。如果其中有一条SQL语句失败，就进行事务的回滚，所有的SQL语句全部执行失败。</p><p>简而言之：事务是一组操作的集合，它是一个不可分割的工作单位。事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>事务作用：保证在一个事务中多次操作数据库表中数据时，要么全都成功,要么全都失败。</p><h2 id="2-2-操作"><a href="#2-2-操作" class="headerlink" title="2.2 操作"></a>2.2 操作</h2><p>MYSQL中有两种方式进行事务的操作：</p><ol><li>自动提交事务：即执行一条sql语句提交一次事务。（默认MySQL的事务是自动提交）</li><li>手动提交事务：先开启，再提交</li></ol><p>事务操作有关的SQL语句：</p><table><thead><tr><th>SQL语句</th><th>描述</th></tr></thead><tbody><tr><td>start transaction;  &#x2F;  begin ;</td><td>开启手动控制事务</td></tr><tr><td>commit;</td><td>提交事务</td></tr><tr><td>rollback;</td><td>回滚事务</td></tr></tbody></table><blockquote><p>手动提交事务使用步骤：</p><ul><li>第1种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  成功  &#x3D;&gt;  提交事务</li><li>第2种情况：开启事务  &#x3D;&gt;  执行SQL语句   &#x3D;&gt;  失败  &#x3D;&gt;  回滚事务</li></ul></blockquote><p>使用事务控制删除部门和删除该部门下的员工的操作：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 开启事务</span></span><br><span class="line"><span class="keyword">start</span> transaction ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_dept <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除学工部的员工</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_emp <span class="keyword">where</span> dept_id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><ul><li>上述的这组SQL语句，如果如果执行成功，则提交事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 提交事务 (成功时执行)</span></span><br><span class="line"><span class="keyword">commit</span> ;</span><br></pre></td></tr></table></figure><ul><li>上述的这组SQL语句，如果如果执行失败，则回滚事务</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 回滚事务 (出错时执行)</span></span><br><span class="line"><span class="keyword">rollback</span> ;</span><br></pre></td></tr></table></figure><h2 id="2-3-四大特性"><a href="#2-3-四大特性" class="headerlink" title="2.3 四大特性"></a>2.3 四大特性</h2><p>面试题：事务有哪些特性？</p><ul><li>原子性（Atomicity）：事务是不可分割的最小单元，要么全部成功，要么全部失败。</li><li>一致性（Consistency）：事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性（Isolation）：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性（Durability）：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><blockquote><p>事务的四大特性简称为：ACID</p></blockquote><ul><li><p><strong>原子性（Atomicity）</strong> ：原子性是指事务包装的一组sql是一个不可分割的工作单元，事务中的操作要么全部成功，要么全部失败。</p></li><li><p><strong>一致性（Consistency）</strong>：一个事务完成之后数据都必须处于一致性状态。</p></li></ul><p>​如果事务成功的完成，那么数据库的所有变化将生效。</p><p>​如果事务执行出现错误，那么数据库的所有变化将会被回滚(撤销)，返回到原始状态。</p><ul><li><strong>隔离性（Isolation）</strong>：多个用户并发的访问数据库时，一个用户的事务不能被其他用户的事务干扰，多个并发的事务之间要相互隔离。</li></ul><p>​一个事务的成功或者失败对于其他的事务是没有影响。</p><ul><li><strong>持久性（Durability）</strong>：一个事务一旦被提交或回滚，它对数据库的改变将是永久性的，哪怕数据库发生异常，重启之后数据亦然存在。</li></ul><h1 id="3-索引"><a href="#3-索引" class="headerlink" title="3. 索引"></a>3. 索引</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><p>索引(index)：是帮助数据库高效获取数据的数据结构 。</p><ul><li>简单来讲，就是使用索引可以提高查询的效率。</li></ul><p>测试没有使用索引的查询：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209115617429.png"></p><p>添加索引后查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 添加索引</span><br><span class="line">create index idx_sku_sn on tb_sku (sn);  #在添加索引时，也需要消耗时间</span><br><span class="line"></span><br><span class="line">-- 查询数据（使用了索引）</span><br><span class="line">select * from tb_sku where sn = &#x27;100000003145008&#x27;;</span><br></pre></td></tr></table></figure><p><img src="D:/桌面/xiamou-web/day08-MySQL-Mybatis入门/讲义/01-MySQL/assets/image-20221209120107543.png" alt="image-20221209120107543"></p><p>优点：</p><ol><li>提高数据查询的效率，降低数据库的IO成本。</li><li>通过索引列对数据进行排序，降低数据排序的成本，降低CPU消耗。</li></ol><p>缺点：</p><ol><li>索引会占用存储空间。</li><li>索引大大提高了查询效率，同时却也降低了insert、update、delete的效率。</li></ol><h2 id="3-2-结构"><a href="#3-2-结构" class="headerlink" title="3.2 结构"></a>3.2 结构</h2><p>MySQL数据库支持的索引结构有很多，如：Hash索引、B+Tree索引、Full-Text索引等。</p><p>我们平常所说的索引，如果没有特别指明，都是指默认的 B+Tree 结构组织的索引。</p><p>在没有了解B+Tree结构前，我们先回顾下之前所学习的树结构：</p><blockquote><p>二叉查找树：左边的子节点比父节点小，右边的子节点比父节点大</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208174135229.png"> </p><blockquote><p>当我们向二叉查找树保存数据时，是按照从大到小(或从小到大)的顺序保存的，此时就会形成一个单向链表，搜索性能会打折扣。</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208174859866.png"> </p><blockquote><p>可以选择平衡二叉树或者是红黑树来解决上述问题。（红黑树也是一棵平衡的二叉树）</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209100647867.png"></p><blockquote><p>但是在Mysql数据库中并没有使用二叉搜索数或二叉平衡数或红黑树来作为索引的结构。</p></blockquote><p>思考：采用二叉搜索树或者是红黑树来作为索引的结构有什么问题？</p><details>    <summary>答案</summary>    最大的问题就是在数据量大的情况下，树的层级比较深，会影响检索速度。因为不管是二叉搜索数还是红黑数，一个节点下面只能有两个子节点。此时在数据量大的情况下，就会造成数的高度比较高，树的高度一旦高了，检索速度就会降低。</details><blockquote><p>说明：如果数据结构是红黑树，那么查询1000万条数据，根据计算树的高度大概是23左右，这样确实比之前的方式快了很多，但是如果高并发访问，那么一个用户有可能需要23次磁盘IO，那么100万用户，那么会造成效率极其低下。所以为了减少红黑树的高度，那么就得增加树的宽度，就是不再像红黑树一样每个节点只能保存一个数据，可以引入另外一种数据结构，一个节点可以保存多个数据，这样宽度就会增加从而降低树的高度。这种数据结构例如BTree就满足。</p></blockquote><p>下面我们来看看B+Tree(多路平衡搜索树)结构中如何避免这个问题：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221208181315728.png"></p><p>B+Tree结构：</p><ul><li>每一个节点，可以存储多个key（有n个key，就有n个指针）</li><li>节点分为：叶子节点、非叶子节点<ul><li>叶子节点，就是最后一层子节点，所有的数据都存储在叶子节点上</li><li>非叶子节点，不是树结构最下面的节点，用于索引数据，存储的的是：key+指针</li></ul></li><li>为了提高范围查询效率，叶子节点形成了一个双向链表，便于数据的排序及区间范围查询</li></ul><blockquote><p><strong>拓展：</strong></p><p>非叶子节点都是由key+指针域组成的，一个key占8字节，一个指针占6字节，而一个节点总共容量是16KB，那么可以计算出一个节点可以存储的元素个数：16*1024字节 &#x2F; (8+6)&#x3D;1170个元素。</p><ul><li>查看mysql索引节点大小：show global status like ‘innodb_page_size’;    – 节点大小：16384</li></ul><p>当根节点中可以存储1170个元素，那么根据每个元素的地址值又会找到下面的子节点，每个子节点也会存储1170个元素，那么第二层即第二次IO的时候就会找到数据大概是：1170*1170&#x3D;135W。也就是说B+Tree数据结构中只需要经历两次磁盘IO就可以找到135W条数据。</p><p>对于第二层每个元素有指针，那么会找到第三层，第三层由key+数据组成，假设key+数据总大小是1KB，而每个节点一共能存储16KB，所以一个第三层一个节点大概可以存储16个元素(即16条记录)。那么结合第二层每个元素通过指针域找到第三层的节点，第二层一共是135W个元素，那么第三层总元素大小就是：135W*16结果就是2000W+的元素个数。</p><p>结合上述分析B+Tree有如下优点：</p><ul><li>千万条数据，B+Tree可以控制在小于等于3的高度</li><li>所有的数据都存储在叶子节点上，并且底层已经实现了按照索引进行排序，还可以支持范围查询，叶子节点是一个双向链表，支持从小到大或者从大到小查找</li></ul></blockquote><h2 id="3-3-语法"><a href="#3-3-语法" class="headerlink" title="3.3 语法"></a>3.3 语法</h2><p><strong>创建索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create  [ unique ]  index 索引名 on  表名 (字段名,... ) ;</span><br></pre></td></tr></table></figure><p>案例：为tb_emp表的name字段建立一个索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create index idx_emp_name on tb_emp(name);</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209105119159.png"></p><blockquote><p>在创建表时，如果添加了主键和唯一约束，就会默认创建：主键索引、唯一约束</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209105846211.png"></p></blockquote><p><strong>查看索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show  index  from  表名;</span><br></pre></td></tr></table></figure><p>案例：查询 tb_emp 表的索引信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show  index  from  tb_emp;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221209110317092.png"></p><p><strong>删除索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop  index  索引名  on  表名;</span><br></pre></td></tr></table></figure><p>案例：删除 tb_emp 表中name字段的索引</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop index idx_emp_name on tb_emp;</span><br></pre></td></tr></table></figure><blockquote><p>注意事项：</p><ul><li><p>主键字段，在建表时，会自动创建主键索引</p></li><li><p>添加唯一约束时，数据库实际上会添加唯一索引</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot3</title>
      <link href="/2023/10/09/SpringBoot3%20%E5%85%A8%E6%A0%88%E6%8C%87%E5%8D%97%E6%95%99%E7%A8%8B%E2%80%94%E2%80%94%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%202023%E5%B9%B4/"/>
      <url>/2023/10/09/SpringBoot3%20%E5%85%A8%E6%A0%88%E6%8C%87%E5%8D%97%E6%95%99%E7%A8%8B%E2%80%94%E2%80%94%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%202023%E5%B9%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot3-全栈指南教程——尚硅谷学习笔记-2023-年"><a href="#SpringBoot3-全栈指南教程——尚硅谷学习笔记-2023-年" class="headerlink" title="SpringBoot3 全栈指南教程——尚硅谷学习笔记 2023 年"></a>SpringBoot3 全栈指南教程——尚硅谷学习笔记 2023 年</h1><ul><li><a href="#springboot3-%E5%85%A8%E6%A0%88%E6%8C%87%E5%8D%97%E6%95%99%E7%A8%8B%E5%B0%9A%E7%A1%85%E8%B0%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2023-%E5%B9%B4">SpringBoot3 全栈指南教程——尚硅谷学习笔记 2023 年</a></li><li><a href="#%E4%B8%80-spring-boot-3-%E6%A0%B8%E5%BF%83%E7%89%B9%E6%80%A7">一、Spring Boot 3-核心特性</a><ul><li><a href="#%E7%AC%AC-1-%E7%AB%A0-springboot3-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">第 1 章 SpringBoot3-快速入门</a><ul><li><a href="#11-%E7%AE%80%E4%BB%8B">1.1 简介</a><ul><li><a href="#111-%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86">1.1.1 前置知识</a></li><li><a href="#112-%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82">1.1.2 环境要求</a></li><li><a href="#113-springboot-%E6%98%AF%E4%BB%80%E4%B9%88">1.1.3 SpringBoot 是什么</a></li></ul></li><li><a href="#12-%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C">1.2 快速体验</a><ul><li><a href="#121-%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B">1.2.1 开发流程</a><ul><li><a href="#1211-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE">1.2.1.1 创建项目</a></li><li><a href="#1212-%E5%AF%BC%E5%85%A5%E5%9C%BA%E6%99%AF">1.2.1.2 导入场景</a></li><li><a href="#1213-%E4%B8%BB%E7%A8%8B%E5%BA%8F">1.2.1.3 主程序</a></li><li><a href="#1214-%E4%B8%9A%E5%8A%A1">1.2.1.4 业务</a></li><li><a href="#1215-%E6%B5%8B%E8%AF%95">1.2.1.5 测试</a></li><li><a href="#1216-%E6%89%93%E5%8C%85">1.2.1.6 打包</a></li></ul></li><li><a href="#122-%E7%89%B9%E6%80%A7%E5%B0%8F%E7%BB%93">1.2.2 特性小结</a><ul><li><a href="#1221-%E7%AE%80%E5%8C%96%E6%95%B4%E5%90%88">1.2.2.1 简化整合</a></li><li><a href="#1222-%E7%AE%80%E5%8C%96%E5%BC%80%E5%8F%91">1.2.2.2 简化开发</a></li><li><a href="#1223-%E7%AE%80%E5%8C%96%E9%85%8D%E7%BD%AE">1.2.2.3 简化配置</a></li><li><a href="#1224-%E7%AE%80%E5%8C%96%E9%83%A8%E7%BD%B2">1.2.2.4 简化部署</a></li><li><a href="#1225-%E7%AE%80%E5%8C%96%E8%BF%90%E7%BB%B4">1.2.2.5 简化运维</a></li><li><a href="#1226-spring-initializr-%E5%88%9B%E5%BB%BA%E5%90%91%E5%AF%BC">1.2.2.6 Spring Initializr 创建向导</a></li></ul></li></ul></li><li><a href="#13-%E5%BA%94%E7%94%A8%E5%88%86%E6%9E%90">1.3 应用分析</a><ul><li><a href="#131-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86%E6%9C%BA%E5%88%B6">1.3.1 依赖管理机制</a></li><li><a href="#132-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%9C%BA%E5%88%B6">1.3.2 自动配置机制</a><ul><li><a href="#1321-%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3">1.3.2.1 初步理解</a></li><li><a href="#1322-%E5%AE%8C%E6%95%B4%E6%B5%81%E7%A8%8B">1.3.2.2 完整流程</a></li><li><a href="#1323-%E5%A6%82%E4%BD%95%E5%AD%A6%E5%A5%BD-springboot">1.3.2.3 如何学好 SpringBoot</a></li></ul></li></ul></li><li><a href="#14-%E6%A0%B8%E5%BF%83%E6%8A%80%E8%83%BD">1.4 核心技能</a><ul><li><a href="#141-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3">1.4.1 常用注解</a><ul><li><a href="#1411-%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C">1.4.1.1 组件注册</a></li><li><a href="#1412-%E6%9D%A1%E4%BB%B6%E6%B3%A8%E8%A7%A3">1.4.1.2 条件注解</a></li><li><a href="#1413-%E5%B1%9E%E6%80%A7%E7%BB%91%E5%AE%9A">1.4.1.3 属性绑定</a></li></ul></li><li><a href="#142-yaml-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">1.4.2 YAML 配置文件</a><ul><li><a href="#1421-%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">1.4.2.1. 基本语法</a></li><li><a href="#1422-%E7%A4%BA%E4%BE%8B">1.4.2.2 示例</a></li><li><a href="#1423-%E7%BB%86%E8%8A%82">1.4.2.3 细节</a></li><li><a href="#1424-%E5%B0%8F%E6%8A%80%E5%B7%A7lombok">1.4.2.4. 小技巧：lombok</a></li></ul></li><li><a href="#143-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE">1.4.3 日志配置</a><ul><li><a href="#1431-%E7%AE%80%E4%BB%8B">1.4.3.1 简介</a></li><li><a href="#1432-%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F">1.4.3.2 日志格式</a></li><li><a href="#1433-%E8%AE%B0%E5%BD%95%E6%97%A5%E5%BF%97">1.4.3.3 记录日志</a></li><li><a href="#1434-%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB">1.4.3.4 日志级别</a></li><li><a href="#1435-%E6%97%A5%E5%BF%97%E5%88%86%E7%BB%84">1.4.3.5 日志分组</a></li><li><a href="#1436-%E6%96%87%E4%BB%B6%E8%BE%93%E5%87%BA">1.4.3.6 文件输出</a></li><li><a href="#1437-%E6%96%87%E4%BB%B6%E5%BD%92%E6%A1%A3%E4%B8%8E%E6%BB%9A%E5%8A%A8%E5%88%87%E5%89%B2">1.4.3.7 文件归档与滚动切割</a></li><li><a href="#1438-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE">1.4.3.8 自定义配置</a></li><li><a href="#1439-%E5%88%87%E6%8D%A2%E6%97%A5%E5%BF%97%E7%BB%84%E5%90%88">1.4.3.9 切换日志组合</a></li><li><a href="#14310-%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98">1.4.3.10 最佳实战</a></li></ul></li></ul></li></ul></li><li><a href="#%E7%AC%AC-2-%E7%AB%A0-springboot3-web-%E5%BC%80%E5%8F%91">第 2 章 SpringBoot3-Web 开发</a><ul><li><a href="#21-webmvcautoconfiguration-%E5%8E%9F%E7%90%86">2.1 WebMvcAutoConfiguration 原理</a><ul><li><a href="#211-%E7%94%9F%E6%95%88%E6%9D%A1%E4%BB%B6">2.1.1 生效条件</a></li><li><a href="#212-%E6%95%88%E6%9E%9C">2.1.2 效果</a></li><li><a href="#213-webmvcconfigurer-%E6%8E%A5%E5%8F%A3">2.1.3 WebMvcConfigurer 接口</a></li><li><a href="#214-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%A7%84%E5%88%99%E6%BA%90%E7%A0%81">2.1.4 静态资源规则源码</a></li><li><a href="#215-enablewebmvcconfiguration-%E6%BA%90%E7%A0%81">2.1.5 EnableWebMvcConfiguration 源码</a></li><li><a href="#216-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%AE%B9%E5%99%A8%E4%B8%AD%E6%94%BE%E4%B8%80%E4%B8%AA-webmvcconfigurer-%E5%B0%B1%E8%83%BD%E9%85%8D%E7%BD%AE%E5%BA%95%E5%B1%82%E8%A1%8C%E4%B8%BA">2.1.6 为什么容器中放一个 WebMvcConfigurer 就能配置底层行为</a></li><li><a href="#217-webmvcconfigurationsupport">2.1.7 WebMvcConfigurationSupport</a></li></ul></li><li><a href="#22-web-%E5%9C%BA%E6%99%AF">2.2 Web 场景</a><ul><li><a href="#221-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE">2.2.1 自动配置</a></li><li><a href="#222-%E9%BB%98%E8%AE%A4%E6%95%88%E6%9E%9C">2.2.2 默认效果</a></li></ul></li><li><a href="#23-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">2.3 静态资源</a><ul><li><a href="#231-%E9%BB%98%E8%AE%A4%E8%A7%84%E5%88%99">2.3.1 默认规则</a><ul><li><a href="#2311-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84">2.3.1.1 静态资源映射</a></li><li><a href="#2312-%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%BC%93%E5%AD%98">2.3.1.2 静态资源缓存</a></li><li><a href="#2313-%E6%AC%A2%E8%BF%8E%E9%A1%B5">2.3.1.3 欢迎页</a></li><li><a href="#2314-favicon">2.3.1.4 Favicon</a></li><li><a href="#2315-%E7%BC%93%E5%AD%98%E5%AE%9E%E9%AA%8C">2.3.1.5 缓存实验</a></li></ul></li><li><a href="#232-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%A7%84%E5%88%99">2.3.2 自定义静态资源规则</a><ul><li><a href="#2321-%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F">2.3.2.1 配置方式</a></li><li><a href="#2322-%E4%BB%A3%E7%A0%81%E6%96%B9%E5%BC%8F">2.3.2.2 代码方式</a></li></ul></li></ul></li><li><a href="#24-%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D">2.4 路径匹配</a><ul><li><a href="#241-ant-%E9%A3%8E%E6%A0%BC%E8%B7%AF%E5%BE%84%E7%94%A8%E6%B3%95">2.4.1 Ant 风格路径用法</a></li><li><a href="#242-%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2">2.4.2 模式切换</a></li></ul></li><li><a href="#25-%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86">2.5 内容协商</a><ul><li><a href="#251-%E5%A4%9A%E7%AB%AF%E5%86%85%E5%AE%B9%E9%80%82%E9%85%8D">2.5.1 多端内容适配</a><ul><li><a href="#2511-%E9%BB%98%E8%AE%A4%E8%A7%84%E5%88%99">2.5.1.1 默认规则</a></li><li><a href="#2512-%E6%95%88%E6%9E%9C%E6%BC%94%E7%A4%BA">2.5.1.2 效果演示</a></li><li><a href="#2513-%E9%85%8D%E7%BD%AE%E5%8D%8F%E5%95%86%E8%A7%84%E5%88%99%E4%B8%8E%E6%94%AF%E6%8C%81%E7%B1%BB%E5%9E%8B">2.5.1.3 配置协商规则与支持类型</a></li></ul></li><li><a href="#252-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%86%85%E5%AE%B9%E8%BF%94%E5%9B%9E">2.5.2 自定义内容返回</a><ul><li><a href="#2521-%E5%A2%9E%E5%8A%A0-yaml-%E8%BF%94%E5%9B%9E%E6%94%AF%E6%8C%81">2.5.2.1 增加 yaml 返回支持</a></li><li><a href="#2522-%E6%80%9D%E8%80%83%E5%A6%82%E4%BD%95%E5%A2%9E%E5%8A%A0%E5%85%B6%E4%BB%96">2.5.2.2 思考：如何增加其他</a></li><li><a href="#2523-httpmessageconverter-%E7%9A%84%E7%A4%BA%E4%BE%8B%E5%86%99%E6%B3%95">2.5.2.3 HttpMessageConverter 的示例写法</a></li></ul></li><li><a href="#253-%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86%E5%8E%9F%E7%90%86-httpmessageconverter">2.5.3 内容协商原理 HttpMessageConverter</a><ul><li><a href="#2531-responsebody-%E7%94%B1-httpmessageconverter-%E5%A4%84%E7%90%86">2.5.3.1 @ResponseBody 由 HttpMessageConverter 处理</a></li><li><a href="#2532-webmvcautoconfiguration-%E6%8F%90%E4%BE%9B%E5%87%A0%E7%A7%8D%E9%BB%98%E8%AE%A4-httpmessageconverters">2.5.3.2 WebMvcAutoConfiguration 提供几种默认 HttpMessageConverters</a></li></ul></li></ul></li><li><a href="#26-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E">2.6 模板引擎</a><ul><li><a href="#261-thymeleaf-%E6%95%B4%E5%90%88">2.6.1 Thymeleaf 整合</a></li><li><a href="#262-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">2.6.2 基础语法</a><ul><li><a href="#2621-%E6%A0%B8%E5%BF%83%E7%94%A8%E6%B3%95">2.6.2.1 核心用法</a></li><li><a href="#2622-%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B">2.6.2.2 语法示例</a></li><li><a href="#2623-%E5%B1%9E%E6%80%A7%E8%AE%BE%E7%BD%AE">2.6.2.3 属性设置</a></li><li><a href="#2624-%E9%81%8D%E5%8E%86">2.6.2.4 遍历</a></li><li><a href="#2625-%E5%88%A4%E6%96%AD">2.6.2.5 判断</a></li><li><a href="#2626-%E5%B1%9E%E6%80%A7%E4%BC%98%E5%85%88%E7%BA%A7">2.6.2.6 属性优先级</a></li><li><a href="#2627-%E8%A1%8C%E5%86%85%E5%86%99%E6%B3%95">2.6.2.7 行内写法</a></li><li><a href="#2628-%E5%8F%98%E9%87%8F%E9%80%89%E6%8B%A9">2.6.2.8 变量选择</a></li><li><a href="#2629-%E6%A8%A1%E6%9D%BF%E5%B8%83%E5%B1%80">2.6.2.9 模板布局</a></li><li><a href="#26210-devtools">2.6.2.10 devtools</a></li></ul></li></ul></li><li><a href="#27-%E5%9B%BD%E9%99%85%E5%8C%96">2.7 国际化</a></li><li><a href="#28-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">2.8 错误处理</a><ul><li><a href="#281-%E9%BB%98%E8%AE%A4%E6%9C%BA%E5%88%B6">2.8.1 默认机制</a></li><li><a href="#282-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%94%99%E8%AF%AF%E5%93%8D%E5%BA%94">2.8.2 自定义错误响应</a><ul><li><a href="#2821-%E8%87%AA%E5%AE%9A%E4%B9%89-json-%E5%93%8D%E5%BA%94">2.8.2.1 自定义 json 响应</a></li><li><a href="#2822-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A1%B5%E9%9D%A2%E5%93%8D%E5%BA%94">2.8.2.2 自定义页面响应</a></li></ul></li><li><a href="#283-%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98">2.8.3 最佳实战</a></li></ul></li><li><a href="#29-%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%AE%B9%E5%99%A8">2.9 嵌入式容器</a><ul><li><a href="#291-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86">2.9.1 自动配置原理</a></li><li><a href="#292-%E8%87%AA%E5%AE%9A%E4%B9%89">2.9.2 自定义</a></li><li><a href="#293-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">2.9.3 最佳实践</a></li></ul></li><li><a href="#210-%E5%85%A8%E9%9D%A2%E6%8E%A5%E7%AE%A1-springmvc">2.10 全面接管 SpringMVC</a><ul><li><a href="#2101-webmvcautoconfiguration-%E5%88%B0%E5%BA%95%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E4%BA%86%E5%93%AA%E4%BA%9B%E8%A7%84%E5%88%99">2.10.1 WebMvcAutoConfiguration 到底自动配置了哪些规则</a></li><li><a href="#2102-enablewebmvc-%E7%A6%81%E7%94%A8%E9%BB%98%E8%AE%A4%E8%A1%8C%E4%B8%BA">2.10.2 @EnableWebMvc 禁用默认行为</a></li><li><a href="#2103-webmvcconfigurer-%E5%8A%9F%E8%83%BD">2.10.3 WebMvcConfigurer 功能</a></li></ul></li><li><a href="#211-%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">2.11 最佳实践</a><ul><li><a href="#2111-%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F">2.11.1 三种方式</a></li><li><a href="#2112-%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F">2.11.2 两种模式</a></li></ul></li><li><a href="#212-web-%E6%96%B0%E7%89%B9%E6%80%A7">2.12 Web 新特性</a><ul><li><a href="#2121-problemdetails">2.12.1 Problemdetails</a></li><li><a href="#2122-%E5%87%BD%E6%95%B0%E5%BC%8F-web">2.12.2 函数式 Web</a><ul><li><a href="#21221-%E5%9C%BA%E6%99%AF">2.12.2.1 场景</a></li><li><a href="#21222-%E6%A0%B8%E5%BF%83%E7%B1%BB">2.12.2.2 核心类</a></li><li><a href="#21223-%E7%A4%BA%E4%BE%8B">2.12.2.3 示例</a></li></ul></li></ul></li></ul></li><li><a href="#%E7%AC%AC-3-%E7%AB%A0-springboot3-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE">第 3 章 SpringBoot3-数据访问</a><ul><li><a href="#31-%E5%88%9B%E5%BB%BA-ssm-%E6%95%B4%E5%90%88%E9%A1%B9%E7%9B%AE">3.1 创建 SSM 整合项目</a></li><li><a href="#32-%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90">3.2 配置数据源</a></li><li><a href="#33-%E9%85%8D%E7%BD%AE-mybatis">3.3 配置 MyBatis</a></li><li><a href="#34-crud-%E7%BC%96%E5%86%99">3.4 CRUD 编写</a></li><li><a href="#35-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86">3.5 自动配置原理</a></li><li><a href="#36-%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E7%94%9F%E6%95%88%E7%9A%84%E9%85%8D%E7%BD%AE">3.6 快速定位生效的配置</a></li><li><a href="#37-%E6%89%A9%E5%B1%95%E6%95%B4%E5%90%88%E5%85%B6%E4%BB%96%E6%95%B0%E6%8D%AE%E6%BA%90">3.7 扩展：整合其他数据源</a><ul><li><a href="#371-druid-%E6%95%B0%E6%8D%AE%E6%BA%90">3.7.1 Druid 数据源</a></li></ul></li><li><a href="#38-%E9%99%84%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%B0%E6%8D%AE%E5%BA%93">3.8 附录：示例数据库</a></li></ul></li><li><a href="#%E7%AC%AC-4-%E7%AB%A0-springboot3-%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7">第 4 章 SpringBoot3-基础特性</a><ul><li><a href="#41-springapplication">4.1 SpringApplication</a><ul><li><a href="#411-%E8%87%AA%E5%AE%9A%E4%B9%89-banner">4.1.1 自定义 banner</a></li><li><a href="#412-%E8%87%AA%E5%AE%9A%E4%B9%89-springapplication">4.1.2 自定义 SpringApplication</a></li><li><a href="#413-fluentbuilder-api">4.1.3 FluentBuilder API</a></li></ul></li><li><a href="#42-profiles">4.2 Profiles</a><ul><li><a href="#421-%E4%BD%BF%E7%94%A8">4.2.1 使用</a><ul><li><a href="#4211-%E6%8C%87%E5%AE%9A%E7%8E%AF%E5%A2%83">4.2.1.1 指定环境</a></li><li><a href="#4212-%E7%8E%AF%E5%A2%83%E6%BF%80%E6%B4%BB">4.2.1.2 环境激活</a></li><li><a href="#4213-%E7%8E%AF%E5%A2%83%E5%8C%85%E5%90%AB">4.2.1.3 环境包含</a></li></ul></li><li><a href="#422-profile-%E5%88%86%E7%BB%84">4.2.2 Profile 分组</a></li><li><a href="#423-profile-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6">4.2.3 Profile 配置文件</a></li></ul></li><li><a href="#43-%E5%A4%96%E9%83%A8%E5%8C%96%E9%85%8D%E7%BD%AE">4.3 外部化配置</a><ul><li><a href="#431-%E9%85%8D%E7%BD%AE%E4%BC%98%E5%85%88%E7%BA%A7">4.3.1 配置优先级</a></li><li><a href="#432-%E5%A4%96%E9%83%A8%E9%85%8D%E7%BD%AE">4.3.2 外部配置</a></li><li><a href="#433-%E5%AF%BC%E5%85%A5%E9%85%8D%E7%BD%AE">4.3.3 导入配置</a></li><li><a href="#434-%E5%B1%9E%E6%80%A7%E5%8D%A0%E4%BD%8D%E7%AC%A6">4.3.4 属性占位符</a></li></ul></li><li><a href="#44-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95-junit5">4.4 单元测试 JUnit5</a><ul><li><a href="#441-%E6%95%B4%E5%90%88">4.4.1 整合</a></li><li><a href="#442-%E6%B5%8B%E8%AF%95">4.4.2 测试</a><ul><li><a href="#4421-%E7%BB%84%E4%BB%B6%E6%B5%8B%E8%AF%95">4.4.2.1 组件测试</a></li><li><a href="#4422-%E6%B3%A8%E8%A7%A3">4.4.2.2 注解</a></li><li><a href="#4423-%E6%96%AD%E8%A8%80">4.4.2.3 断言</a></li><li><a href="#4424-%E5%B5%8C%E5%A5%97%E6%B5%8B%E8%AF%95">4.4.2.4 嵌套测试</a></li><li><a href="#4425-%E5%8F%82%E6%95%B0%E5%8C%96%E6%B5%8B%E8%AF%95">4.4.2.5 参数化测试</a></li></ul></li></ul></li></ul></li><li><a href="#%E7%AC%AC-5-%E7%AB%A0-springboot3-%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86">第 5 章 SpringBoot3-核心原理</a><ul><li><a href="#51-%E4%BA%8B%E4%BB%B6%E5%92%8C%E7%9B%91%E5%90%AC%E5%99%A8">5.1 事件和监听器</a><ul><li><a href="#511-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9B%91%E5%90%AC">5.1.1 生命周期监听</a><ul><li><a href="#5111-%E7%9B%91%E5%90%AC%E5%99%A8-springapplicationrunlistener">5.1.1.1 监听器 SpringApplicationRunListener</a></li><li><a href="#5112-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%85%A8%E6%B5%81%E7%A8%8B">5.1.1.2 生命周期全流程</a></li></ul></li><li><a href="#512-%E4%BA%8B%E4%BB%B6%E8%A7%A6%E5%8F%91%E6%97%B6%E6%9C%BA">5.1.2 事件触发时机</a><ul><li><a href="#5121-%E5%90%84%E7%A7%8D%E5%9B%9E%E8%B0%83%E7%9B%91%E5%90%AC%E5%99%A8">5.1.2.1 各种回调监听器</a></li><li><a href="#5122-%E5%AE%8C%E6%95%B4%E8%A7%A6%E5%8F%91%E6%B5%81%E7%A8%8B">5.1.2.2 完整触发流程</a></li><li><a href="#5123-springboot-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91">5.1.2.3 SpringBoot 事件驱动开发</a></li></ul></li></ul></li><li><a href="#52-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86">5.2 自动配置原理</a><ul><li><a href="#521-%E5%85%A5%E9%97%A8%E7%90%86%E8%A7%A3">5.2.1 入门理解</a><ul><li><a href="#5211-%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B">5.2.1.1 自动配置流程</a></li><li><a href="#5212-spi-%E6%9C%BA%E5%88%B6">5.2.1.2 SPI 机制</a></li><li><a href="#5213-%E5%8A%9F%E8%83%BD%E5%BC%80%E5%85%B3">5.2.1.3 功能开关</a></li></ul></li><li><a href="#522-%E8%BF%9B%E9%98%B6%E7%90%86%E8%A7%A3">5.2.2 进阶理解</a><ul><li><a href="#5221-springbootapplication">5.2.2.1 @SpringBootApplication</a></li><li><a href="#5222-%E5%AE%8C%E6%95%B4%E5%90%AF%E5%8A%A8%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B">5.2.2.2 完整启动加载流程</a></li></ul></li></ul></li><li><a href="#53-%E8%87%AA%E5%AE%9A%E4%B9%89-starter">5.3 自定义 starter</a><ul><li><a href="#531-%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81">5.3.1 业务代码</a></li><li><a href="#532-%E5%9F%BA%E6%9C%AC%E6%8A%BD%E5%8F%96">5.3.2 基本抽取</a></li><li><a href="#533-%E4%BD%BF%E7%94%A8enablexxx-%E6%9C%BA%E5%88%B6">5.3.3 使用@EnableXxx 机制</a></li><li><a href="#534-%E5%AE%8C%E5%85%A8%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE">5.3.4 完全自动配置</a></li></ul></li></ul></li></ul></li></ul><!-- /code_chunk_output --><h1 id="一、Spring-Boot-3-核心特性"><a href="#一、Spring-Boot-3-核心特性" class="headerlink" title="一、Spring Boot 3-核心特性"></a>一、Spring Boot 3-核心特性</h1><h2 id="第-1-章-SpringBoot3-快速入门"><a href="#第-1-章-SpringBoot3-快速入门" class="headerlink" title="第 1 章 SpringBoot3-快速入门"></a>第 1 章 SpringBoot3-快速入门</h2><h3 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h3><h4 id="1-1-1-前置知识"><a href="#1-1-1-前置知识" class="headerlink" title="1.1.1 前置知识"></a>1.1.1 前置知识</h4><ul><li><p>Java17</p></li><li><p>Spring、SpringMVC、MyBatis</p></li><li><p>Maven、IDEA</p></li></ul><h4 id="1-1-2-环境要求"><a href="#1-1-2-环境要求" class="headerlink" title="1.1.2 环境要求"></a>1.1.2 环境要求</h4><table><thead><tr><th><strong>环境&amp;工具</strong></th><th><strong>版本</strong></th></tr></thead><tbody><tr><td>SpringBoot</td><td>3.1.3+</td></tr><tr><td>IDEA</td><td>2022.3.3+</td></tr><tr><td>Java</td><td>17+</td></tr><tr><td>Maven</td><td>3.8.1+</td></tr><tr><td>Tomcat</td><td>10.1.12+</td></tr><tr><td>Servlet</td><td>5.0.0+</td></tr><tr><td>GraalVM Community</td><td>22.3+</td></tr><tr><td>Native Build Tools</td><td>0.9.19+</td></tr></tbody></table><h4 id="1-1-3-SpringBoot-是什么"><a href="#1-1-3-SpringBoot-是什么" class="headerlink" title="1.1.3 SpringBoot 是什么"></a>1.1.3 SpringBoot 是什么</h4><p>SpringBoot 帮我们简单、快速地创建一个独立的、生产级别的 <strong>Spring 应用</strong> <strong>（说明：SpringBoot 底层是 Spring）</strong>。</p><p>大多数 SpringBoot 应用只需要编写少量配置即可快速整合 Spring 平台以及第三方技术。</p><p><strong>特性</strong>：</p><ul><li><p><code>快速创建</code>独立 Spring 应用。</p><ul><li>SSM：导包、配置、启动运行。</li></ul></li><li><p>直接<code>嵌入</code> Tomcat、Jetty 或 Undertow（无需部署 war 包）【Servlet 容器】。</p><ul><li><p>Linux、Java、Tomcat、MySQL：war 放到 Tomcat 的 webapps 下。</p></li><li><p>jar、Java 环境：java -jar。</p></li></ul></li><li><p><strong>重点</strong>：提供可选的 <code>starter</code>，简化应用<strong>整合</strong>。</p><ul><li><p><strong>场景启动器（starter）</strong>：web、json、邮件、oss（对象存储）、异步、定时任务、缓存......</p></li><li><p>导很多包，控制好版本。</p></li><li><p>为每一种场景准备了一个依赖：<strong>web-starter</strong>、<strong>mybatis-starter</strong>。</p></li></ul></li><li><p><strong>重点</strong>：<code>按需自动配置</code> Spring 以及第三方库。</p><ul><li><p>如果这些场景要使用（生效）。这个场景的所有配置都会自动配置好。</p></li><li><p><strong>约定大于配置</strong>：每个场景都有很多默认配置。</p></li><li><p>自定义：配置文件中修改几项就可以。</p></li></ul></li><li><p>提供<code>生产级特性</code>：如监控指标、健康检查、外部化配置等。</p><ul><li>监控指标、健康检查（k8s）、外部化配置。</li></ul></li><li><p>无代码生成、<code>无 xml</code>。</p></li></ul><p>总结：简化开发，简化配置，简化整合，简化部署，简化监控，简化运维。</p><h3 id="1-2-快速体验"><a href="#1-2-快速体验" class="headerlink" title="1.2 快速体验"></a>1.2 快速体验</h3><blockquote><p>场景：浏览器发送 &#x2F;hello 请求，返回”Hello, Spring Boot 3!”</p></blockquote><h4 id="1-2-1-开发流程"><a href="#1-2-1-开发流程" class="headerlink" title="1.2.1 开发流程"></a>1.2.1 开发流程</h4><h5 id="1-2-1-1-创建项目"><a href="#1-2-1-1-创建项目" class="headerlink" title="1.2.1.1 创建项目"></a>1.2.1.1 创建项目</h5><p>maven 项目</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 所有 Spring Boot 项目都必须继承自 spring-boot-starter-parent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-2-1-2-导入场景"><a href="#1-2-1-2-导入场景" class="headerlink" title="1.2.1.2 导入场景"></a>1.2.1.2 导入场景</h5><p>场景启动器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Web 开发的场景启动器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-2-1-3-主程序"><a href="#1-2-1-3-主程序" class="headerlink" title="1.2.1.3 主程序"></a>1.2.1.3 主程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 启动 SpringBoot 项目的主入口程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 这是一个 SpringBoot 应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">       SpringApplication.run(MainApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-1-4-业务"><a href="#1-2-1-4-业务" class="headerlink" title="1.2.1.4 业务"></a>1.2.1.4 业务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, Spring Boot 3!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-1-5-测试"><a href="#1-2-1-5-测试" class="headerlink" title="1.2.1.5 测试"></a>1.2.1.5 测试</h5><p>默认启动访问：localhost:8080</p><h5 id="1-2-1-6-打包"><a href="#1-2-1-6-打包" class="headerlink" title="1.2.1.6 打包"></a>1.2.1.6 打包</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- SpringBoot 应用打包插件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mvn clean package</code> 把项目打成可执行的 jar 包。</p><p><code>java -jar boot3-01-demo-1.0-SNAPSHOT.jar</code> 启动项目。</p><h4 id="1-2-2-特性小结"><a href="#1-2-2-特性小结" class="headerlink" title="1.2.2 特性小结"></a>1.2.2 特性小结</h4><h5 id="1-2-2-1-简化整合"><a href="#1-2-2-1-简化整合" class="headerlink" title="1.2.2.1 简化整合"></a>1.2.2.1 简化整合</h5><p>导入相关的场景，拥有相关的功能的场景启动器。</p><p>默认支持的所有场景：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters</a></p><ul><li><p>官方提供的场景：命名为 <code>spring-boot-starter-*</code>。</p></li><li><p>第三方提供场景：命名为 <code>*-spring-boot-starter</code>。</p></li></ul><p>场景一导入，万物皆就绪。</p><h5 id="1-2-2-2-简化开发"><a href="#1-2-2-2-简化开发" class="headerlink" title="1.2.2.2 简化开发"></a>1.2.2.2 简化开发</h5><p>无需编写任何配置，直接开发业务。</p><h5 id="1-2-2-3-简化配置"><a href="#1-2-2-3-简化配置" class="headerlink" title="1.2.2.3 简化配置"></a>1.2.2.3 简化配置</h5><p><code>application.properties</code>：</p><ul><li><p>集中式管理配置，只需要修改这个文件就行。</p></li><li><p>配置基本都有默认值。</p></li><li><p>能写的所有配置都在：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties</a></p></li></ul><h5 id="1-2-2-4-简化部署"><a href="#1-2-2-4-简化部署" class="headerlink" title="1.2.2.4 简化部署"></a>1.2.2.4 简化部署</h5><p>打包为可执行的 jar 包。</p><p>Linux 服务器上有 Java 环境。</p><h5 id="1-2-2-5-简化运维"><a href="#1-2-2-5-简化运维" class="headerlink" title="1.2.2.5 简化运维"></a>1.2.2.5 简化运维</h5><p>修改配置（外部放一个 application.properties 文件）、监控、健康检查......</p><h5 id="1-2-2-6-Spring-Initializr-创建向导"><a href="#1-2-2-6-Spring-Initializr-创建向导" class="headerlink" title="1.2.2.6 Spring Initializr 创建向导"></a>1.2.2.6 Spring Initializr 创建向导</h5><p>一键创建好整个项目结构。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/5b9357cc1d3e46f5be746110ae5b098c.png" alt="Spring Initializr 创建向导"></p><h3 id="1-3-应用分析"><a href="#1-3-应用分析" class="headerlink" title="1.3 应用分析"></a>1.3 应用分析</h3><h4 id="1-3-1-依赖管理机制"><a href="#1-3-1-依赖管理机制" class="headerlink" title="1.3.1 依赖管理机制"></a>1.3.1 依赖管理机制</h4><p>思考：</p><p>1、为什么导入 <code>starter-web </code>所有相关依赖都导入进来？</p><ul><li><p>开发什么场景，导入什么<strong>场景启动器</strong>。</p></li><li><p><strong>maven 依赖传递原则</strong>。<strong>A-B-C：A 就拥有 B 和 C</strong>。</p></li><li><p>导入场景启动器，场景启动器自动把这个场景的所有核心依赖全部导入进来。</p></li></ul><p>2、为什么版本号都不用写？</p><ul><li><p>每个 boot 项目都有一个父项目 <code>spring-boot-starter-parent</code>。</p></li><li><p>parent 的父项目是 <code>spring-boot-dependencies</code>。</p></li><li><p>父项目<strong>版本仲裁中心</strong>，把所有常见的 jar 的依赖版本都声明好了。</p></li><li><p>比如：<code>mysql-connector-j</code>。</p></li></ul><p>3、自定义版本号。</p><ul><li><p>利用 maven 的就近原则。</p><ul><li><p>直接在当前项目 <code>properties</code> 标签中声明父项目用的版本属性的 key。</p></li><li><p>直接在<strong>导入依赖的时候声明版本</strong>。</p></li></ul></li></ul><p>4、第三方的 jar 包。</p><ul><li><p>boot 父项目没有管理的需要自行声明好。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/2083af5fc724496798aee59d863549ae.png" alt="依赖管理机制"></p><h4 id="1-3-2-自动配置机制"><a href="#1-3-2-自动配置机制" class="headerlink" title="1.3.2 自动配置机制"></a>1.3.2 自动配置机制</h4><h5 id="1-3-2-1-初步理解"><a href="#1-3-2-1-初步理解" class="headerlink" title="1.3.2.1 初步理解"></a>1.3.2.1 初步理解</h5><ul><li><p><strong>自动配置</strong>的 Tomcat、SpringMVC 等。</p><ul><li><p><strong>导入场景</strong>，容器中就会自动配置好这个场景的核心组件。</p></li><li><p>以前：DispatcherServlet、ViewResolver、CharacterEncodingFilter…</p></li><li><p>现在：自动配置好的这些组件。</p></li><li><p>验证：<strong>容器中有了什么组件，就具有什么功能</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> 2023/9/11</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 启动 SpringBoot 项目的主入口程序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 主程序：com.myxh.springboot</span></span><br><span class="line"><span class="comment">// @SpringBootConfiguration</span></span><br><span class="line"><span class="comment">// @EnableAutoConfiguration</span></span><br><span class="line"><span class="comment">// @ComponentScan(&quot;com.myxh.springboot&quot;)</span></span><br><span class="line"><span class="comment">// @SpringBootApplication(scanBasePackages = &quot;com.myxh.springboot&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个 SpringBoot 应用</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Java10：局部变量类型的自动推断</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">ioc</span> <span class="operator">=</span> SpringApplication.run(MainApplication.class, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、获取容器中所有组件的名字</span></span><br><span class="line">        String[] beanNames = ioc.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、挨个遍历</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        dispatcherServlet、beanNameViewResolver、characterEncodingFilter、multipartResolver</span></span><br><span class="line"><span class="comment">        SpringBoot 把以前配置的核心组件现在都给自动配置好了</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span> (String beanName : beanNames)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;beanName = &quot;</span> + beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>默认的包扫描规则</strong>。</p><ul><li><p><code>@SpringBootApplication</code> 标注的类就是主程序类。</p></li><li><p><strong>SpringBoot 只会扫描主程序所在的包及其下面的子包，自动的 component-scan 功能</strong>。</p></li><li><p><strong>自定义扫描路径</strong>。</p><ul><li><p>@SpringBootApplication(scanBasePackages &#x3D; “com.myxh.springboot”)</p></li><li><p><code>@ComponentScan(&quot;com.myxh.springboot&quot;)</code> 直接指定扫描的路径。</p></li></ul></li></ul></li><li><p><strong>配置默认值</strong>。</p><ul><li><p><strong>配置文件</strong>的所有配置项是和某个<strong>类的对象</strong>值进行一一绑定的。</p></li><li><p>绑定了配置文件中每一项值的类：<strong>属性类</strong>。</p></li><li><p>比如：</p><ul><li><p><code>ServerProperties</code> 绑定了所有 Tomcat 服务器有关的配置。</p></li><li><p><code>MultipartProperties</code> 绑定了所有文件上传相关的配置。</p></li><li><p>参照官方文档 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server%EF%BC%8C">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#appendix.application-properties.server，</a> 或者参照绑定的<strong>属性类</strong>。</p></li></ul></li></ul></li><li><p>按需加载自动配置。</p><ul><li><p>导入场景 <code>spring-boot-starter-web</code>。</p></li><li><p>场景启动器除了会导入相关功能依赖，导入一个 <code>spring-boot-starter</code>，是所有 <code>starter</code> 的 <code>starter</code>，基础核心 starter。</p></li><li><p><code>spring-boot-starter</code> 导入了一个包 <code>spring-boot-autoconfigure</code>。包里面都是各种场景的 <code>AutoConfiguration</code> <strong>自动配置类</strong>。</p></li><li><p>虽然全场景的自动配置都在 <code>spring-boot-autoconfigure</code> 这个包，但是不是全都开启的。</p><ul><li>导入哪个场景就开启哪个自动配置。</li></ul></li></ul></li></ul><p>总结：导入场景启动器、触发 <code>spring-boot-autoconfigure</code> 这个包的自动配置生效、容器中就会具有相关场景的功能。</p><h5 id="1-3-2-2-完整流程"><a href="#1-3-2-2-完整流程" class="headerlink" title="1.3.2.2 完整流程"></a>1.3.2.2 完整流程</h5><blockquote><p>思考：</p><p>1、<strong>SpringBoot 怎么实现导一个 starter、写一些简单配置，应用就能跑起来，无需关心整合</strong>。</p><p>2、为什么 Tomcat 的端口号可以配置在 <strong>application.properties</strong> 中，并且 <strong>Tomcat</strong> 能启动成功？</p><p>3、导入场景后哪些<strong>自动配置能生效</strong>？</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/f00f4ee5a99f4d5ea7bc9e6ddda2ccb6.png" alt="完整流程"></p><p><strong>自动配置流程细节梳理</strong>：</p><p><strong>1</strong>、导入 <code>starter-web</code>：导入了 web 开发场景。</p><ul><li><p>1、场景启动器导入了相关场景的所有依赖：<code>starter-json</code>、<code>starter-tomcat</code>、<code>springmvc</code>。</p></li><li><p>2、每个场景启动器都引入了一个 <code>spring-boot-starter</code>，核心场景启动器。</p></li><li><p>3、<strong>核心场景启动器</strong>引入了 <code>spring-boot-autoconfigure</code> 包。</p></li><li><p>4、<code>spring-boot-autoconfigure</code> 里面囊括了所有场景的所有配置。</p></li><li><p>5、只要这个包下的所有类都能生效，那么相当于 SpringBoot 官方写好的整合功能就生效了。</p></li><li><p>6、SpringBoot 默认却扫描不到 <code>spring-boot-autoconfigure</code> 下写好的所有<strong>配置类</strong>。（这些<strong>配置类</strong>做了整合操作），<strong>默认只扫描主程序所在的包</strong>。</p></li></ul><p><strong>2</strong>、<strong>主程序</strong>：<code>@SpringBootApplication</code>。</p><ul><li><p>1、<code>@SpringBootApplication</code> 由三个注解组成<code>@SpringBootConfiguration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code>。</p></li><li><p>2、SpringBoot 默认只能扫描自己主程序所在的包及其下面的子包，扫描不到 <code>spring-boot-autoconfigure</code> 包中官方写好的<strong>配置类</strong>。</p></li><li><p>3、<code>@EnableAutoConfiguration</code>：SpringBoot <strong>开启自动配置的核心</strong>。</p><ul><li><p>① 是由 <code>@Import(AutoConfigurationImportSelector.class)</code> 提供功能：批量给容器中导入组件。</p></li><li><p>② SpringBoot 启动会默认加载 146 个配置类。</p></li><li><p>③ 这 <strong>146 个配置类</strong>来自于 <code>spring-boot-autoconfigure</code> 下 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件指定的。</p></li><li><p>④ 项目启动的时候利用 @Import 批量导入组件机制把 <code>autoconfigure</code> 包下的 146 <code>xxxAutoConfiguration</code> 类导入进来（<strong>自动配置类</strong>）。</p></li></ul></li><li><p>4、按需生效：</p><ul><li><p>虽然导入了 <code>146</code> 个自动配置，并不是这 <code>146</code> 个自动配置类都能生效。</p></li><li><p>每一个自动配置类，都有条件注解 <code>@ConditionalOnXxx</code>，只有条件成立，才能生效。</p></li></ul></li></ul><p><strong>3</strong>、<code>xxxAutoConfiguration</code> <strong>自动配置类</strong>。</p><ul><li><p>1、<strong>给容器中使用 @Bean 放一堆组件</strong>。</p></li><li><p>2、每个<strong>自动配置类</strong>都可能有这个注解 <code>@EnableConfigurationProperties(ServerProperties.class)</code>，用来把配置文件中配的指定前缀的属性值封装到 <code>xxxProperties</code> <strong>属性类</strong>中。</p></li><li><p>3、以 Tomcat 为例：把服务器的所有配置都是以 <code>server</code> 开头的。配置都封装到了属性类中。</p></li><li><p>4、给<strong>容器</strong>中放的所有<strong>组件</strong>的一些<strong>核心参数</strong>，都来自于 <code>xxxProperties</code>。<code>xxxProperties</code> <strong>都是和配置文件绑定</strong>。</p></li><li><p>5、<strong>只需要改配置文件的值，核心组件的底层参数都能修改</strong>。</p></li></ul><p><strong>4</strong>、写业务，全程无需关心各种整合（底层这些整合写好了，而且也生效了）。</p><p><strong>核心流程总结</strong>：</p><p>1、导入 <code>starter</code>，就会导入 <code>autoconfigure</code> 包。</p><p>2、<code>autoconfigure</code> 包里面 有一个文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>,里面指定的所有启动要加载的自动配置类。</p><p>3、@EnableAutoConfiguration 会自动的把上面文件里面写的所有<strong>自动配置类都导入进来</strong>。<strong>xxxAutoConfiguration 是有条件注解进行按需加载</strong>。</p><p>4、<code>xxxAutoConfiguration</code> 给容器中导入一堆组件，组件都是从 <code>xxxProperties</code> 中提取属性值。</p><p>5、<code>xxxProperties</code> 又是和<strong>配置文件</strong>进行了绑定。</p><p><strong>效果</strong>：导入 <code>starter</code>、修改配置文件，就能修改底层行为。</p><h5 id="1-3-2-3-如何学好-SpringBoot"><a href="#1-3-2-3-如何学好-SpringBoot" class="headerlink" title="1.3.2.3 如何学好 SpringBoot"></a>1.3.2.3 如何学好 SpringBoot</h5><p>框架的框架、底层基于 Spring。能调整每一个场景的底层行为。100%项目一定会用到<strong>底层自定义</strong>。</p><p>摄影：</p><ul><li><p>傻瓜：自动配置好。</p></li><li><p><strong>单反</strong>：焦距、光圈、快门、感光度......</p></li><li><p>傻瓜+<strong>单反</strong>：</p></li></ul><p>1、理解<strong>自动配置原理</strong>。</p><ul><li>① <strong>导入 starter</strong> -&gt; <strong>生效 xxxAutoConfiguration</strong> -&gt; <strong>组件</strong> -&gt; <strong>xxxProperties</strong> -&gt; <strong>配置文件</strong>。</li></ul><p>2、理解<strong>其他框架底层</strong>。</p><ul><li>① 拦截器。</li></ul><p>3、可以随时<strong>定制化任何组件</strong>。</p><ul><li><p>① <strong>配置文件</strong>。</p></li><li><p>② <strong>自定义组件</strong>。</p></li></ul><p>普通开发：<code>导入 starter</code>，Controller、Service、Mapper、偶尔修改配置文件。</p><p><strong>高级开发</strong>：自定义组件、自定义配置、自定义 starter。</p><p>核心：</p><ul><li><p>这个场景自动配置导入了哪些组件，能不能 Autowired 进来使用。</p></li><li><p>能不能通过修改配置改变组件的一些默认参数。</p></li><li><p>需不需要自己完全定义这个组件。</p></li><li><p><strong>场景定制化</strong>。</p></li></ul><p><strong>最佳实战</strong>：</p><ul><li><p><strong>选场景</strong>，导入到项目。</p><ul><li><p>官方：starter。</p></li><li><p>第三方：去仓库搜。</p></li></ul></li><li><p><strong>写配置，改配置文件关键项</strong>。</p><ul><li>数据库参数（连接地址、账号密码......）。</li></ul></li><li><p>分析这个场景导入了<strong>哪些能用的组件</strong>。</p><ul><li><p><strong>自动装配</strong>这些组件进行后续使用。</p></li><li><p>不满意 SprngBoot 提供的自动配好的默认组件。</p><ul><li><p><strong>定制化</strong>。</p></li><li><p>改配置。</p></li><li><p>自定义组件。</p></li></ul></li></ul></li></ul><p>整合 redis：</p><ul><li><p><strong>选场景</strong>：<code>spring-boot-starter-data-redis</code>。</p><ul><li>场景 AutoConfiguration 就是这个场景的自动配置类。</li></ul></li><li><p>写配置：</p><ul><li><p>分析到这个场景的自动配置类开启了哪些属性绑定关系。</p></li><li><p><code>@EnableConfigurationProperties(RedisProperties.class)</code>。</p></li><li><p>修改 redis 相关的配置。</p></li></ul></li><li><p>分析组件：</p><ul><li><p>分析到 <code>RedisAutoConfiguration</code> 给容器中放了 <code>StringRedisTemplate</code>。</p></li><li><p>给业务代码中自动装配 <code>StringRedisTemplate</code>。</p></li></ul></li><li><p>定制化：</p><ul><li><p>修改配置文件。</p></li><li><p>自定义组件，自己给容器中放一个 <code>StringRedisTemplate</code>。</p></li></ul></li></ul><h3 id="1-4-核心技能"><a href="#1-4-核心技能" class="headerlink" title="1.4 核心技能"></a>1.4 核心技能</h3><h4 id="1-4-1-常用注解"><a href="#1-4-1-常用注解" class="headerlink" title="1.4.1 常用注解"></a>1.4.1 常用注解</h4><blockquote><p>SpringBoot 摒弃 XML 配置方式，改为<strong>全注解驱动</strong>。</p></blockquote><h5 id="1-4-1-1-组件注册"><a href="#1-4-1-1-组件注册" class="headerlink" title="1.4.1.1 组件注册"></a>1.4.1.1 组件注册</h5><p><strong>@Configuration</strong>、**@SpringBootConfiguration**</p><p><strong>@Bean</strong>、**@Scope**</p><p><strong>@Controller</strong>、 <strong>@Service</strong>、**@Repository<strong>、</strong>@Component**</p><p><strong>@Import</strong></p><p><strong>@ComponentScan</strong></p><p>步骤：</p><p><strong>1</strong>、**@Configuration 编写一个配置类**。</p><p><strong>2</strong>、<strong>在配置类中，自定义方法给容器中注册组件。配合@Bean</strong>。</p><p><strong>3</strong>、<strong>或使用@Import 导入第三方的组件</strong>。</p><h5 id="1-4-1-2-条件注解"><a href="#1-4-1-2-条件注解" class="headerlink" title="1.4.1.2 条件注解"></a>1.4.1.2 条件注解</h5><blockquote><p>如果注解指定的<strong>条件成立</strong>，则触发指定行为。</p></blockquote><p><strong>@ConditionalOnXxx</strong></p><p><strong>@ConditionalOnClass：如果类路径中存在这个类，则触发指定行为</strong>。</p><p><strong>@ConditionalOnMissingClass：如果类路径中不存在这个类，则触发指定行为</strong>。</p><p><strong>@ConditionalOnBean：如果容器中存在这个 Bean（组件），则触发指定行为</strong>。</p><p><strong>@ConditionalOnMissingBean：如果容器中不存在这个 Bean（组件），则触发指定行为</strong>。</p><blockquote><p>场景：</p><ul><li><p>如果存在 <strong>FastsqlException</strong> 这个类，给容器中放一个 <strong>Cat</strong> 组件，命名 cat1。</p></li><li><p>否则，就给容器中放一个 <strong>Dog</strong> 组件，命名 dog1。</p></li><li><p>如果系统中有 <strong>dog1</strong> 这个组件，就给容器中放一个 User 组件，名 zhangsan。</p></li><li><p>否则，就放一个 User，名叫 lisi。</p></li></ul></blockquote><p><strong>@ConditionalOnBean（value&#x3D;组件类型，name&#x3D;组件名字）：判断容器中是否有这个类型的组件，并且名字是指定的值</strong>。</p><p>@ConditionalOnRepositoryType (org.springframework.boot.autoconfigure.data)</p><p>@ConditionalOnDefaultWebSecurity (org.springframework.boot.autoconfigure.security)</p><p>@ConditionalOnSingleCandidate (org.springframework.boot.autoconfigure.condition)</p><p>@ConditionalOnWebApplication (org.springframework.boot.autoconfigure.condition)</p><p>@ConditionalOnWarDeployment (org.springframework.boot.autoconfigure.condition)</p><p>@ConditionalOnJndi (org.springframework.boot.autoconfigure.condition)</p><p>@ConditionalOnResource (org.springframework.boot.autoconfigure.condition)</p><p>@ConditionalOnExpression (org.springframework.boot.autoconfigure.condition)</p><p><strong>@ConditionalOnClass (org.springframework.boot.autoconfigure.condition)</strong></p><p>@ConditionalOnEnabledResourceChain (org.springframework.boot.autoconfigure.web)</p><p><strong>@ConditionalOnMissingClass (org.springframework.boot.autoconfigure.condition)</strong></p><p>@ConditionalOnNotWebApplication (org.springframework.boot.autoconfigure.condition)</p><p>@ConditionalOnProperty (org.springframework.boot.autoconfigure.condition)</p><p>@ConditionalOnCloudPlatform (org.springframework.boot.autoconfigure.condition)</p><p><strong>@ConditionalOnBean (org.springframework.boot.autoconfigure.condition)</strong></p><p><strong>@ConditionalOnMissingBean (org.springframework.boot.autoconfigure.condition)</strong></p><p>@ConditionalOnMissingFilterBean (org.springframework.boot.autoconfigure.web.servlet)</p><p>@Profile (org.springframework.context.annotation)</p><p>@ConditionalOnInitializedRestarter (org.springframework.boot.devtools.restart)</p><p>@ConditionalOnGraphQlSchema (org.springframework.boot.autoconfigure.graphql)</p><p>@ConditionalOnJava (org.springframework.boot.autoconfigure.condition)</p><h5 id="1-4-1-3-属性绑定"><a href="#1-4-1-3-属性绑定" class="headerlink" title="1.4.1.3 属性绑定"></a>1.4.1.3 属性绑定</h5><p><strong>@ConfigurationProperties：声明组件的属性和配置文件哪些前缀开始项进行绑定</strong>。</p><p><strong>@EnableConfigurationProperties：快速注册注解</strong>：</p><ul><li><strong>场景</strong>：SpringBoot 默认只扫描自己主程序所在的包。如果导入第三方包，即使组件上标注了 @Component、@ConfigurationProperties 注解也没用。因为组件都扫描不进来，此时使用这个注解就可以快速进行属性绑定并把组件注册进容器。</li></ul><blockquote><p>将容器中任意<strong>组件（Bean）的属性值</strong>和<strong>配置文件</strong>的配置项的值<strong>进行绑定</strong>。</p><p>1、<strong>给容器中注册组件（@Component、@Bean）</strong>。</p><p>2、<strong>使用 @ConfigurationProperties 声明组件和配置文件的哪些配置项进行绑定</strong>。</p></blockquote><h4 id="1-4-2-YAML-配置文件"><a href="#1-4-2-YAML-配置文件" class="headerlink" title="1.4.2 YAML 配置文件"></a>1.4.2 YAML 配置文件</h4><blockquote><p><strong>痛点</strong>：SpringBoot 集中化管理配置，<strong>application.properties</strong>。</p><p><strong>问题</strong>：配置多以后难阅读和修改，<strong>层级结构辨识度不高</strong>。</p></blockquote><blockquote><p>YAML 是 “YAML Ain’t a Markup Language”（YAML 不是一种标记语言）。在开发的这种语言时，YAML 的意思其实是：”Yet Another Markup Language”（是另一种标记语言）。</p><ul><li><p>设计目标，就是<strong>方便人类读写</strong>。</p></li><li><p><strong>层次分明</strong>，更适合做配置文件。</p></li></ul><p>使用 <strong>.yaml</strong> 或 <strong>.yml</strong> 作为文件后缀。</p></blockquote><h5 id="1-4-2-1-基本语法"><a href="#1-4-2-1-基本语法" class="headerlink" title="1.4.2.1. 基本语法"></a>1.4.2.1. 基本语法</h5><ul><li><p><strong>大小写敏感</strong>。</p></li><li><p>使用<strong>缩进表示层级关系</strong>，<strong>k: v，使用空格分割 k, v</strong>。</p></li><li><p>缩进时不允许使用 Tab 键，只允许<strong>使用空格</strong>。</p></li><li><p>缩进的空格数目不重要，只要<strong>相同层级</strong>的元素<strong>左侧对齐</strong>即可。</p></li><li><p><strong># 表示注释</strong>，从这个字符一直到行尾，都会被解析器忽略。</p></li></ul><p>支持的写法：</p><ul><li><p><strong>对象</strong>：<strong>键值对</strong>的集合，例如：映射（map）、 哈希（hash）、 字典（dictionary）。</p></li><li><p><strong>数组</strong>：一组按次序排列的值，例如：序列（sequence）、 列表（list）。</p></li><li><p><strong>纯量</strong>：单个的、不可再分的值，例如：字符串、数字、bool、日期。</p></li></ul><h5 id="1-4-2-2-示例"><a href="#1-4-2-2-示例" class="headerlink" title="1.4.2.2 示例"></a>1.4.2.2 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 和配置文件 person 前缀的所有配置进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class="line"><span class="comment">// 自动生成无参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">// 自动生成全参构造器</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">// 自动生成 JavaBean 属性的 getter/setter</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="keyword">private</span> Boolean like;</span><br><span class="line">    <span class="comment">// 嵌套对象</span></span><br><span class="line">    <span class="keyword">private</span> Child child;</span><br><span class="line">    <span class="comment">// 数组（里面是对象）</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Dog&gt; dogs;</span><br><span class="line">    <span class="comment">// Map</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Cat&gt; cats;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDay;</span><br><span class="line">    <span class="comment">// 数组</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>properties 表示法。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置 Redis</span></span><br><span class="line"><span class="attr">spring.data.redis.host</span>=<span class="string">localhost</span></span><br><span class="line"><span class="attr">spring.data.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># properties 表示复杂对象</span></span><br><span class="line"><span class="attr">person.name</span>=<span class="string">张三</span></span><br><span class="line"><span class="attr">person.age</span>=<span class="string">35</span></span><br><span class="line"><span class="attr">person.birthDay</span>=<span class="string">1988/01/01 00:00:00</span></span><br><span class="line"><span class="attr">person.like</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">person.child.name</span>=<span class="string">李四</span></span><br><span class="line"><span class="attr">person.child.age</span>=<span class="string">12</span></span><br><span class="line"><span class="attr">person.child.birthDay</span>=<span class="string">2011/01/01</span></span><br><span class="line"><span class="attr">person.child.text[0]</span>=<span class="string">hello</span></span><br><span class="line"><span class="attr">person.child.text[1]</span>=<span class="string">world</span></span><br><span class="line"><span class="attr">person.dogs[0].name</span>=<span class="string">小黑</span></span><br><span class="line"><span class="attr">person.dogs[0].age</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">person.dogs[1].name</span>=<span class="string">小白</span></span><br><span class="line"><span class="attr">person.dogs[1].age</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">person.cats.cat1.name</span>=<span class="string">小蓝</span></span><br><span class="line"><span class="attr">person.cats.cat1.age</span>=<span class="string">2</span></span><br><span class="line"><span class="attr">person.cats.cat2.name</span>=<span class="string">小灰</span></span><br><span class="line"><span class="attr">person.cats.cat2.age</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><p>yaml 表示法。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、k: v，k v 之前是空格区分</span></span><br><span class="line"><span class="comment"># 2、属性有层级关系，使用下一行，空两个空格</span></span><br><span class="line"><span class="comment"># 3、左侧对齐的代表同一层级的属性</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment"># port: 8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">10MB</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置 Redis</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下边是一个单独文档</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># yaml 表示复杂对象</span></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">张三</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">35</span></span><br><span class="line">  <span class="attr">birth-day:</span> <span class="number">1988</span><span class="string">/01/01</span> <span class="number">00</span><span class="string">:00:00</span></span><br><span class="line">  <span class="attr">like:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">child:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">李四</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">12</span></span><br><span class="line">    <span class="attr">birth-day:</span> <span class="number">2011</span><span class="string">/01/01</span></span><br><span class="line">    <span class="comment"># text: [&quot;he\nllo&quot;,&#x27;wor\nld&#x27;]</span></span><br><span class="line">    <span class="attr">text:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;he\nllo&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;wor\nld&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">        cats:</span></span><br><span class="line"><span class="string">          cat1:</span></span><br><span class="line"><span class="string">            name: 小蓝</span></span><br><span class="line"><span class="string">            age: 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">          <span class="comment"># 对象也可用 &#123;&#125; 表示</span></span><br><span class="line">          <span class="attr">cat2:</span> &#123;<span class="attr">name:</span> <span class="string">小灰</span>,<span class="attr">age:</span> <span class="number">1</span>&#125;</span><br><span class="line">      <span class="bullet">-</span> <span class="string">&gt;</span></span><br><span class="line"><span class="string">        cats:</span></span><br><span class="line"><span class="string">        cat1:</span></span><br><span class="line"><span class="string">        name: 小蓝</span></span><br><span class="line"><span class="string">        age: 2</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">        <span class="comment"># 对象也可用 &#123;&#125; 表示</span></span><br><span class="line">        <span class="attr">cat2:</span> &#123;<span class="attr">name:</span> <span class="string">小灰</span>,<span class="attr">age:</span> <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">dogs:</span></span><br><span class="line">    <span class="comment"># 数组也可用 - 表示</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小黑</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">小白</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cats:</span></span><br><span class="line">    <span class="attr">cat1:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">小蓝</span></span><br><span class="line">      <span class="attr">age:</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对象也可用 &#123;&#125; 表示</span></span><br><span class="line">    <span class="attr">cat2:</span> &#123; <span class="attr">name:</span> <span class="string">小灰</span>, <span class="attr">age:</span> <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-2-3-细节"><a href="#1-4-2-3-细节" class="headerlink" title="1.4.2.3 细节"></a>1.4.2.3 细节</h5><ul><li><p>birthDay 推荐写为 birth-day。</p></li><li><p><strong>文本</strong>：</p><ul><li><p><strong>单引号</strong>不会转义【\n 则为普通字符串显示】。</p></li><li><p><strong>双引号</strong>会转义【\n 会显示为<strong>换行符</strong>】。</p></li></ul></li><li><p><strong>大文本</strong>：</p><ul><li><p><code>|</code> 开头，大文本写在下层，<strong>保留文本格式，换行符正确显示</strong>。</p></li><li><p><code>&gt;</code> 开头，大文本写在下层，折叠换行符。</p></li></ul></li></ul><p><strong>多文档合并</strong>：</p><ul><li>使用<code>\-\-\-</code>可以把多个 yaml 文档合并在一个文档中，每个文档区依然认为内容独立。</li></ul><h5 id="1-4-2-4-小技巧：lombok"><a href="#1-4-2-4-小技巧：lombok" class="headerlink" title="1.4.2.4. 小技巧：lombok"></a>1.4.2.4. 小技巧：lombok</h5><blockquote><p>简化 JavaBean 开发。自动生成构造器、getter&#x2F;setter、自动生成 Builder 模式等。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>@Data</code> 等注解。</p><h4 id="1-4-3-日志配置"><a href="#1-4-3-日志配置" class="headerlink" title="1.4.3 日志配置"></a>1.4.3 日志配置</h4><p>规范：项目开发不要编写 <code>System.out.println()</code>，应该用<strong>日志</strong>记录信息。</p><p><img src="https://img-blog.csdnimg.cn/ef743df4971244f78020559b5e876397.png" alt="日志配置"></p><h5 id="1-4-3-1-简介"><a href="#1-4-3-1-简介" class="headerlink" title="1.4.3.1 简介"></a>1.4.3.1 简介</h5><p>1、Spring 使用 <code>commons-logging</code> 作为内部日志，但底层日志实现是开放的。可对接其他日志框架。</p><ul><li>① spring5 及以后 commons-logging 被 spring 直接自己实现了。</li></ul><p>2、支持 <code>jul</code>，<code>log4j2</code>，<code>logback</code>。SpringBoot 提供了默认的控制台输出配置，也可以配置输出为文件。</p><p>3、<code>logback</code> 是默认使用的。</p><p>4、虽然<strong>日志框架很多</strong>，但是不用担心，使用 SpringBoot 的<strong>默认配置就能工作的很好</strong>。</p><p><strong>SpringBoot 怎么把日志默认配置好的</strong>。</p><p>1、每个 <code>starter</code> 场景，都会导入一个核心场景 <code>spring-boot-starter</code>。</p><p>2、核心场景引入了日志的所用功能 <code>spring-boot-starter-logging</code>。</p><p>3、默认使用了 <code>logback + slf4j</code> 组合作为默认底层日志。</p><p>4、<code>日志是系统一启动就要用</code>，<code>xxxAutoConfiguration</code> 是系统启动好了以后放好的组件，后来用的。</p><p>5、日志是利用<strong>监听器机制</strong>配置好的。<code>ApplicationListener</code>。</p><p>6、日志所有的配置都可以通过修改配置文件实现。以 <code>logging</code> 开始的所有配置。</p><h5 id="1-4-3-2-日志格式"><a href="#1-4-3-2-日志格式" class="headerlink" title="1.4.3.2 日志格式"></a>1.4.3.2 日志格式</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2023-09-14 20:24:43.709  INFO 96528 --- [main] o.s.b.w.e.t.TomcatWebServer              : Tomcat initialized with port(s): 8080 (http)</span><br><span class="line">2023-09-14 20:24:43.712  INFO 96528 --- [main] o.a.c.c.AprLifecycleListener             : Loaded Apache Tomcat Native library [2.0.5] using APR version [1.7.4].</span><br></pre></td></tr></table></figure><p>默认输出格式：</p><ul><li><p>时间和日期：毫秒级精度。</p></li><li><p>日志级别：<code>ERROR</code>, <code>WARN</code>, <code>INFO</code>, <code>DEBUG</code>, <code>TRACE</code>。</p></li><li><p>进程 ID。</p></li><li><p>---：消息分割符。</p></li><li><p>线程名：使用[]包含。</p></li><li><p>Logger 名：通常是产生日志的<strong>类名</strong>。</p></li><li><p>消息：日志记录的内容。</p></li></ul><p>注意：logback 没有 <code>FATAL</code> 级别，对应的是 <code>ERROR</code>。</p><p>默认值：参照：<code>spring-boot</code> 包 <code>additional-spring-configuration-metadata.json</code> 文件。</p><p>默认输出格式值：<code>%clr(%d&#123;$&#123;LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX&#125;&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;</code>。</p><p>可修改为：<code>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; %-5level [%thread] %logger&#123;15&#125; ===&gt; %msg%n</code>。</p><h5 id="1-4-3-3-记录日志"><a href="#1-4-3-3-记录日志" class="headerlink" title="1.4.3.3 记录日志"></a>1.4.3.3 记录日志</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br></pre></td></tr></table></figure><p>或者使用 Lombok 的@Slf4j 注解。</p><h5 id="1-4-3-4-日志级别"><a href="#1-4-3-4-日志级别" class="headerlink" title="1.4.3.4 日志级别"></a>1.4.3.4 日志级别</h5><ul><li><p>由低到高：<code>ALL, TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</code>。</p><ul><li><p><strong>只会打印指定级别及以上级别的日志</strong>。</p></li><li><p>ALL：打印所有日志。</p></li><li><p>TRACE：追踪框架详细流程日志，一般不使用。</p></li><li><p>DEBUG：开发调试细节日志。</p></li><li><p>INFO：关键、感兴趣信息日志。</p></li><li><p>WARN：警告但不是错误的信息日志，比如：版本过时。</p></li><li><p>ERROR：业务错误日志，比如出现各种异常。</p></li><li><p>FATAL：致命错误日志，比如 jvm 系统崩溃。</p></li><li><p>OFF：关闭所有日志记录。</p></li></ul></li><li><p>不指定级别的所有类，都使用 root 指定的级别作为默认级别。</p></li><li><p>SpringBoot 日志<strong>默认级别是 INFO</strong>。</p></li></ul><p>1、在 <code>application.properties/yaml</code> 中配置 <code>logging.level.&lt;logger-name&gt;=&lt;level&gt;</code>指定日志级别。</p><p>2、<code>level</code> 可取值范围：<code>TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF</code>，定义在 <code>LogLevel</code> 类中。</p><p>3、root 的 <code>logger-name</code> 叫 <code>root</code>，可以配置 <code>logging.level.root=warn</code>，代表所有未指定日志级别都使用 root 的 warn 级别。</p><h5 id="1-4-3-5-日志分组"><a href="#1-4-3-5-日志分组" class="headerlink" title="1.4.3.5 日志分组"></a>1.4.3.5 日志分组</h5><p>比较有用的技巧是：</p><p>将相关的 <code>logger</code> 分组在一起，统一配置。SpringBoot 也支持。比如：Tomcat 相关的日志统一设置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging.group.tomcat</span>=<span class="string">org.apache.catalina,org.apache.coyote,org.apache.tomcat</span></span><br><span class="line"><span class="attr">logging.level.tomcat</span>=<span class="string">trace</span></span><br></pre></td></tr></table></figure><p>SpringBoot 预定义两个组。</p><table><thead><tr><th>Name</th><th>Loggers</th></tr></thead><tbody><tr><td>web</td><td><code>org.springframework.core.codec</code>, <code>org.springframework.http</code>, <code>org.springframework.web</code>, <code>org.springframework.boot.actuate.endpoint.web</code>, <code>org.springframework.boot.web.servlet.ServletContextInitializerBeans</code></td></tr><tr><td>sql</td><td><code>org.springframework.jdbc.core</code>, <code>org.hibernate.SQL</code>, <code>org.jooq.tools.LoggerListener</code></td></tr></tbody></table><h5 id="1-4-3-6-文件输出"><a href="#1-4-3-6-文件输出" class="headerlink" title="1.4.3.6 文件输出"></a>1.4.3.6 文件输出</h5><p>SpringBoot 默认只把日志写在控制台，如果想额外记录到文件，可以在 <code>application.properties</code> 中添加 <code>logging.file.name</code> 或 <code>logging.file.path</code> 配置项。</p><table><thead><tr><th><code>logging.file.name</code></th><th><code>logging.file.path</code></th><th>示例</th><th>效果</th></tr></thead><tbody><tr><td>未指定</td><td>未指定</td><td>无</td><td>仅控制台输出。</td></tr><tr><td><strong>指定</strong></td><td>未指定</td><td><code>my.log</code></td><td>写入指定文件。可以<code>加路径</code>。</td></tr><tr><td>未指定</td><td><strong>指定</strong></td><td><code>./log</code></td><td>写入指定目录，文件名为 <code>spring.log</code>。</td></tr><tr><td><strong>指定</strong></td><td><strong>指定</strong></td><td>无</td><td>以 <code>logging.file.name</code> 为准。</td></tr></tbody></table><h5 id="1-4-3-7-文件归档与滚动切割"><a href="#1-4-3-7-文件归档与滚动切割" class="headerlink" title="1.4.3.7 文件归档与滚动切割"></a>1.4.3.7 文件归档与滚动切割</h5><blockquote><p>归档：每天的日志单独存到一个文档中。</p><p>切割：每个文件 10MB，超过大小切割成另外一个文件。</p></blockquote><p>1、每天的日志应该独立分割出来存档。如果使用 <code>logback</code>（SpringBoot 默认整合），可以通过 <code>application.properties/yaml</code> 文件指定日志滚动规则。</p><p>2、如果是其他日志系统，需要自行配置（添加 <code>log4j2.xml</code> 或 <code>log4j2-spring.xml</code>）。</p><p>3、支持的滚动规则设置如下。</p><table><thead><tr><th>配置项</th><th>描述</th></tr></thead><tbody><tr><td><code>logging.logback.rollingpolicy.file-name-pattern</code></td><td>日志存档的文件名格式（默认值：<code>$&#123;LOG_FILE&#125;.%d&#123;yyyy-MM-dd&#125;.%i.gz</code>）。</td></tr><tr><td><code>logging.logback.rollingpolicy.clean-history-on-start</code></td><td>应用启动时是否清除以前存档（默认值：<code>false</code>）。</td></tr><tr><td><code>logging.logback.rollingpolicy.max-file-size</code></td><td>存档前，每个日志文件的最大大小（默认值：<code>10MB</code>）。</td></tr><tr><td><code>logging.logback.rollingpolicy.total-size-cap</code></td><td>日志文件被删除之前，可以容纳的最大大小（默认值：<code>0B</code>）。设置 <code>1GB</code> 则磁盘存储超过 1GB 日志后就会删除旧日志文件。</td></tr><tr><td><code>logging.logback.rollingpolicy.max-history</code></td><td>日志文件保存的最大天数(默认值：<code>7</code>)。</td></tr></tbody></table><h5 id="1-4-3-8-自定义配置"><a href="#1-4-3-8-自定义配置" class="headerlink" title="1.4.3.8 自定义配置"></a>1.4.3.8 自定义配置</h5><p>通常配置 <code>application.properties</code> 就够了。当然也可以自定义。比如：</p><table><thead><tr><th>日志系统</th><th>自定义</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml or log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>如果可能，建议在日志配置中使用 <code>-spring</code> 变量（例如，<code>logback-spring.xml</code> 而不是 <code>logback.xml</code>）。如果使用标准配置文件，spring 无法完全控制日志初始化。</p><p>最佳实战：自己要写配置，配置文件名加上 <code>xxx-spring.xml</code>。</p><h5 id="1-4-3-9-切换日志组合"><a href="#1-4-3-9-切换日志组合" class="headerlink" title="1.4.3.9 切换日志组合"></a>1.4.3.9 切换日志组合</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果第三方框架使用了其他日志框架，如 jul，可以排除掉这个框架的默认日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-log4j2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>log4j2 支持 yaml 和 json 格式的配置文件。</p><table><thead><tr><th>格式</th><th>依赖</th><th>文件名</th></tr></thead><tbody><tr><td>YAML</td><td>com.fasterxml.jackson.core:jackson-databind、com.fasterxml.jackson.dataformat:jackson-dataformat-yaml</td><td>log4j2.yaml 或 log4j2.yml</td></tr><tr><td>JSON</td><td>com.fasterxml.jackson.core:jackson-databind</td><td>log4j2.json 或 log4j2.jsn</td></tr></tbody></table><h5 id="1-4-3-10-最佳实战"><a href="#1-4-3-10-最佳实战" class="headerlink" title="1.4.3.10 最佳实战"></a>1.4.3.10 最佳实战</h5><p>1、导入任何第三方框架，先排除它的日志包，因为 Boot 底层控制好了日志。</p><p>2、修改 <code>application.properties</code> 配置文件，就可以调整日志的所有行为。如果不够，可以编写日志框架自己的配置文件放在类路径下就行，比如 <code>logback-spring.xml</code>，<code>log4j2-spring.xml</code>。</p><p>3、如需对接<strong>专业日志系统</strong>，也只需要把 logback 记录的<strong>日志</strong>灌倒 <strong>kafka</strong> 之类的中间件，这和 SpringBoot 没关系，都是日志框架自己的配置，<strong>修改配置文件即可</strong>。</p><p>4、<strong>业务中使用 slf4j-api 记录日志，不要再用 System.out.println() 了</strong></p><h2 id="第-2-章-SpringBoot3-Web-开发"><a href="#第-2-章-SpringBoot3-Web-开发" class="headerlink" title="第 2 章 SpringBoot3-Web 开发"></a>第 2 章 SpringBoot3-Web 开发</h2><blockquote><p>SpringBoot 的 Web 开发能力，由 <strong>SpringMVC</strong> 提供。</p></blockquote><h3 id="2-1-WebMvcAutoConfiguration-原理"><a href="#2-1-WebMvcAutoConfiguration-原理" class="headerlink" title="2.1 WebMvcAutoConfiguration 原理"></a>2.1 WebMvcAutoConfiguration 原理</h3><h4 id="2-1-1-生效条件"><a href="#2-1-1-生效条件" class="headerlink" title="2.1.1 生效条件"></a>2.1.1 生效条件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这些自动配置之后</span></span><br><span class="line"><span class="meta">@AutoConfiguration(after = &#123; DispatcherServletAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">    TaskExecutionAutoConfiguration.class,</span></span><br><span class="line"><span class="meta">    ValidationAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="comment">// 如果是 Web 应用就生效，类型有 SERVLET、REACTIVE（响应式 Web）</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span></span><br><span class="line"><span class="comment">// 容器中没有这个 Bean，才生效，默认就是没有</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br><span class="line"><span class="comment">// 优先级</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class="line"><span class="meta">@ImportRuntimeHints(WebResourcesRuntimeHints.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-2-效果"><a href="#2-1-2-效果" class="headerlink" title="2.1.2 效果"></a>2.1.2 效果</h4><p>1、放了两个 Filter：</p><ul><li><p>① <code>HiddenHttpMethodFilter</code>：页面表单提交 Rest 请求（GET、POST、PUT、DELETE）。</p></li><li><p>② <code>FormContentFilter</code>：表单内容 Filter，GET（数据放 URL 后面）、POST（数据放请求体）请求可以携带数据，PUT、DELETE 的请求体数据会被忽略。</p></li></ul><p>2、给容器中放了 <code>WebMvcConfigurer</code> 组件：给 SpringMVC 添加各种定制功能。</p><ul><li><p>① 所有的功能最终会和配置文件进行绑定。</p></li><li><p>② WebMvcProperties：<code>spring.mvc</code> 配置文件。</p></li><li><p>③ WebProperties：<code>spring.web</code> 配置文件。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">// 额外导入了其他配置</span></span><br><span class="line"><span class="meta">@Import(EnableWebMvcConfiguration.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123; WebMvcProperties.class, WebProperties.class &#125;)</span></span><br><span class="line"><span class="meta">@Order(0)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">WebMvcAutoConfigurationAdapter</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>, ServletContextAware</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-3-WebMvcConfigurer-接口"><a href="#2-1-3-WebMvcConfigurer-接口" class="headerlink" title="2.1.3 WebMvcConfigurer 接口"></a>2.1.3 WebMvcConfigurer 接口</h4><p>提供了配置 SpringMVC 底层的所有组件入口。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/5f8d4aa8e9904dbd9b4491b745d936ff.png" alt="WebMvcConfigurer 接口"></p><h4 id="2-1-4-静态资源规则源码"><a href="#2-1-4-静态资源规则源码" class="headerlink" title="2.1.4 静态资源规则源码"></a>2.1.4 静态资源规则源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">this</span>.resourceProperties.isAddMappings())</span><br><span class="line">    &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;Default resource handling disabled&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getWebjarsPathPattern(),</span><br><span class="line">        <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line"></span><br><span class="line">    addResourceHandler(registry, <span class="built_in">this</span>.mvcProperties.getStaticPathPattern(),</span><br><span class="line">        (registration) -&gt; &#123;</span><br><span class="line">        registration.addResourceLocations(<span class="built_in">this</span>.resourceProperties.getStaticLocations());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.servletContext != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">ServletContextResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextResource</span>(<span class="built_in">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class="line">            registration.addResourceLocations(resource);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、规则一：访问 <code>/webjars/**</code> 路径就去 <code>classpath:/META-INF/resources/webjars/</code> 下找资源。</p><ul><li>① Maven 导入依赖。</li></ul><p>2、规则二：访问 <code>/**</code> 路径就去<code>静态资源默认的四个位置找资源</code>。</p><ul><li><p>① <code>classpath:/META-INF/resources/</code></p></li><li><p>② <code>classpath:/resources/</code></p></li><li><p>③ <code>classpath:/static/</code></p></li><li><p>④ <code>classpath:/public/</code></p></li></ul><p>3、规则三：<strong>静态资源默认都有缓存规则的设置</strong>。</p><ul><li><p>① 所有缓存的设置，直接通过<strong>配置文件</strong>：<code>spring.web</code>。</p></li><li><p>② cachePeriod：缓存周期，多久不用找服务器要新的，默认没有缓存周期，以秒为单位。</p></li><li><p>③ cacheControl：<strong>HTTP 缓存控制</strong>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching</a> 。</p></li><li><p>④ <strong>useLastModified</strong>：是否使用最后一次修改，配合 HTTP Cache 规则。</p></li></ul><blockquote><p>如果浏览器访问了一个静态资源 <strong>index.js</strong>，如果服务这个资源没有发生变化，下次访问的时候就可以直接让浏览器用自己缓存中的东西，而不用给服务器发请求。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">registration.setCachePeriod(getSeconds(<span class="built_in">this</span>.resourceProperties.getCache().getPeriod()));</span><br><span class="line">registration.setCacheControl(<span class="built_in">this</span>.resourceProperties.getCache().getCachecontrol().toHttpCacheControl());</span><br><span class="line">registration.setUseLastModified(<span class="built_in">this</span>.resourceProperties.getCache().isUseLastModified());</span><br></pre></td></tr></table></figure><h4 id="2-1-5-EnableWebMvcConfiguration-源码"><a href="#2-1-5-EnableWebMvcConfiguration-源码" class="headerlink" title="2.1.5 EnableWebMvcConfiguration 源码"></a>2.1.5 EnableWebMvcConfiguration 源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">SpringBoot 给容器中放 WebMvcConfigurationSupport 组件</span></span><br><span class="line"><span class="comment">如果自己放了 WebMvcConfigurationSupport 组件，SpringBoot 的 WebMvcAutoConfiguration 都会失效</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(WebProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">EnableWebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">DelegatingWebMvcConfiguration</span> <span class="keyword">implements</span> <span class="title class_">ResourceLoaderAware</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、<code>HandlerMapping</code>：根据请求路径 <code>/xxx</code> 找那个 handler 能处理请求。</p><ul><li><p>① <code>WelcomePageHandlerMapping</code>：</p><ul><li><p>(1) 访问 <code>/\*\*</code> 路径下的所有请求，都在以前四个静态资源路径下找，欢迎页也一样。</p></li><li><p>(2) 找 <code>index.html</code>：只要静态资源的位置有一个 <code>index.html</code> 页面，项目启动默认访问。</p></li></ul></li></ul><h4 id="2-1-6-为什么容器中放一个-WebMvcConfigurer-就能配置底层行为"><a href="#2-1-6-为什么容器中放一个-WebMvcConfigurer-就能配置底层行为" class="headerlink" title="2.1.6 为什么容器中放一个 WebMvcConfigurer 就能配置底层行为"></a>2.1.6 为什么容器中放一个 WebMvcConfigurer 就能配置底层行为</h4><p>1、WebMvcAutoConfiguration 是一个自动配置类，它里面有一个 <code>EnableWebMvcConfiguration</code>。</p><p>2、<code>EnableWebMvcConfiguration</code> 继承于 <code>DelegatingWebMvcConfiguration</code>，这两个都生效。</p><p>3、<code>DelegatingWebMvcConfiguration</code> 利用依赖注入把容器中所有 <code>WebMvcConfigurer</code> 注入进来。</p><p>4、别人调用 <code>DelegatingWebMvcConfiguration</code> 的方法配置底层规则，而它调用所有 <code>WebMvcConfigurer</code> 的配置底层方法。</p><h4 id="2-1-7-WebMvcConfigurationSupport"><a href="#2-1-7-WebMvcConfigurationSupport" class="headerlink" title="2.1.7 WebMvcConfigurationSupport"></a>2.1.7 WebMvcConfigurationSupport</h4><p>提供了很多的默认设置。</p><p>判断系统中是否有相应的类：如果有，就加入相应的 <code>HttpMessageConverter</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jackson2Present = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class="line">    ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class="line">jackson2XmlPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line">jackson2SmilePresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br></pre></td></tr></table></figure><h3 id="2-2-Web-场景"><a href="#2-2-Web-场景" class="headerlink" title="2.2 Web 场景"></a>2.2 Web 场景</h3><h4 id="2-2-1-自动配置"><a href="#2-2-1-自动配置" class="headerlink" title="2.2.1 自动配置"></a>2.2.1 自动配置</h4><p>1、整合 web 场景。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、引入了 <code>autoconfigure</code> 功能。</p><p>3、<code>@EnableAutoConfiguration</code> 注解使用 <code>@Import(AutoConfigurationImportSelector.class)</code> 批量导入组件。</p><p>4、加载 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件中配置的所有组件。</p><p>5、所有自动配置类如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.web.client.RestTemplateAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.embedded.EmbeddedWebServerFactoryCustomizerAutoConfiguration</span><br><span class="line"><span class="comment">// ==============以下是响应式 Web 场景==============</span></span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.HttpHandlerAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveMultipartAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.ReactiveWebServerFactoryAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebFluxAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.WebSessionIdResolverAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.error.ErrorWebFluxAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.ClientHttpConnectorAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration</span><br><span class="line"><span class="comment">// ===============================================</span></span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</span><br><span class="line">org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration</span><br></pre></td></tr></table></figure><p>6、绑定了配置文件的一堆配置项。</p><ul><li><p>① SpringMVC 的所有配置 <code>spring.mvc</code>。</p></li><li><p>② Web 场景通用配置 <code>spring.web</code>。</p></li><li><p>③ 文件上传配置 <code>spring.servlet.multipart</code>。</p></li><li><p>④ 服务器的配置 <code>server</code>，比如：编码方式</p></li></ul><h4 id="2-2-2-默认效果"><a href="#2-2-2-默认效果" class="headerlink" title="2.2.2 默认效果"></a>2.2.2 默认效果</h4><p>默认配置：</p><p>1、包含了 <code>ContentNegotiatingViewResolver</code> 和 <code>BeanNameViewResolver</code> 组件，<strong>方便视图解析</strong>。</p><p>2、<strong>默认的静态资源处理机制</strong>：静态资源放在 <code>static</code> 文件夹下即可直接访问。</p><p>3、<strong>自动注册</strong>了 <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> 组件，适配常见<strong>数据类型转换</strong>和<strong>格式化需求</strong>。</p><p>4、<strong>支持</strong> <code>HttpMessageConverters</code>，可以<strong>方便返回</strong> <code>json</code> 等<strong>数据类型</strong>。</p><p>5、<strong>注册</strong> <code>MessageCodesResolver</code>，方便<strong>国际化</strong>及错误消息处理。</p><p>6、<strong>支持静态</strong> <code>index.html</code>。</p><p>7、<strong>自动使用</strong> <code>ConfigurableWebBindingInitializer</code>，实现<strong>消息处理、数据绑定、类型转化、数据校验</strong>等功能。</p><blockquote><p><strong>重要</strong>：</p><ul><li><p>如果想保持 <strong>boot mvc 的默认配置</strong>，并且自定义更多的 mvc 配置，比如：<strong>interceptors</strong>, <strong>formatters</strong>, <strong>view controllers</strong> 等。可以使用 <strong>@Configuration</strong> 注解添加一个 <strong>WebMvcConfigurer</strong> 类型的配置类，并且不要标注 <strong>@EnableWebMvc</strong>。</p></li><li><p>如果想保持 boot mvc 的默认配置，但要自定义核心组件实例，比如：<strong>RequestMappingHandlerMapping</strong>, <strong>RequestMappingHandlerAdapter</strong>, 或 <strong>ExceptionHandlerExceptionResolver</strong>，给容器中放一个 <strong>WebMvcRegistrations</strong> 组件即可。</p></li><li><p>如果想全面接管 Spring MVC，**@Configuration** 标注一个配置类，并加上 <strong>@EnableWebMvc</strong> 注解，实现 <strong>WebMvcConfigurer</strong> 接口。</p></li></ul></blockquote><h3 id="2-3-静态资源"><a href="#2-3-静态资源" class="headerlink" title="2.3 静态资源"></a>2.3 静态资源</h3><h4 id="2-3-1-默认规则"><a href="#2-3-1-默认规则" class="headerlink" title="2.3.1 默认规则"></a>2.3.1 默认规则</h4><h5 id="2-3-1-1-静态资源映射"><a href="#2-3-1-1-静态资源映射" class="headerlink" title="2.3.1.1 静态资源映射"></a>2.3.1.1 静态资源映射</h5><p>静态资源映射规则在 <code>WebMvcAutoConfiguration</code> 中进行了定义：</p><p>1、<code>/webjars/**</code> 的所有路径资源都在 <code>classpath:/META-INF/resources/webjars/</code>。</p><p>2、<code>/**</code> 的所有路径资源都在 <code>classpath:/META-INF/resources/</code>、<code>classpath:/resources/</code>、<code>classpath:/static/</code>、<code>classpath:/public/</code>。</p><p>3、所有静态资源都定义了<code>缓存规则</code>。【浏览器访问过一次，就会缓存一段时间】，但此功能参数无默认值。</p><ul><li><p>① <code>period</code>：缓存间隔，默认 0 秒。</p></li><li><p>② <code>cacheControl</code>：缓存控制，默认无。</p></li><li><p>③ <code>useLastModified</code>：是否使用 lastModified 头，默认 false。</p></li></ul><h5 id="2-3-1-2-静态资源缓存"><a href="#2-3-1-2-静态资源缓存" class="headerlink" title="2.3.1.2 静态资源缓存"></a>2.3.1.2 静态资源缓存</h5><p>如前面所述</p><p>1、所有静态资源都定义了<code>缓存规则</code>。【浏览器访问过一次，就会缓存一段时间】，但此功能参数无默认值。</p><ul><li><p>① <code>period</code>：缓存间隔，默认 0 秒。</p></li><li><p>② <code>cacheControl</code>：缓存控制，默认无。</p></li><li><p>③ <code>useLastModified</code>：是否使用 lastModified 头，默认 false。</p></li></ul><h5 id="2-3-1-3-欢迎页"><a href="#2-3-1-3-欢迎页" class="headerlink" title="2.3.1.3 欢迎页"></a>2.3.1.3 欢迎页</h5><p>欢迎页规则在 <code>WebMvcAutoConfiguration</code> 中进行了定义：</p><p>1、在<strong>静态资源</strong>目录下找 <code>index.html</code> 模板页。</p><p>2、没有就在 <code>templates</code> 下找 <code>index.html</code> 模板页。</p><h5 id="2-3-1-4-Favicon"><a href="#2-3-1-4-Favicon" class="headerlink" title="2.3.1.4 Favicon"></a>2.3.1.4 Favicon</h5><p>1、在静态资源目录下找 <code>favicon.ico</code>。</p><h5 id="2-3-1-5-缓存实验"><a href="#2-3-1-5-缓存实验" class="headerlink" title="2.3.1.5 缓存实验"></a>2.3.1.5 缓存实验</h5><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 1、spring.web：</span></span><br><span class="line"><span class="comment"># ① 配置国际化的区域信息</span></span><br><span class="line"><span class="comment"># ② 静态资源策略（开启、处理链、缓存）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 开启静态资源映射规则</span></span><br><span class="line"><span class="attr">spring.web.resources.add-mappings</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 设置缓存</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.period</span>=<span class="string">3600</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 缓存详细合并项控制，覆盖 period 配置</span></span><br><span class="line"><span class="comment"># 浏览照第一次请求服务器，服务器告诉浏览器此资源缓存 7200 秒，7200 秒以内的所有此资源访问不用发给服务器请求，7200 秒以后发请求给服务器</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.max-age</span>=<span class="string">7200</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 共享缓存</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.cachecontrol.cache-public</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 使用资源 last-modified 时间，来对比服务器和浏览照的资源是否相同没有变化，相同返回 304</span></span><br><span class="line"><span class="attr">spring.web.resources.cache.use-last-modified</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-自定义静态资源规则"><a href="#2-3-2-自定义静态资源规则" class="headerlink" title="2.3.2 自定义静态资源规则"></a>2.3.2 自定义静态资源规则</h4><blockquote><p>自定义静态资源路径、自定义缓存规则。</p></blockquote><h5 id="2-3-2-1-配置方式"><a href="#2-3-2-1-配置方式" class="headerlink" title="2.3.2.1 配置方式"></a>2.3.2.1 配置方式</h5><p><code>spring.mvc</code>：静态资源访问前缀路径。</p><p><code>spring.web</code>：</p><ul><li><p>静态资源目录。</p></li><li><p>静态资源缓存策略。</p></li></ul><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、spring.mvc</span></span><br><span class="line"><span class="comment"># ① 自定义 webjars 路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.webjars-path-pattern</span>=<span class="string">/webjars/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ② 静态资源访问路径前缀</span></span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=<span class="string">/static/**</span></span><br></pre></td></tr></table></figure><h5 id="2-3-2-2-代码方式"><a href="#2-3-2-2-代码方式" class="headerlink" title="2.3.2.2 代码方式"></a>2.3.2.2 代码方式</h5><blockquote><p>容器中只要有一个 WebMvcConfigurer 组件，配置的底层行为都会生效。</p><p>@EnableWebMvc，禁用 boot 的默认配置。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.CacheControl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 禁用 Spring Boot 的默认配置</span></span><br><span class="line"><span class="comment">// @EnableWebMvc</span></span><br><span class="line"><span class="comment">// 这是一个配置类，给容器中放一个 WebMvcConfigurer 组件，就能自定义底层</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 保留默认规则</span></span><br><span class="line">        WebMvcConfigurer.<span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增自定义规则</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/image/, classpath:/static/&quot;</span>)</span><br><span class="line">                .setCacheControl(CacheControl.maxAge(<span class="number">7200</span>, TimeUnit.SECONDS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.CacheControl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 禁用 Spring Boot 的默认配置</span></span><br><span class="line"><span class="comment">// @EnableWebMvc</span></span><br><span class="line"><span class="comment">// 这是一个配置类，给容器中放一个 WebMvcConfigurer 组件，就能自定义底层</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 配置静态资源</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> registry 注册表</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 保留默认规则</span></span><br><span class="line">                WebMvcConfigurer.<span class="built_in">super</span>.addResourceHandlers(registry);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 新增自定义规则</span></span><br><span class="line">                registry.addResourceHandler(<span class="string">&quot;/static/**&quot;</span>)</span><br><span class="line">                        .addResourceLocations(<span class="string">&quot;classpath:/image/, classpath:/static/&quot;</span>)</span><br><span class="line">                        .setCacheControl(CacheControl.maxAge(<span class="number">7200</span>, TimeUnit.SECONDS));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-路径匹配"><a href="#2-4-路径匹配" class="headerlink" title="2.4 路径匹配"></a>2.4 路径匹配</h3><blockquote><p><strong>Spring5.3</strong> 之后加入了更多的<strong>请求路径匹配</strong>的实现策略。</p><p>以前只支持 <strong>AntPathMatcher</strong> 策略, 现在提供了 <strong>PathPatternParser</strong> 策略，并且可以指定到底使用那种策略。</p></blockquote><h4 id="2-4-1-Ant-风格路径用法"><a href="#2-4-1-Ant-风格路径用法" class="headerlink" title="2.4.1 Ant 风格路径用法"></a>2.4.1 Ant 风格路径用法</h4><p>Ant 风格的路径模式语法具有以下规则：</p><ul><li><p><code>\*</code>：表示<strong>任意数量的字符</strong>。</p></li><li><p><code>?</code>：表示<strong>任意一个字符</strong>。</p></li><li><p><code>\*\*</code>：表示<strong>任意数量的目录</strong>。</p></li><li><p><code>&#123;&#125;</code>：表示一个命名的模式<strong>占位符</strong>。</p></li><li><p><code>[]</code>：表示<code>字符集合</code>，例如<code>[a-z]</code>表示小写字母。</p></li></ul><p>例如：</p><ul><li><p><code>\*.html</code> 匹配任意名称，扩展名为 <code>.html</code> 的文件。</p></li><li><p>&#x2F;<code>folder1/\*/\*.java</code> 匹配在 <code>folder1</code> 目录下的任意两级目录下的 <code>.java</code> 文件。</p></li><li><p><code>/folder2/\*\*/\*.jsp</code> 匹配在 <code>folder2</code> 目录下任意目录深度的 <code>.jsp</code> 文件。</p></li><li><p><code>/&#123;type&#125;/&#123;id&#125;.html</code> 匹配任意文件名为 <code>&#123;id&#125;.html</code>，在任意命名的 <code>&#123;type&#125;</code> 目录下的文件。</p></li></ul><p>注意：Ant 风格的路径模式语法中的特殊字符需要转义，例如：</p><ul><li><p>要匹配文件路径中的星号，则需要转义为<code>\\\\*</code>。</p></li><li><p>要匹配文件路径中的问号，则需要转义为 <code>\\\\?</code>。</p></li></ul><h4 id="2-4-2-模式切换"><a href="#2-4-2-模式切换" class="headerlink" title="2.4.2 模式切换"></a>2.4.2 模式切换</h4><blockquote><p><strong>AntPathMatcher</strong> 与 <strong>PathPatternParser</strong>。</p><p><strong>PathPatternParser</strong> 在 jmh 基准测试下，有 6<del>8 倍吞吐量提升，降低 30%</del>40% 空间分配率。</p><p><strong>PathPatternParser</strong> 兼容 <strong>AntPathMatcher</strong> 语法，并支持更多类型的路径模式。</p><p><strong>PathPatternParser</strong> “<strong>**</strong>“ <strong>多段匹配</strong>的支持<strong>仅允许在模式末尾使用</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认使用新版 PathPatternParser 进行路径匹配</span></span><br><span class="line"><span class="comment">     * 不能匹配 ** 在中间的情况，其他情况和 antPathMatcher语法兼容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> uri</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/a*/b?/**/&#123;p1:[a-f]+&#125;/**&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(HttpServletRequest request, <span class="meta">@PathVariable(&quot;p1&quot;)</span> String path)</span></span><br><span class="line">    &#123;</span><br><span class="line">        log.info(<span class="string">&quot;路径变量 p1：&#123;&#125;&quot;</span>, path);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> uri;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><ul><li><p>使用默认的路径匹配规则，是由 <code>PathPatternParser</code> 提供的。</p></li><li><p>如果路径中间需要有 **，替换成 ant 风格路径。</p></li></ul><h3 id="2-5-内容协商"><a href="#2-5-内容协商" class="headerlink" title="2.5 内容协商"></a>2.5 内容协商</h3><blockquote><p>一套系统适配多端数据返回。<br><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/a10328234c3c4ffe9427243e4dc250a1.png" alt="内容协商"></p></blockquote><h4 id="2-5-1-多端内容适配"><a href="#2-5-1-多端内容适配" class="headerlink" title="2.5.1 多端内容适配"></a>2.5.1 多端内容适配</h4><h5 id="2-5-1-1-默认规则"><a href="#2-5-1-1-默认规则" class="headerlink" title="2.5.1.1 默认规则"></a>2.5.1.1 默认规则</h5><p>1、<strong>SpringBoot 多端内容适配</strong>。</p><ul><li><p>① <strong>基于请求头内容协商</strong>：（默认开启）</p><ul><li><p>(1)客户端向服务端发送请求，携带 HTTP 标准的 <strong>Accept 请求头</strong>。</p><ul><li><p>[1] <strong>Accept</strong>: <code>application/json</code>、<code>text/xml</code>、<code>text/yaml</code>。</p></li><li><p>[2] 服务端根据客户端<strong>请求头期望的数据类型</strong>进行<strong>动态返回</strong>。</p></li></ul></li><li><p>② <strong>基于请求参数内容协商</strong>：（<strong>需要开启</strong>）</p><ul><li><p>[1] 发送请求 <code>GET /projects/spring-boot?format=json</code>。</p></li><li><p>[2] 匹配到 <code>@GetMapping(&quot;/projects/spring-boot&quot;)</code>。</p></li><li><p>[3] 根据<strong>参数协商</strong>，优先返回 json 类型数据 <strong>【需要开启参数匹配设置】</strong>。</p></li><li><p>[4] 发送请求 <code>GET /projects/spring-boot?format=xml</code>，优先返回 xml 类型数据。</p></li></ul></li></ul></li></ul><h5 id="2-5-1-2-效果演示"><a href="#2-5-1-2-效果演示" class="headerlink" title="2.5.1.2 效果演示"></a>2.5.1.2 效果演示</h5><blockquote><p>请求同一个接口，可以返回 json 和 xml 不同格式数据。</p></blockquote><p>1、引入支持写出 xml 内容依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 支持返回 XML 格式数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、标注注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;</span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 可以写出为 xml 文档</span></span><br><span class="line"><span class="meta">@JacksonXmlRootElement</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 和配置文件 person 前缀的所有配置进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;user&quot;)</span></span><br><span class="line"><span class="comment">// 自动生成无参构造器</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="comment">// 自动生成全参构造器</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="comment">// 自动生成 JavaBean 属性的 getter/setter</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String role;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、开启基于请求参数的内容协商。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启基于请求参数的内容协商功能，默认参数名：format，默认此功能不开启</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定内容协商时使用的参数名，默认是 format</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></table></figure><p>4、效果。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/12a8e780a3514c57962704b02f0276a7.png" alt="效果演示"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/d56d80cd944e45f88fd907fb1d59aa26.png" alt="效果演示"></p><h5 id="2-5-1-3-配置协商规则与支持类型"><a href="#2-5-1-3-配置协商规则与支持类型" class="headerlink" title="2.5.1.3 配置协商规则与支持类型"></a>2.5.1.3 配置协商规则与支持类型</h5><p>1、修改<strong>内容协商方式</strong>。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启基于请求参数的内容协商功能，默认参数名：format，默认此功能不开启</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.favor-parameter</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 指定内容协商时使用的参数名，默认是 format</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.parameter-name</span>=<span class="string">type</span></span><br></pre></td></tr></table></figure><p>2、大多数 MediaType 都是开箱即用的。也可以<strong>自定义内容类型</strong>，例如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加一种新的内容类型</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yml</span>=<span class="string">text/yml</span></span><br></pre></td></tr></table></figure><h4 id="2-5-2-自定义内容返回"><a href="#2-5-2-自定义内容返回" class="headerlink" title="2.5.2 自定义内容返回"></a>2.5.2 自定义内容返回</h4><h5 id="2-5-2-1-增加-yaml-返回支持"><a href="#2-5-2-1-增加-yaml-返回支持" class="headerlink" title="2.5.2.1 增加 yaml 返回支持"></a>2.5.2.1 增加 yaml 返回支持</h5><p>导入依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 支持返回 YAML 格式数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-yaml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把对象写出成 YAML。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.web.bean.User;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonProcessingException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;MYXH&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;520.ILY!&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">21</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;1735350920@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">userYaml</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">        System.out.println(<span class="string">&quot;userYaml = &quot;</span> + userYaml);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加一种新的内容类型</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yaml</span>=<span class="string">text/yaml</span></span><br><span class="line"><span class="attr">spring.mvc.contentnegotiation.media-types.yml</span>=<span class="string">text/yml</span></span><br></pre></td></tr></table></figure><p>增加 <code>HttpMessageConverter</code> 组件，专门负责把对象写出为 yaml 格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.web.component.MyYamlHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 禁用 Spring Boot 的默认配置</span></span><br><span class="line"><span class="comment">// @EnableWebMvc</span></span><br><span class="line"><span class="comment">// 这是一个配置类，给容器中放一个 WebMvcConfigurer 组件，就能自定义底层</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 配置一个能把对象转为 yaml 的 messageConverter</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> converters 最初是转换器的空列表</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configureMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span></span><br><span class="line">            &#123;</span><br><span class="line">                converters.add(<span class="keyword">new</span> <span class="title class_">MyYamlHttpMessageConverter</span>());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-5-2-2-思考：如何增加其他"><a href="#2-5-2-2-思考：如何增加其他" class="headerlink" title="2.5.2.2 思考：如何增加其他"></a>2.5.2.2 思考：如何增加其他</h5><ul><li><p>配置媒体类型支持:</p><ul><li><code>spring.mvc.contentnegotiation.media-types.yaml=text/yaml</code>。</li></ul></li><li><p>编写对应的 <code>HttpMessageConverter</code>，要告诉 Boot 这个支持的媒体类型。</p><ul><li>按照 HttpMessageConverter 的示例写法。</li></ul></li><li><p>把 MessageConverter 组件加入到底层。</p><ul><li>容器中放一个 <code>WebMvcConfigurer</code> 组件，并配置底层的 <code>MessageConverter</code>。</li></ul></li></ul><h5 id="2-5-2-3-HttpMessageConverter-的示例写法"><a href="#2-5-2-3-HttpMessageConverter-的示例写法" class="headerlink" title="2.5.2.3 HttpMessageConverter 的示例写法"></a>2.5.2.3 HttpMessageConverter 的示例写法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.yaml.YAMLFactory;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.dataformat.yaml.YAMLGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpInputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpOutputMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.AbstractHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotReadableException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageNotWritableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * 自定义的 YAML HTTP 消息转换器</span></span><br><span class="line"><span class="comment"> * 用于将对象转换为 YAML 格式的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyYamlHttpMessageConverter</span> <span class="keyword">extends</span> <span class="title class_">AbstractHttpMessageConverter</span>&lt;Object&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 将对象转换为 YAML 的 ObjectMapper</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyYamlHttpMessageConverter</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 告诉 SpringBoot 这个 MessageConverter 支持哪种媒体类型</span></span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">MediaType</span>(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;yaml&quot;</span>, StandardCharsets.UTF_8),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">MediaType</span>(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;yml&quot;</span>, StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 YAMLFactory 并禁用写入文档起始标记</span></span><br><span class="line">        <span class="type">YAMLFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">YAMLFactory</span>().</span><br><span class="line">                disable(YAMLGenerator.Feature.WRITE_DOC_START_MARKER);</span><br><span class="line">        <span class="built_in">this</span>.objectMapper = <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断该转换器是否支持将指定类型的对象转换为 YAML</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 要测试支持的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果支持转换，则返回 true；否则返回 false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; clazz)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 只要是对象类型，不是基本类型和数组类型，都支持</span></span><br><span class="line">        <span class="keyword">return</span> !clazz.isPrimitive() &amp;&amp; !clazz.isArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从 HTTP 输入消息中读取数据并将其转换为指定类型的对象</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestBody</span>&#125; 把对象怎么读进来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz        要返回的对象类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputMessage 要从中读取的 HTTP 输入消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException                     IO 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMessageNotReadableException Http 消息不可读异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">readInternal</span><span class="params">(Class&lt;?&gt; clazz, HttpInputMessage inputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotReadableException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.readValue(inputMessage.getBody(), clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定对象写入 HTTP 输出消息</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> <span class="doctag">@ResponseBody</span>&#125; 把对象怎么写出去</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodReturnValue 要写入输出消息的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputMessage     要写入的 HTTP 输出消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException                     IO 异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> HttpMessageNotWritableException Http 消息不可写入异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">writeInternal</span><span class="params">(Object methodReturnValue, HttpOutputMessage outputMessage)</span> <span class="keyword">throws</span> IOException, HttpMessageNotWritableException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用 try-with-resources 语句以自动关闭流</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> outputMessage.getBody())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.objectMapper.writeValue(os, methodReturnValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-3-内容协商原理-HttpMessageConverter"><a href="#2-5-3-内容协商原理-HttpMessageConverter" class="headerlink" title="2.5.3 内容协商原理 HttpMessageConverter"></a>2.5.3 内容协商原理 HttpMessageConverter</h4><blockquote><p><strong>HttpMessageConverter</strong> 怎么工作？合适工作？</p><p>定制 <strong>HttpMessageConverter</strong> 来实现多端内容协商。</p><p>编写 <strong>WebMvcConfigurer</strong> 提供的 <strong>configureMessageConverters</strong> 底层，修改底层的 <strong>MessageConverter</strong>。</p></blockquote><h5 id="2-5-3-1-ResponseBody-由-HttpMessageConverter-处理"><a href="#2-5-3-1-ResponseBody-由-HttpMessageConverter-处理" class="headerlink" title="2.5.3.1 @ResponseBody 由 HttpMessageConverter 处理"></a>2.5.3.1 @ResponseBody 由 HttpMessageConverter 处理</h5><blockquote><p>标注了 <strong>@ResponseBody</strong> 的返回值 将会由支持它的 <strong>HttpMessageConverter</strong> 写给浏览器。</p></blockquote><p>1、如果 controller 方法的返回值标注了 <code>@ResponseBody</code> 注解。</p><ul><li><p>① 请求进来先来到 <code>DispatcherServlet</code> 的 <code>doDispatch()</code> 进行处理。</p></li><li><p>② 找到一个 <code>HandlerAdapter</code> 适配器，利用适配器执行目标方法。</p></li><li><p>③ <code>RequestMappingHandlerAdapter</code> 来执行，调用 <code>invokeHandlerMethod()</code> 来执行目标方法。</p></li><li><p>④ 目标方法执行之前，准备好两个东西。</p><ul><li><p>(1) <code>HandlerMethodArgumentResolver</code>：参数解析器，确定目标方法每个参数值。</p></li><li><p>(2) <code>HandlerMethodReturnValueHandler</code>：返回值处理器，确定目标方法的返回值改怎么处理。</p></li></ul></li><li><p>⑤ <code>RequestMappingHandlerAdapter</code> 里面的 <code>invokeAndHandle()</code> 真正执行目标方法。</p></li><li><p>⑥ 目标方法执行完成，会返回<strong>返回值对象</strong>。</p></li><li><p>⑦ <strong>找到一个合适的返回值处理器</strong> <code>HandlerMethodReturnValueHandler</code>。</p></li><li><p>⑧ 最终找到 <code>RequestResponseBodyMethodProcessor</code> 能处理标注了 <code>@ResponseBody</code> 注解的方法。</p></li><li><p>⑨ <code>RequestResponseBodyMethodProcessor</code> 调用 <code>writeWithMessageConverters</code>，利用 <code>MessageConverter</code> 把返回值写出去。</p></li></ul><blockquote><p>上面解释：**@ResponseBody** 由 <strong>HttpMessageConverter</strong> 处理。</p></blockquote><p>2、<code>HttpMessageConverter</code> 会<strong>先进行内容协商</strong>。</p><ul><li><p>① 遍历所有的 <code>MessageConverter</code> 看谁支持这种<strong>内容类型的数据</strong>。</p></li><li><p>② 默认 <code>MessageConverter</code> 有以下 10 个。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/58a61c3be2674784b514287884e87995.png" alt="@ResponseBody 由 HttpMessageConverter 处理"></p></li><li><p>③ 最终因为要 <code>json</code> 所以 <code>MappingJackson2HttpMessageConverter</code> 支持写出 json。</p></li><li><p>④ jackson 用 <code>ObjectMapper</code> 把对象写出去。</p></li></ul><h5 id="2-5-3-2-WebMvcAutoConfiguration-提供几种默认-HttpMessageConverters"><a href="#2-5-3-2-WebMvcAutoConfiguration-提供几种默认-HttpMessageConverters" class="headerlink" title="2.5.3.2 WebMvcAutoConfiguration 提供几种默认 HttpMessageConverters"></a>2.5.3.2 WebMvcAutoConfiguration 提供几种默认 HttpMessageConverters</h5><ul><li><p><code>EnableWebMvcConfiguration</code> 通过 <code>addDefaultHttpMessageConverters</code> 添加了默认的 <code>MessageConverter</code>，如下：</p><ul><li><p><code>ByteArrayHttpMessageConverter</code>：支持字节数据读写。</p></li><li><p><code>StringHttpMessageConverter</code>：支持字符串读写。</p></li><li><p><code>ResourceHttpMessageConverter</code>：支持资源读写。</p></li><li><p><code>ResourceRegionHttpMessageConverter</code>: 支持分区资源写出。</p></li><li><p><code>AllEncompassingFormHttpMessageConverter</code>：支持表单 xml&#x2F;json 读写。</p></li><li><p><code>MappingJackson2HttpMessageConverter</code>：支持请求响应体 Json 读写。</p></li></ul></li></ul><p>默认 <code>MessageConverter</code> 有以下 8 个：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/b7ae4301f317437283c75ec7330235bd.png" alt="WebMvcAutoConfiguration 提供几种默认 HttpMessageConverters"></p><blockquote><p>系统提供默认的 MessageConverter 功能有限，仅用于 json 或者普通返回数据。额外增加新的内容协商功能，必须增加新的 <strong>HttpMessageConverter</strong>。</p></blockquote><h3 id="2-6-模板引擎"><a href="#2-6-模板引擎" class="headerlink" title="2.6 模板引擎"></a>2.6 模板引擎</h3><blockquote><p>由于 <strong>SpringBoot</strong> 使用了<strong>嵌入式 Servlet 容器</strong>。所以 <strong>JSP</strong> 默认是<strong>不能使用的</strong>。</p><p>如果需要<strong>服务端页面渲染</strong>，优先考虑使用<strong>模板引擎</strong>。</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/87e293d7ccb74b9bb36241a6aaddf0dd.png" alt="模板引擎"></p><p><strong>模板引擎</strong>页面默认放在 <strong>src&#x2F;main&#x2F;resources&#x2F;templates</strong>。</p><p><strong>SpringBoot</strong> 包含以下模板引擎的自动配置。</p><ul><li><p>FreeMarker</p></li><li><p>Groovy</p></li><li><p><strong>Thymeleaf</strong></p></li><li><p>Mustache</p></li></ul><p><strong>Thymeleaf 官网</strong>：<a href="https://www.thymeleaf.org/">https://www.thymeleaf.org/</a> 。</p><h4 id="2-6-1-Thymeleaf-整合"><a href="#2-6-1-Thymeleaf-整合" class="headerlink" title="2.6.1 Thymeleaf 整合"></a>2.6.1 Thymeleaf 整合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>自动配置原理：</p><p>1、开启了 <code>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration</code> 自动配置。</p><p>2、属性绑定在 <code>ThymeleafProperties</code> 中，对应配置文件 <code>spring.thymeleaf</code> 内容。</p><p>3、所有的模板页面默认在 <code>classpath:/templates/</code> 文件夹下。</p><p>4、默认效果。</p><ul><li><p>① 所有的模板页面在 <code>classpath:/templates/</code> 下面找。</p></li><li><p>② 找后缀名为 <code>.html</code> 的页面。</p></li></ul><h4 id="2-6-2-基础语法"><a href="#2-6-2-基础语法" class="headerlink" title="2.6.2 基础语法"></a>2.6.2 基础语法</h4><h5 id="2-6-2-1-核心用法"><a href="#2-6-2-1-核心用法" class="headerlink" title="2.6.2.1 核心用法"></a>2.6.2.1 核心用法</h5><p><code>th:xxx</code>：<strong>动态渲染指定的 html 标签属性值、或者 th 指令（遍历、判断等）</strong>。</p><ul><li><p><code>th:text</code>：标签体内文本值渲染。</p><ul><li><code>th:utext</code>：不会转义，显示为 html 原本的样子。</li></ul></li><li><p><code>th:属性</code>：标签指定属性渲染。</p></li><li><p><code>th:attr</code>：标签任意属性渲染。</p></li><li><p><code>th:if</code>、<code>th:each</code> <code>...</code> ：其他 th 指令。</p></li><li><p>例如：</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>欢迎页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，<span class="tag">&lt;<span class="name">span</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>1、Thymeleaf 基础语法<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.1 th:text：替换标签体的内容，会转义<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">      1.2 th:utext: 替换标签体的内容，不会转义 html 标签，真正显示为 html</span><br><span class="line">      该有的样式</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:utext</span>=<span class="string">&quot;$&#123;message&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.3 th:任意 html 属性，动态替换任意属性的值<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">th:src</span>=<span class="string">&quot;@&#123;$&#123;imageUrl&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;大户爱.png&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;width:300px;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;大户爱&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.4 th:attr：任意属性指定<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">th:attr</span>=<span class="string">&quot;src=@&#123;$&#123;imageUrl&#125;&#125;,style=$&#123;style&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;大户爱.png&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;大户爱&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.5 th：其他指令<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">th:src</span>=<span class="string">&quot;@&#123;$&#123;imageUrl&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">th:style</span>=<span class="string">&quot;$&#123;style&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">th:if</span>=<span class="string">&quot;$&#123;show&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;大户爱.png&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;大户爱&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.6 @&#123;&#125; 专门用来取各种路径<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">      <span class="attr">th:src</span>=<span class="string">&quot;@&#123;$&#123;imageUrl&#125;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;大户爱.png&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;width:300px;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">alt</span>=<span class="string">&quot;大户爱&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.7 字符串转换为大写<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;#strings.toUpperCase(name)&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>1.8 字符串拼接<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;&#x27;前缀&#x27;+name+&#x27;后缀&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;|前缀$&#123;name&#125;后缀|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>表达式</code>：<strong>用来动态取值</strong>。</p><ul><li><p><code>$\&#123;\&#125;</code>：**变量取值；使用 model 共享给页面的值都直接用 ${}**。</p></li><li><p><code>@&#123;&#125;</code>：<strong>url 路径</strong>。</p></li><li><p><code>#&#123;&#125;</code>：国际化消息。</p></li><li><p><code>~&#123;&#125;</code>：片段引用。</p></li><li><p><code>\*&#123;&#125;</code>：变量选择：需要配合 th:object 绑定对象。</p></li></ul><p><code>系统工具&amp;内置对象</code>：<strong>详细文档</strong>。</p><ul><li><p><code>param</code>：请求参数对象。</p></li><li><p><code>session</code>：session 对象。</p></li><li><p><code>application</code>：application 对象。</p></li><li><p><code>#execInfo</code>：模板执行信息。</p></li><li><p><code>#messages</code>：国际化消息。</p></li><li><p><code>#uris</code>：uri&#x2F;url 工具。</p></li><li><p><code>#conversions</code>：类型转换工具。</p></li><li><p><code>#dates</code>：日期工具，是 <code>java.util.Date</code> 对象的工具类。</p></li><li><p><code>#calendars</code>：类似 #dates，只不过是 <code>java.util.Calendar</code> 对象的工具类。</p></li><li><p><code>#temporals</code>：JDK8+ <code>java.time</code> API 工具类。</p></li><li><p><code>#numbers</code>：数字操作工具。</p></li><li><p><code>#strings</code>：字符串操作。</p></li><li><p><code>#objects</code>：对象操作。</p></li><li><p><code>#bools</code>：bool 操作。</p></li><li><p><code>#arrays</code>：array 工具。</p><p>-<code>#lists</code>：list 工具。</p></li><li><p><code>#sets</code>：set 工具。</p></li><li><p><code>#maps</code>：map 工具。</p></li><li><p><code>#aggregates</code>：集合聚合工具（sum、avg）。</p></li><li><p><code>#ids</code>：id 生成工具。</p></li></ul><h5 id="2-6-2-2-语法示例"><a href="#2-6-2-2-语法示例" class="headerlink" title="2.6.2.2 语法示例"></a>2.6.2.2 语法示例</h5><p><strong>表达式</strong>：</p><ul><li><p>变量取值：<code>$&#123;...&#125;</code></p></li><li><p>url 取值：<code>@&#123;...&#125;</code></p></li><li><p>国际化消息：<code>#&#123;...&#125;</code></p></li><li><p>变量选择：<code>\*&#123;...&#125;</code></p></li><li><p>片段引用: <code>~&#123;...&#125;</code></p></li></ul><p><strong>常见</strong>：</p><ul><li><p>文本：<code>&#39;one text&#39;</code>，<code>&#39;another one!&#39;</code>，…</p></li><li><p>数字：<code>0</code>, <code>12</code>, <code>3.0</code>, <code>15.6</code>, …</p></li><li><p>布尔：<code>true</code>、<code>false</code></p></li><li><p>null: <code>null</code></p></li><li><p>变量名：<code>one</code>，<code>sometext</code>，<code>main</code> …</p></li></ul><p><strong>文本操作</strong>：</p><ul><li><p>拼串：<code>+</code></p></li><li><p>文本替换：<code>| The name is $&#123;name&#125; |</code></p></li></ul><p><strong>布尔操作</strong>：</p><ul><li><p>二进制运算：<code>and</code>, <code>or</code></p></li><li><p>取反：<code>!</code>, <code>not</code></p></li></ul><p><strong>比较运算</strong>：</p><ul><li><p>比较：<code>&lt;</code>，<code>&gt;</code>，<code>&lt;=</code>，<code>&gt;=</code>（<code>lt</code>，<code>gt</code>，<code>le</code>,<code>ge</code>）</p></li><li><p>等值运算：<code>==</code>，<code>!=</code>（<code>eq</code>，<code>ne</code>）</p></li></ul><p><strong>条件运算</strong>：</p><ul><li><p>if-then：<code>(if)?(then)</code></p></li><li><p>if-then-else：<code>(if)?(then):(else)</code></p></li><li><p>default：<code>(value)?:(defaultValue)</code></p></li></ul><p><strong>特殊语法</strong>：</p><ul><li>无操作：<code>\_</code></li></ul><p><strong>所有以上都可以嵌套组合</strong>。</p><h5 id="2-6-2-3-属性设置"><a href="#2-6-2-3-属性设置" class="headerlink" title="2.6.2.3 属性设置"></a>2.6.2.3 属性设置</h5><p>1、<code>th:href=&quot;@&#123;/product/list&#125;&quot;</code></p><p>2、<code>th:attr=&quot;class=$&#123;active&#125;&quot;</code></p><p>3、<code>th:attr=&quot;src=@&#123;/images/image.png&#125;,title=$&#123;logo&#125;,alt=#&#123;logo&#125;&quot;</code></p><p>4、<code>th:checked=&quot;$&#123;user.active&#125;&quot;</code></p><h5 id="2-6-2-4-遍历"><a href="#2-6-2-4-遍历" class="headerlink" title="2.6.2.4 遍历"></a>2.6.2.4 遍历</h5><blockquote><p>语法：<strong>th:each&#x3D;”元素名,迭代状态 : ${集合}”</strong></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">&quot;sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导航区使用公共部分进行替换 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ~&#123; 模板名 :: 片段名&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;common :: myheader&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>角色<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;col&quot;</span>&gt;</span>状态信息<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user, stats : $&#123;userList&#125;&quot;</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;td th:text=&quot;$&#123;user.userName&#125;&quot;&gt;&lt;/td&gt; --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;user.password&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:text</span>=<span class="string">&quot;|$&#123;user.age&#125;($&#123;user.age &gt;= 18 ? &#x27;成年&#x27; : &#x27;未成年&#x27;&#125;)|&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#strings.isEmpty(user.email)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:text</span>=<span class="string">&quot;&#x27;联系不上&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(user.email)&#125;&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;root&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">                root 用户</span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span></span><br><span class="line">                管理员</span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;test&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span></span><br><span class="line">                测试员</span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;user&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-light&quot;</span>&gt;</span></span><br><span class="line">                用户</span><br><span class="line">              <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">              index（索引）：[[$&#123;stats.index&#125;]]<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">              count（计数）：[[$&#123;stats.count&#125;]]<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">              size（大小）：[[$&#123;stats.size&#125;]]<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">              current（当前对象）：[[$&#123;stats.current&#125;]]<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">              even(true)/odd(false)（奇数/偶数）：[[$&#123;stats.even&#125;]]<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">              first（第一个）：[[$&#123;stats.first&#125;]]<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">              last（最后的）：[[$&#123;stats.last&#125;]]<span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">integrity</span>=<span class="string">&quot;sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>iterStat 有以下属性：</p><ul><li><p>index：当前遍历元素的索引，从 0 开始。</p></li><li><p>count：当前遍历元素的索引，从 1 开始。</p></li><li><p>size：需要遍历元素的总数量。</p></li><li><p>current：当前正在遍历的元素对象。</p></li><li><p>even&#x2F;odd：是否为偶数&#x2F;奇数行。</p></li><li><p>first：是否第一个元素。</p></li><li><p>last：是否最后一个元素。</p></li></ul><h5 id="2-6-2-5-判断"><a href="#2-6-2-5-判断" class="headerlink" title="2.6.2.5 判断"></a>2.6.2.5 判断</h5><p><strong>th:if</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;|$&#123;user.age&#125;($&#123;user.age &gt;= 18 ? &#x27;成年&#x27; : &#x27;未成年&#x27;&#125;)|&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;#strings.isEmpty(user.email)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;&#x27;联系不上&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;not #strings.isEmpty(user.email)&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>th:switch</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">th:switch</span>=<span class="string">&quot;$&#123;user.role&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;root&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span>&gt;</span></span><br><span class="line">    root 用户</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;admin&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-secondary&quot;</span>&gt;</span></span><br><span class="line">    管理员</span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;test&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-success&quot;</span>&gt;</span>测试员<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">th:case</span>=<span class="string">&quot;&#x27;user&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-light&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-6-2-6-属性优先级"><a href="#2-6-2-6-属性优先级" class="headerlink" title="2.6.2.6 属性优先级"></a>2.6.2.6 属性优先级</h5><ul><li><p>片段。</p></li><li><p>遍历。</p></li><li><p>判断。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user, stats : $&#123;userList&#125;&quot;</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;td th:text=&quot;$&#123;user.userName&#125;&quot;&gt;&lt;/td&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>顺序</th><th>特性</th><th>属性</th></tr></thead><tbody><tr><td>1</td><td>片段包含。</td><td><code>th:insert</code>、<code>th:replace</code></td></tr><tr><td>2</td><td>遍历。</td><td><code>th:each</code></td></tr><tr><td>3</td><td>判断。</td><td><code>th:if</code>、<code>th:unless</code>、<code>th:switch</code>、<code>th:case</code></td></tr><tr><td>4</td><td>定义本地变量。</td><td><code>th:object</code>、<code>th:with</code></td></tr><tr><td>5</td><td>通用方式属性修改。</td><td><code>th:attr</code>、<code>th:attrprepend</code>、<code>th:attrappend</code></td></tr><tr><td>6</td><td>指定属性修改。</td><td><code>th:value</code>、<code>th:href</code>、<code>th:src</code>、<code>...</code></td></tr><tr><td>7</td><td>文本值。</td><td><code>th:text</code>、<code>th:utext</code></td></tr><tr><td>8</td><td>片段指定。</td><td><code>th:fragment</code></td></tr><tr><td>9</td><td>片段移除。</td><td><code>th:remove</code></td></tr></tbody></table><h5 id="2-6-2-7-行内写法"><a href="#2-6-2-7-行内写法" class="headerlink" title="2.6.2.7 行内写法"></a>2.6.2.7 行内写法</h5><p><code>[[...]]</code> 或 <code>[(...)]</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user, stats : $&#123;userList&#125;&quot;</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;td th:text=&quot;$&#123;user.userName&#125;&quot;&gt;&lt;/td&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>[[$&#123;user.password&#125;]]<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-6-2-8-变量选择"><a href="#2-6-2-8-变量选择" class="headerlink" title="2.6.2.8 变量选择"></a>2.6.2.8 变量选择</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user, stats : $&#123;userList&#125;&quot;</span> <span class="attr">th:object</span>=<span class="string">&quot;$&#123;user&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;*&#123;userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user, stats : $&#123;userList&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">&quot;row&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.userName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-6-2-9-模板布局"><a href="#2-6-2-9-模板布局" class="headerlink" title="2.6.2.9 模板布局"></a>2.6.2.9 模板布局</h5><ul><li><p>定义模板：<code>th:fragment</code></p></li><li><p>引用模板：<code>~&#123;templatename::selector&#125;</code></p></li><li><p>插入模板：<code>th:insert</code>、<code>th:replace</code></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导航区使用公共部分进行替换 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ~&#123; 模板名 :: 片段名&#125; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">&quot;~&#123;common :: myheader&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-6-2-10-devtools"><a href="#2-6-2-10-devtools" class="headerlink" title="2.6.2.10 devtools"></a>2.6.2.10 devtools</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 热启动功能 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改页面后，<code>ctrl+F9</code> 刷新效果。</p><p>Java 代码的修改，如果 <code>devtools</code> 热启动了，可能会引起一些 bug，难以排查。</p><h3 id="2-7-国际化"><a href="#2-7-国际化" class="headerlink" title="2.7 国际化"></a>2.7 国际化</h3><p>国际化的自动配置参照 <code>MessageSourceAutoConfiguration</code>。</p><p><strong>实现步骤</strong>：</p><p>1、Spring Boot 在类路径根下查找 <code>messages</code> 资源绑定文件。文件名为：<code>messages.properties</code>。</p><p>2、多语言可以定义多个消息文件，命名为 <code>messages\_区域代码.properties</code>。例如：</p><ul><li><p>① <code>messages.properties</code>：默认。</p></li><li><p>② <code>messages_zh_CN.properties</code>：中文环境。</p></li><li><p>③ <code>messages_en_US.properties</code>：英语环境。</p></li></ul><p>3、在<strong>程序中可以自动注入</strong> <code>MessageSource</code> 组件，获取国际化的配置项值。</p><p>4、在<strong>页面中可以使用表达式</strong> <code>#&#123;&#125;</code> 获取国际化的配置项值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.MessageSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//适配服务端清染，前后不分离模式</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WelcomeController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 国际化获取消息的组件</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/message&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">(HttpServletRequest request)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">locale</span> <span class="operator">=</span> request.getLocale();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 利用代码的方式获取国际化配置文件中指定的配置项的值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">login</span> <span class="operator">=</span> messageSource.getMessage(<span class="string">&quot;login&quot;</span>, <span class="literal">null</span>, locale);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> login;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-8-错误处理"><a href="#2-8-错误处理" class="headerlink" title="2.8 错误处理"></a>2.8 错误处理</h3><h4 id="2-8-1-默认机制"><a href="#2-8-1-默认机制" class="headerlink" title="2.8.1 默认机制"></a>2.8.1 默认机制</h4><blockquote><p><strong>错误处理的自动配置</strong>都在 <strong>ErrorMvcAutoConfiguration</strong> 中，两大核心机制：</p><ul><li><p>1、SpringBoot 会<strong>自适应</strong>处理错误，<strong>响应页面</strong>或 <strong>JSON 数据</strong>。</p></li><li><p>2、<strong>SpringMVC 的错误处理机制</strong>依然保留，<strong>MVC 处理不了</strong>，才会<strong>交给 boot 进行处理</strong>。</p></li></ul></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/047b394477b042fcb849f1cce23f79d1.png" alt="默认机制"></p><ul><li><p>发生错误以后，转发给&#x2F;error 路径，SpringBoot 在底层写好一个 BasicErrorController 的组件，专门处理这个请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回 HTML</span></span><br><span class="line"><span class="meta">@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections</span><br><span class="line">        .unmodifiableMap(getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.TEXT_HTML)));</span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request, response, status, model);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (modelAndView != <span class="literal">null</span>) ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回 ResponseEntity，JSON</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; <span class="title function_">error</span><span class="params">(HttpServletRequest request)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">HttpStatus</span> <span class="variable">status</span> <span class="operator">=</span> getStatus(request);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (status == HttpStatus.NO_CONTENT)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(status);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; body = getErrorAttributes(request, getErrorAttributeOptions(request, MediaType.ALL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(body, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>错误页面是这么解析到的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、解析错误的自定义视图地址</span></span><br><span class="line"><span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolveErrorView(request, response, status, model);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、如果解析不到错误页面的地址，默认的错误页就是 error</span></span><br><span class="line"><span class="keyword">return</span> (modelAndView != <span class="literal">null</span>) ? modelAndView : <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="string">&quot;error&quot;</span>, model);</span><br></pre></td></tr></table></figure></li><li><p>容器中专门有一个错误视图解析器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnBean(DispatcherServlet.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(ErrorViewResolver.class)</span></span><br><span class="line">DefaultErrorViewResolver <span class="title function_">conventionErrorViewResolver</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultErrorViewResolver</span>(<span class="built_in">this</span>.applicationContext, <span class="built_in">this</span>.resources);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SpringBoot 解析自定义错误页的默认规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">resolveErrorView</span><span class="params">(HttpServletRequest request, HttpStatus status, Map&lt;String, Object&gt; model)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> resolve(String.valueOf(status.value()), model);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modelAndView == <span class="literal">null</span> &amp;&amp; SERIES_VIEWS.containsKey(status.series()))</span><br><span class="line">    &#123;</span><br><span class="line">        modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ModelAndView <span class="title function_">resolve</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">errorViewName</span> <span class="operator">=</span> <span class="string">&quot;error/&quot;</span> + viewName;</span><br><span class="line">    <span class="type">TemplateAvailabilityProvider</span> <span class="variable">provider</span> <span class="operator">=</span> <span class="built_in">this</span>.templateAvailabilityProviders.getProvider(errorViewName,</span><br><span class="line">        <span class="built_in">this</span>.applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (provider != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(errorViewName, model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resolveResource(errorViewName, model);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ModelAndView <span class="title function_">resolveResource</span><span class="params">(String viewName, Map&lt;String, Object&gt; model)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (String location : <span class="built_in">this</span>.resources.getStaticLocations())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="built_in">this</span>.applicationContext.getResource(location);</span><br><span class="line">            resource = resource.createRelative(viewName + <span class="string">&quot;.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (resource.exists())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>(<span class="keyword">new</span> <span class="title class_">HtmlResourceView</span>(resource), model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>容器中有一个默认的名为 error 的 view，提供了默认白页功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean(name = &quot;error&quot;)</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;error&quot;)</span></span><br><span class="line"><span class="keyword">public</span> View <span class="title function_">defaultErrorView</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.defaultErrorView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装了 JSON 格式的错误信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(value = ErrorAttributes.class, search = SearchStrategy.CURRENT)</span></span><br><span class="line"><span class="keyword">public</span> DefaultErrorAttributes <span class="title function_">errorAttributes</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultErrorAttributes</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>规则：</p><p>1、<strong>解析一个错误页</strong>。</p><ul><li><p>① 如果发生了 500、404、503、403 这些错误。</p><ul><li><p>(1) 如果有<strong>模板引擎</strong>，默认在 <code>classpath:/templates/error/精确码.html</code>。</p></li><li><p>(2) 如果没有模板引擎，在静态资源文件夹下找<code>精确码.html</code>。</p></li></ul></li><li><p>② 如果匹配不到<code>精确码.html</code> 这些精确的错误页，就去找 <code>5xx.html</code>，<code>4xx.html</code> <strong>模糊匹配</strong>。</p><ul><li><p>(1) 如果有模板引擎，默认在 <code>classpath:/templates/error/5xx.html</code>。</p></li><li><p>(2) 如果没有模板引擎，在静态资源文件夹下找 <code>5xx.html</code>。</p></li></ul></li></ul><p>2、如果模板引擎路径 <code>templates</code> 下有 <code>error.html</code> 页面，就直接渲染。</p><h4 id="2-8-2-自定义错误响应"><a href="#2-8-2-自定义错误响应" class="headerlink" title="2.8.2 自定义错误响应"></a>2.8.2 自定义错误响应</h4><h5 id="2-8-2-1-自定义-json-响应"><a href="#2-8-2-1-自定义-json-响应" class="headerlink" title="2.8.2.1 自定义 json 响应"></a>2.8.2.1 自定义 json 响应</h5><blockquote><p>使用 @ControllerAdvice + @ExceptionHandler 进行统一异常处理。</p></blockquote><h5 id="2-8-2-2-自定义页面响应"><a href="#2-8-2-2-自定义页面响应" class="headerlink" title="2.8.2.2 自定义页面响应"></a>2.8.2.2 自定义页面响应</h5><blockquote><p>根据 boot 的错误页面规则，自定义页面模板。</p></blockquote><h4 id="2-8-3-最佳实战"><a href="#2-8-3-最佳实战" class="headerlink" title="2.8.3 最佳实战"></a>2.8.3 最佳实战</h4><ul><li><p><strong>前后分离</strong>。</p><ul><li>后台发生的所有错误，<code>@ControllerAdvice + @ExceptionHandler</code> 进行统一异常处理。</li></ul></li><li><p><strong>服务端页面渲染</strong>。</p><ul><li><p><code>不可预知的一些，HTTP 码表示的服务器或客户端错误</code>。</p><ul><li><p>给 <code>classpath:/templates/error/</code> 下面，放常用精确的错误码页面。<code>500.html</code>，<code>404.html</code>。</p></li><li><p>给 <code>classpath:/templates/error/</code> 下面，放通用模糊匹配的错误码页面。<code>5xx.html</code>，<code>4xx.html</code>。</p></li></ul></li><li><p><strong>发生业务错误</strong>。</p><ul><li><p><strong>核心业务</strong>，每一种错误，都应该代码控制，<strong>跳转到自己定制的错误页</strong>。</p></li><li><p><strong>通用业务</strong>，<code>classpath:/templates/error.html</code> 页面，<strong>显示错误信息</strong>。</p></li></ul></li></ul></li></ul><p>在 HTML 页面、JSON 数据中，可用的 Model 数据如下。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/01b942689c7149daafd242ccc2a346ab.png" alt="最佳实战"></p><h3 id="2-9-嵌入式容器"><a href="#2-9-嵌入式容器" class="headerlink" title="2.9 嵌入式容器"></a>2.9 嵌入式容器</h3><blockquote><p><strong>Servlet 容器</strong>：管理、运行 <strong>Servlet 组件</strong>（Servlet、Filter、Listener）的环境，一般指<strong>服务器</strong>。</p></blockquote><h4 id="2-9-1-自动配置原理"><a href="#2-9-1-自动配置原理" class="headerlink" title="2.9.1 自动配置原理"></a>2.9.1 自动配置原理</h4><blockquote><ul><li><p>SpringBoot 默认嵌入 Tomcat 作为 Servlet 容器。</p></li><li><p><strong>自动配置类</strong>是 <strong>ServletWebServerFactoryAutoConfiguration</strong>，<strong>EmbeddedWebServerFactoryCustomizerAutoConfiguration</strong>。</p></li><li><p>自动配置类开始分析功能，<strong>xxxAutoConfiguration</strong>。</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfiguration</span></span><br><span class="line"><span class="meta">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(ServletRequest.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication(type = Type.SERVLET)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ServerProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123;ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,</span></span><br><span class="line"><span class="meta">    ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,</span></span><br><span class="line"><span class="meta">    ServletWebServerFactoryConfiguration.EmbeddedJetty.class,</span></span><br><span class="line"><span class="meta">    ServletWebServerFactoryConfiguration.EmbeddedUndertow.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletWebServerFactoryAutoConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、<code>ServletWebServerFactoryAutoConfiguration</code> 自动配置了嵌入式容器场景。</p><p>2、绑定了 <code>ServerProperties</code> 配置类，所有和服务器有关的配置 <code>server</code>。</p><p>3、<code>ServletWebServerFactoryAutoConfiguration</code> 导入了嵌入式的三大服务器 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code>。</p><ul><li><p>① 导入 <code>Tomcat</code>、<code>Jetty</code>、<code>Undertow</code> 都有条件注解，系统中有这个类才行（也就是导了包）。</p></li><li><p>② 默认 <code>Tomcat</code> 配置生效。给容器中放 TomcatServletWebServerFactory。</p></li><li><p>③ 都给容器中 <code>ServletWebServerFactory</code> 放了一个 <strong>Web 服务器工厂</strong>（<strong>造 Web 服务器的</strong>）。</p></li><li><p>④ <strong>Web 服务器工厂都有一个功能</strong>，<code>getWebServe</code>r 获取 Web 服务器。</p></li><li><p>⑤ TomcatServletWebServerFactory 创建了 tomcat。</p></li></ul><p>4、ServletWebServerFactory 什么时候会创建 webServer 出来。</p><p>5、<code>ServletWebServerApplicationContext</code> ioc 容器，启动的时候会调用创建 Web 服务器。</p><p>6、Spring <strong>容器刷新</strong>（<strong>启动</strong>）的时候，会预留一个时机，刷新子容器，<code>onRefresh()</code>。</p><p>7、refresh() 容器刷新，十二个步骤的刷新，子容器会调用 <code>onRefresh()</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRefresh</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">super</span>.onRefresh();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        createWebServer();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;Unable to start web server&quot;</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Web 场景的 Spring 容器启动，在 onRefresh 的时候，会调用创建 Web 服务器的方法。</p><p>Web 服务器的创建是通过 WebServerFactory 搞定的。容器中又会根据导了什么包条件注解，启动相关的 服务器配置，默认 <strong>EmbeddedTomcat</strong> 会给容器中放一个 <strong>TomcatServletWebServerFactory</strong>，导致项目启动，自动创建出 Tomcat。</p></blockquote><h4 id="2-9-2-自定义"><a href="#2-9-2-自定义" class="headerlink" title="2.9.2 自定义"></a>2.9.2 自定义</h4><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/d0624c15035347bfaab059c412115a01.png" alt="自定义"></p><blockquote><p>切换服务器。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除 Tomcat 依赖项 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 改为使用 Jetty --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-9-3-最佳实践"><a href="#2-9-3-最佳实践" class="headerlink" title="2.9.3 最佳实践"></a>2.9.3 最佳实践</h4><p><strong>用法</strong>：</p><ul><li><p>修改 <code>server</code> 下的相关配置就可以修改<strong>服务器参数</strong>。</p></li><li><p>通过给容器中放一个 <code>ServletWebServerFactory</code>，来禁用掉 SpringBoot 默认放的服务器工厂，实现自定义嵌入<strong>任意服务器</strong>。</p></li></ul><h3 id="2-10-全面接管-SpringMVC"><a href="#2-10-全面接管-SpringMVC" class="headerlink" title="2.10 全面接管 SpringMVC"></a>2.10 全面接管 SpringMVC</h3><blockquote><ul><li><p>SpringBoot 默认配置好了 SpringMVC 的所有常用特性。</p></li><li><p>如果需要全面接管 SpringMVC 的所有配置并<strong>禁用默认配置</strong>，仅需要编写一个 <strong>WebMvcConfigurer</strong> 配置类，并标注 <strong>@EnableWebMvc</strong> 即可。</p></li><li><p>全手动模式。</p><ul><li><p><strong>@EnableWebMvc</strong> : 禁用默认配置。</p></li><li><p><strong>WebMvcConfigurer</strong> 组件：定义 MVC 的底层行为。</p></li></ul></li></ul></blockquote><h4 id="2-10-1-WebMvcAutoConfiguration-到底自动配置了哪些规则"><a href="#2-10-1-WebMvcAutoConfiguration-到底自动配置了哪些规则" class="headerlink" title="2.10.1 WebMvcAutoConfiguration 到底自动配置了哪些规则"></a>2.10.1 WebMvcAutoConfiguration 到底自动配置了哪些规则</h4><blockquote><p>SpringMVC 自动配置场景配置了如下所有<strong>默认行为</strong>。</p></blockquote><p>1、<code>WebMvcAutoConfiguration</code> Web 场景的自动配置类。</p><ul><li><p>① 支持 RESTful 的 filter：HiddenHttpMethodFilter。</p></li><li><p>② 支持非 POST 请求，请求体携带数据：FormContentFilter。</p></li><li><p>③ 导入 <code>EnableWebMvcConfiguration</code>：</p><ul><li><p>(1) <code>RequestMappingHandlerAdapter</code>。</p></li><li><p>(2) <code>WelcomePageHandlerMapping</code>：<strong>欢迎页功能</strong>支持（模板引擎目录、静态资源目录放 index.html），项目访问 &#x2F; 就默认展示这个页面。</p></li><li><p>(3) <code>RequestMappingHandlerMapping</code>：找每个请求由谁处理的映射关系。</p></li><li><p>(4) <code>ExceptionHandlerExceptionResolver</code>：默认的异常解析器。</p></li><li><p>(5) <code>LocaleResolver</code>：国际化解析器。</p></li><li><p>(6) <code>ThemeResolver</code>：主题解析器。</p></li><li><p>(7) <code>FlashMapManager</code>：临时数据共享。</p></li><li><p>(8) <code>FormattingConversionService</code>：数据格式化、类型转化。</p></li><li><p>(9) <code>Validator</code>：数据校验 <code>JSR303</code> 提供的数据校验功能。</p></li><li><p>(10) <code>WebBindingInitializer</code>：请求参数的封装与绑定。</p></li><li><p>(11) <code>ContentNegotiationManager</code>：内容协商管理器。</p></li></ul></li><li><p>④ <code>WebMvcAutoConfigurationAdapter</code> 配置生效，它是一个 <code>WebMvcConfigurer</code>，定义 mvc 底层组件。</p><ul><li><p>(1) 定义好 <code>WebMvcConfigurer</code> <strong>底层组件默认功能</strong>，<strong>所有功能详见列表</strong>。</p></li><li><p>(2) 视图解析器：<code>InternalResourceViewResolver</code>。</p></li><li><p>(3) 视图解析器：<code>BeanNameViewResolver</code>，<strong>视图名</strong>（<strong>controller 方法的返回值字符串</strong>）就是组件名。</p></li><li><p>(4) 内容协商解析器：<code>ContentNegotiatingViewResolver</code>。</p></li><li><p>(5) 请求上下文过滤器：<code>RequestContextFilter</code>，任意位置直接获取当前请求。</p></li><li><p>(6) 静态资源链规则。</p></li><li><p>(7) <code>ProblemDetailsExceptionHandler</code>：错误详情。</p><ul><li>[1] SpringMVC 内部场景异常被它捕获。</li></ul></li></ul></li><li><p>⑤ 定义了 MVC 默认的底层行为: <code>WebMvcConfigurer</code>。</p></li></ul><h4 id="2-10-2-EnableWebMvc-禁用默认行为"><a href="#2-10-2-EnableWebMvc-禁用默认行为" class="headerlink" title="2.10.2 @EnableWebMvc 禁用默认行为"></a>2.10.2 @EnableWebMvc 禁用默认行为</h4><p>1、<code>@EnableWebMvc</code> 给容器中导入 <code>DelegatingWebMvcConfiguration</code> 组件，<br>是 <code>WebMvcConfigurationSupport</code>。</p><p>2、<code>WebMvcAutoConfiguration</code> 有一个核心的条件注解，<code>@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</code>，容器中没有 <code>WebMvcConfigurationSupport</code>，<code>WebMvcAutoConfiguration</code> 才生效。</p><p>3、 @EnableWebMvc 导入 <code>WebMvcConfigurationSupport</code> 导致 <code>WebMvcAutoConfiguration</code> 失效，导致禁用了默认行为。</p><blockquote><p>@EnableWebMVC 禁用了 Mvc 的自动配置。</p><p>WebMvcConfigurer 定义 SpringMVC 底层组件的功能类。</p></blockquote><h4 id="2-10-3-WebMvcConfigurer-功能"><a href="#2-10-3-WebMvcConfigurer-功能" class="headerlink" title="2.10.3 WebMvcConfigurer 功能"></a>2.10.3 WebMvcConfigurer 功能</h4><blockquote><p>定义扩展 SpringMVC 底层功能。</p></blockquote><table><thead><tr><th>提供方法</th><th>核心参数</th><th>功能</th><th>默认</th></tr></thead><tbody><tr><td>addFormatters</td><td>FormatterRegistry</td><td><strong>格式化器</strong>：支持属性上 <code>@NumberFormat</code> 和<code>@DatetimeFormat</code> 的数据类型转换。</td><td>GenericConversionService</td></tr><tr><td>getValidator</td><td>无</td><td><strong>数据校验</strong>：校验 Controller 上使用 <code>@Valid</code> 标注的参数合法性，需要导入 <code>starter-validator</code>。</td><td>无</td></tr><tr><td><code>addInterceptors</code></td><td>InterceptorRegistry</td><td><strong>拦截器</strong>：拦截收到的所有请求。</td><td>无</td></tr><tr><td><code>configureContentNegotiation</code></td><td>ContentNegotiationConfigurer</td><td><strong>内容协商</strong>：支持多种数据格式返回，需要配合支持这种类型的 <code>HttpMessageConverter</code>。</td><td>支持 json。</td></tr><tr><td><code>configureMessageConverters</code></td><td><code>List&lt;HttpMessageConverter&lt;?&gt;&gt;</code></td><td><strong>消息转换器</strong>：标注 <code>@ResponseBody</code> 的返回值会利用 <code>MessageConverter</code> 直接写出去。</td><td>8 个，支持 <code>byte</code>, <code>string</code>, <code>multipart</code>, <code>resource</code>, <code>json</code>。</td></tr><tr><td>addViewControllers</td><td>ViewControllerRegistry</td><td><strong>视图映射</strong>：直接将请求路径与物理视图映射，用于无 Java 业务逻辑的直接视图页渲染。</td><td><code>&lt;mvc:view-controller&gt;</code></td></tr><tr><td>configureViewResolvers</td><td>ViewResolverRegistry</td><td><strong>视图解析器</strong>：逻辑视图转为物理视图。</td><td>iewResolverComposite</td></tr><tr><td>addResourceHandlers</td><td>ResourceHandlerRegistry</td><td><strong>静态资源处理</strong>：静态资源路径映射、缓存控制。</td><td>ResourceHandlerRegistry</td></tr><tr><td>configureDefaultServletHandling</td><td>DefaultServletHandlerConfigurer</td><td><strong>默认 Servlet</strong>：可以覆盖 Tomcat 的 <code>DefaultServlet</code>，让 <code>DispatcherServlet</code> 拦截 <code>/</code>。</td><td>无</td></tr><tr><td>configurePathMatch</td><td>PathMatchConfigurer</td><td><strong>路径匹配</strong>：自定义 URL 路径匹配，可以自动为所有路径加上指定前缀，比如 <code>/api</code>。</td><td>无</td></tr><tr><td><code>configureAsyncSupport</code></td><td>AsyncSupportConfigurer</td><td><strong>异步支持</strong>：</td><td><code>TaskExecutionAutoConfiguration</code></td></tr><tr><td>addCorsMappings</td><td>CorsRegistry</td><td><strong>跨域</strong>：</td><td>无</td></tr><tr><td>addArgumentResolvers</td><td><code>List&lt;HandlerMethodArgumentResolver&gt;</code></td><td><strong>参数解析器</strong>：</td><td>mvc 默认提供。</td></tr><tr><td>addReturnValueHandlers</td><td><code>List&lt;HandlerMethodReturnValueHandler&gt;</code></td><td>返回值解析器：</td><td>mvc 默认提供。</td></tr><tr><td>configureHandlerExceptionResolvers</td><td>List<HandlerExceptionResolver></td><td><strong>异常处理器</strong>：</td><td>默认 3 个，ExceptionHandlerExceptionResolver、ResponseStatusExceptionResolver、DefaultHandlerExceptionResolver。</td></tr><tr><td>getMessageCodesResolver</td><td>无</td><td><strong>消息码解析器</strong>：国际化使用</td><td>无</td></tr></tbody></table><h3 id="2-11-最佳实践"><a href="#2-11-最佳实践" class="headerlink" title="2.11 最佳实践"></a>2.11 最佳实践</h3><blockquote><p>SpringBoot 已经默认配置好了 <strong>Web 开发场景</strong>常用功能，直接使用即可。</p></blockquote><h4 id="2-11-1-三种方式"><a href="#2-11-1-三种方式" class="headerlink" title="2.11.1 三种方式"></a>2.11.1 三种方式</h4><table><thead><tr><th>方式</th><th>用法</th><th>效果</th></tr></thead><tbody><tr><td><strong>全自动</strong></td><td>直接编写控制器逻辑。</td><td>全部使用<strong>自动配置默认效果</strong>。</td></tr><tr><td><strong>半自动</strong></td><td>注解 <code>@Configuration</code> + 配置 <code>WebMvcConfigurer</code> + 配置 <code>WebMvcRegistrations</code>，<strong>不要标注</strong> 注解 <code>@EnableWebMvc</code>。</td><td><strong>保留自动配置效果</strong>，<strong>手动设置部分功能</strong>，定义 MVC 底层组件。</td></tr><tr><td><strong>全手动</strong></td><td>注解 <code>@Configuration</code> + 配置 <code>WebMvcConfigurer</code>，<strong>标注</strong>注解 <code>@EnableWebMvc</code>。</td><td><strong>禁用自动配置效果</strong>，<strong>全手动设置</strong>。</td></tr></tbody></table><p>总结：</p><p><strong>给容器中写一个配置类</strong> <code>@Configuration</code> <strong>实现</strong> <code>WebMvcConfigurer</code> <strong>但是不要标注</strong> <code>@EnableWebMvc</code> <strong>注解</strong>，<strong>实现半自动的效果</strong>。</p><h4 id="2-11-2-两种模式"><a href="#2-11-2-两种模式" class="headerlink" title="2.11.2 两种模式"></a>2.11.2 两种模式</h4><p>1、<code>前后分离模式</code>：<code>@RestController</code> 响应 JSON 数据。</p><p>2、<code>前后不分离模式</code>：<code>@Controller</code> + Thymeleaf 模板引擎。</p><h3 id="2-12-Web-新特性"><a href="#2-12-Web-新特性" class="headerlink" title="2.12 Web 新特性"></a>2.12 Web 新特性</h3><h4 id="2-12-1-Problemdetails"><a href="#2-12-1-Problemdetails" class="headerlink" title="2.12.1 Problemdetails"></a>2.12.1 Problemdetails</h4><blockquote><p>RFC 7807: <a href="https://www.rfc-editor.org/rfc/rfc7807">https://www.rfc-editor.org/rfc/rfc7807</a></p><p><strong>错误信息</strong>返回新格式。</p></blockquote><p>原理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="comment">// 配置一个属性 spring.mvc.problemdetails.enabled=true</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.mvc.problemdetails&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;)</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ProblemDetailsErrorHandlingConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(ResponseEntityExceptionHandler.class)</span></span><br><span class="line">    ProblemDetailsExceptionHandler <span class="title function_">problemDetailsExceptionHandler</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProblemDetailsExceptionHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1、<code>ProblemDetailsExceptionHandler</code> 是一个 <code>@ControllerAdvice</code> 集中处理系统异常。</p><p>2、处理以下异常。如果系统出现以下异常，会被 SpringBoot 支持以 <code>RFC 7807</code> 规范方式返回错误数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(&#123;</span></span><br><span class="line"><span class="meta">    // 请求方式不支持</span></span><br><span class="line"><span class="meta">    HttpRequestMethodNotSupportedException.class,</span></span><br><span class="line"><span class="meta">    HttpMediaTypeNotSupportedException.class,</span></span><br><span class="line"><span class="meta">    HttpMediaTypeNotAcceptableException.class,</span></span><br><span class="line"><span class="meta">    MissingPathVariableException.class,</span></span><br><span class="line"><span class="meta">    MissingServletRequestParameterException.class,</span></span><br><span class="line"><span class="meta">    MissingServletRequestPartException.class,</span></span><br><span class="line"><span class="meta">    ServletRequestBindingException.class,</span></span><br><span class="line"><span class="meta">    MethodArgumentNotValidException.class,</span></span><br><span class="line"><span class="meta">    NoHandlerFoundException.class,</span></span><br><span class="line"><span class="meta">    AsyncRequestTimeoutException.class,</span></span><br><span class="line"><span class="meta">    ErrorResponseException.class,</span></span><br><span class="line"><span class="meta">    ConversionNotSupportedException.class,</span></span><br><span class="line"><span class="meta">    TypeMismatchException.class,</span></span><br><span class="line"><span class="meta">    HttpMessageNotReadableException.class,</span></span><br><span class="line"><span class="meta">    HttpMessageNotWritableException.class,</span></span><br><span class="line"><span class="meta">    BindException.class</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>效果：</p><p>默认响应错误的 json。状态码 405。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2023-09-18T11:13:05.515+00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">405</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Method Not Allowed&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;org.springframework.web.HttpRequestMethodNotSupportedException: Request method &#x27;POST&#x27; is not supported\r\n\tat org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.handleNoMatch(RequestMappingInfoHandlerMapping.java:265)\r\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lookupHandlerMethod(AbstractHandlerMethodMapping.java:441)\r\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.getHandlerInternal(AbstractHandlerMethodMapping.java:382)\r\n\tat org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:126)\r\n\tat org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getHandlerInternal(RequestMappingInfoHandlerMapping.java:68)\r\n\tat org.springframework.web.servlet.handler.AbstractHandlerMapping.getHandler(AbstractHandlerMapping.java:505)\r\n\tat org.springframework.web.servlet.DispatcherServlet.getHandler(DispatcherServlet.java:1275)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:974)\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011)\r\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:563)\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:631)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174)\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149)\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:166)\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:493)\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:341)\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:390)\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:894)\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191)\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\r\n\tat java.base/java.lang.Thread.run(Thread.java:833)\r\n&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Method &#x27;POST&#x27; is not supported.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/list&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>开启 ProblemDetails 返回，使用新的 MediaType<br><code>Content-Type: application/problem+json</code> + 额外扩展返回。</p><h4 id="2-12-2-函数式-Web"><a href="#2-12-2-函数式-Web" class="headerlink" title="2.12.2 函数式 Web"></a>2.12.2 函数式 Web</h4><blockquote><p><strong>SpringMVC 5.2</strong> 以后允许使用<strong>函数式</strong>的方式，<strong>定义 Web 的请求处理流程</strong>。</p><p>函数式接口。</p><p>Web 请求处理的方式：</p><p>1、**@Controller + @RequestMapping<strong>：</strong>耦合式<strong>（</strong>路由、业务**耦合）。</p><p>2、<strong>函数式 Web</strong>：分离式（路由、业务分离）。</p></blockquote><h5 id="2-12-2-1-场景"><a href="#2-12-2-1-场景" class="headerlink" title="2.12.2.1 场景"></a>2.12.2.1 场景</h5><blockquote><p>场景：User RESTful - CRUD。</p></blockquote><ul><li><p>GET &#x2F;user&#x2F;1 获取 1 号用户。</p></li><li><p>GET &#x2F;users 获取所有用户。</p></li><li><p>POST &#x2F;user <strong>请求体</strong>携带 JSON，新增一个用户。</p></li><li><p>PUT &#x2F;user&#x2F;1 <strong>请求体</strong>携带 JSON，修改 1 号用户。</p></li><li><p>DELETE &#x2F;user&#x2F;1 <strong>删除</strong> 1 号用户。</p></li></ul><h5 id="2-12-2-2-核心类"><a href="#2-12-2-2-核心类" class="headerlink" title="2.12.2.2 核心类"></a>2.12.2.2 核心类</h5><ul><li><p><strong>RouterFunction</strong></p></li><li><p><strong>RequestPredicate</strong></p></li><li><p><strong>ServerRequest</strong></p></li><li><p><strong>ServerResponse</strong></p></li></ul><h5 id="2-12-2-3-示例"><a href="#2-12-2-3-示例" class="headerlink" title="2.12.2.3 示例"></a>2.12.2.3 示例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.web.biz.UserBizHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RequestPredicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RouterFunction;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.RouterFunctions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * 场景：User RESTful - CRUD</span></span><br><span class="line"><span class="comment"> * GET /user/1 获取 1 号用户</span></span><br><span class="line"><span class="comment"> * GET /users 获取所有用户</span></span><br><span class="line"><span class="comment"> * POST /user 请求体携带 JSON，新增一个用户</span></span><br><span class="line"><span class="comment"> * PUT /user/1 请求体携带 JSON，修改 1 号用户</span></span><br><span class="line"><span class="comment"> * DELETE /user/1 删除 1 号用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebFunctionConfig</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 函数式 Web</span></span><br><span class="line"><span class="comment">     * 1、给容器中放一个 Bean: 类型是 RouterFunction&lt;ServerResponse&gt;，集中所有路由信息</span></span><br><span class="line"><span class="comment">     * 2、每个业务准备一个自己的 Handler</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 核心四大对象</span></span><br><span class="line"><span class="comment">     * 1、RouterFunction：定义路由信息，发什么请求，谁来处理</span></span><br><span class="line"><span class="comment">     * 2、RequestPredicate：定义请求，请求谓语，请求方式（GET、POST），请求参数</span></span><br><span class="line"><span class="comment">     * 3、ServerRequest：封装请求完整数据</span></span><br><span class="line"><span class="comment">     * 4、ServerResponse：封装响应完整数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userBizHandler 用户业务处理程序（userBizHandler 会被自动注入进来）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> routerFunction 路由器功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title function_">userRouter</span><span class="params">(UserBizHandler userBizHandler)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 开始定义路由信息</span></span><br><span class="line">        RouterFunction&lt;ServerResponse&gt; routerFunction = RouterFunctions.route()</span><br><span class="line">                .GET(<span class="string">&quot;/user/&#123;id&#125;&quot;</span>, RequestPredicates.accept(MediaType.ALL), userBizHandler::getUser)</span><br><span class="line">                .GET(<span class="string">&quot;/users&quot;</span>, userBizHandler::getUsers)</span><br><span class="line">                .POST(<span class="string">&quot;/user&quot;</span>, RequestPredicates.accept(MediaType.APPLICATION_JSON), userBizHandler::saveUser)</span><br><span class="line">                .PUT(<span class="string">&quot;/user&#123;id&#125;&quot;</span>, RequestPredicates.accept(MediaType.APPLICATION_JSON), userBizHandler::updateUser)</span><br><span class="line">                .DELETE(<span class="string">&quot;/user&#123;id&#125;&quot;</span>, userBizHandler::deleteUser)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> routerFunction;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.web.biz;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.web.bean.User;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.ServerRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.function.ServerResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/18</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 专门处理 User 有关的业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBizHandler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询指定 id 的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">getUser</span><span class="params">(ServerRequest request)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.pathVariable(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setUserName(<span class="string">&quot;MYXH&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;520.ILY!&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">21</span>);</span><br><span class="line">        user.setEmail(<span class="string">&quot;1735350920@qq.com&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;查询 &#123;&#125; 号用户信息成功&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造响应</span></span><br><span class="line">        <span class="type">ServerResponse</span> <span class="variable">response</span> <span class="operator">=</span> ServerResponse</span><br><span class="line">                .ok()</span><br><span class="line">                <span class="comment">// 凡是 body 中的对象，就是以前 @ResponseBody 原理，利用 HttpMessageConverter 写出为 json</span></span><br><span class="line">                .body(user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">getUsers</span><span class="params">(ServerRequest request)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务处理</span></span><br><span class="line">        List&lt;User&gt; userList = Arrays.asList(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1L</span>, <span class="string">&quot;MYXH&quot;</span>,<span class="string">&quot;520.ILY!&quot;</span>,<span class="number">21</span>,<span class="string">&quot;1735350920@qq.com&quot;</span>,<span class="string">&quot;root&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">2L</span>, <span class="string">&quot;root&quot;</span>,<span class="string">&quot;000000&quot;</span>,<span class="number">21</span>,<span class="string">&quot;root@qq.com&quot;</span>,<span class="string">&quot;root&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">3L</span>, <span class="string">&quot;admin&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">21</span>,<span class="string">&quot;admin@qq.com&quot;</span>,<span class="string">&quot;admin&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">4L</span>, <span class="string">&quot;test&quot;</span>,<span class="string">&quot;test&quot;</span>,<span class="number">18</span>,<span class="string">&quot;test@qq.com&quot;</span>,<span class="string">&quot;test&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">5L</span>, <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="number">18</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;user&quot;</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;查询所有用户信息成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造响应</span></span><br><span class="line">        <span class="type">ServerResponse</span> <span class="variable">response</span> <span class="operator">=</span> ServerResponse</span><br><span class="line">                .ok()</span><br><span class="line">                .body(userList);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">saveUser</span><span class="params">(ServerRequest request)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务处理</span></span><br><span class="line">        <span class="comment">// 提取请求体</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">body</span> <span class="operator">=</span> request.body(User.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;保存用户信息成功，用户信息：&#123;&#125;&quot;</span>, body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造响应</span></span><br><span class="line">        <span class="type">ServerResponse</span> <span class="variable">response</span> <span class="operator">=</span> ServerResponse</span><br><span class="line">                .ok()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新指定 id 的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">updateUser</span><span class="params">(ServerRequest request)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务处理</span></span><br><span class="line">        <span class="comment">// 提取请求体</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">body</span> <span class="operator">=</span> request.body(User.class);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;更新用户信息成功，用户信息：&#123;&#125;&quot;</span>, body);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造响应</span></span><br><span class="line">        <span class="type">ServerResponse</span> <span class="variable">response</span> <span class="operator">=</span> ServerResponse</span><br><span class="line">                .ok()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定 id 的用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> response 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ServerResponse <span class="title function_">deleteUser</span><span class="params">(ServerRequest request)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 业务处理</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> request.pathVariable(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;删除 &#123;&#125; 号用户信息成功&quot;</span>, id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造响应</span></span><br><span class="line">        <span class="type">ServerResponse</span> <span class="variable">response</span> <span class="operator">=</span> ServerResponse</span><br><span class="line">                .ok()</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-3-章-SpringBoot3-数据访问"><a href="#第-3-章-SpringBoot3-数据访问" class="headerlink" title="第 3 章 SpringBoot3-数据访问"></a>第 3 章 SpringBoot3-数据访问</h2><p><strong>整合 SSM 场景</strong></p><blockquote><p>SpringBoot 整合 <strong>Spring</strong>、<strong>SpringMVC</strong>、<strong>MyBatis</strong> 进行<strong>数据访问场景</strong>开发。</p></blockquote><h3 id="3-1-创建-SSM-整合项目"><a href="#3-1-创建-SSM-整合项目" class="headerlink" title="3.1 创建 SSM 整合项目"></a>3.1 创建 SSM 整合项目</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.myxh.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot3-05-ssm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>boot3-05-ssm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>boot3-05-ssm<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>17<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-配置数据源"><a href="#3-2-配置数据源" class="headerlink" title="3.2 配置数据源"></a>3.2 配置数据源</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、先配置数据源信息</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_boot</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">MYXH</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">520.ILY!</span></span><br></pre></td></tr></table></figure><p>安装 Free MyBatis Tool 或 MyBatisX 插件，生成 Mapper 接口的 xml 文件即可。</p><h3 id="3-3-配置-MyBatis"><a href="#3-3-配置-MyBatis" class="headerlink" title="3.3 配置 MyBatis"></a>3.3 配置 MyBatis</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2、配置整合 MyBatis</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:/mapper/*.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 打开驼峰命名规则</span></span><br><span class="line"><span class="attr">mybatis.configuration.map-underscore-to-camel-case</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="3-4-CRUD-编写"><a href="#3-4-CRUD-编写" class="headerlink" title="3.4 CRUD 编写"></a>3.4 CRUD 编写</h3><ul><li><p>编写 Bean。</p></li><li><p>编写 Mapper。</p></li><li><p>使用 <code>Free MyBatis Tool</code> 插件，快速生成 MapperXML。</p></li><li><p>测试 CRUD。</p></li></ul><h3 id="3-5-自动配置原理"><a href="#3-5-自动配置原理" class="headerlink" title="3.5 自动配置原理"></a>3.5 自动配置原理</h3><p><strong>SSM 整合总结</strong>：</p><blockquote><p>1、<strong>导入</strong> <strong>mybatis-spring-boot-starter</strong>。</p><p>2、配置<strong>数据源</strong>信息。</p><p>3、配置 MyBatis 的 <strong>Mapper 接口扫描</strong>与 <strong>xml 映射文件扫描</strong>。</p><p>4、编写 Bean，Mapper，生成 xml，编写 SQL 进行 CRUD。<strong>事务等操作依然和 Spring 中用法一样</strong>。</p><p>5、效果：</p><ul><li><p>① 所有 SQL 写在 xml 中。</p></li><li><p>② 所有 <strong>MyBatis 配置</strong>写在 <strong>application.properties</strong> 下面。</p></li></ul></blockquote><ul><li><p><code>jdbc 场景的自动配置</code>：</p><ul><li><p><code>mybatis-spring-boot-starter</code> 导入 <code>spring-boot-starter-jdbc</code>，jdbc 是操作数据库的场景。</p></li><li><p><code>jdbc</code> 场景的几个自动配置。</p><ul><li><p>org.springframework.boot.autoconfigure.jdbc.<strong>DataSourceAutoConfiguration</strong></p><ul><li><p><strong>数据源的自动配置</strong>。</p></li><li><p>所有和数据源有关的配置都绑定在 <code>DataSourceProperties</code>。</p></li><li><p>默认使用 <code>HikariDataSource</code>。</p></li></ul></li><li><p>org.springframework.boot.autoconfigure.jdbc.<strong>JdbcTemplateAutoConfiguration</strong></p><ul><li>给容器中放了 <code>JdbcTemplate</code> 操作数据库。</li></ul></li><li><p>org.springframework.boot.autoconfigure.jdbc.<strong>JndiDataSourceAutoConfiguration</strong></p></li><li><p>org.springframework.boot.autoconfigure.jdbc.<strong>XADataSourceAutoConfiguration</strong></p><ul><li><strong>基于 XA 二阶提交协议的分布式事务数据源</strong>。</li></ul></li><li><p>org.springframework.boot.autoconfigure.jdbc.<strong>DataSourceTransactionManagerAutoConfiguration</strong></p><ul><li><strong>支持事务</strong>。</li></ul></li></ul></li><li><p><strong>具有的底层能力</strong>：<strong>数据源</strong>、<code>JdbcTemplate</code>、<strong>事务</strong>。</p></li></ul></li><li><p><code>MyBatisAutoConfiguration</code>：配置了 MyBatis 的整合流程。</p><ul><li><p><code>mybatis-spring-boot-starter</code> 导入 <code>mybatis-spring-boot-autoconfigure（mybatis 的自动配置包）</code>。</p></li><li><p>默认加载两个自动配置类：</p><ul><li><p>org.mybatis.spring.boot.autoconfigure.MybatisLanguageDriverAutoConfiguration</p></li><li><p>org.mybatis.spring.boot.autoconfigure.<strong>MybatisAutoConfiguration</strong></p><ul><li><p><strong>必须在数据源配置好之后才配置</strong>。</p></li><li><p>给容器中 <code>SqlSessionFactory</code> 组件，创建和数据库的一次会话。</p></li><li><p>给容器中 <code>SqlSessionTemplate</code> 组件，操作数据库。</p></li></ul></li></ul></li><li><p><strong>MyBatis 的所有配置绑定在</strong> <code>MybatisProperties</code>。</p></li><li><p>每个 <strong>Mapper 接口</strong>的<strong>代理对象</strong>是怎么创建放到容器中，详见 <strong>@MapperScan</strong> 原理：</p><ul><li>利用 <code>@Import(MapperScannerRegistrar.class)</code> 批量给容器中注册组件，解析指定的包路径里面的每一个类，为每一个 Mapper 接口类，创建 Bean 定义信息，注册到容器中。</li></ul></li></ul></li></ul><blockquote><p>如何分析哪个场景导入以后，开启了哪些自动配置类。</p><p>寻找：<strong>classpath:&#x2F;META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong> 文件中配置的所有值，就是要开启的自动配置类，但是每个类可能有条件注解，基于条件注解判断哪个自动配置类生效了。</p></blockquote><h3 id="3-6-快速定位生效的配置"><a href="#3-6-快速定位生效的配置" class="headerlink" title="3.6 快速定位生效的配置"></a>3.6 快速定位生效的配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启调试模式，详细打印开启了哪些自动配置</span></span><br><span class="line"><span class="comment"># Positive（生效的自动配置），Negative（不生效的自动配置）</span></span><br><span class="line"><span class="attr">debug</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h3 id="3-7-扩展：整合其他数据源"><a href="#3-7-扩展：整合其他数据源" class="headerlink" title="3.7 扩展：整合其他数据源"></a>3.7 扩展：整合其他数据源</h3><h4 id="3-7-1-Druid-数据源"><a href="#3-7-1-Druid-数据源" class="headerlink" title="3.7.1 Druid 数据源"></a>3.7.1 Druid 数据源</h4><blockquote><p>暂不支持 <strong>SpringBoot3</strong></p><ul><li><p>导入 <strong>druid-starter</strong>。</p></li><li><p>写配置。</p></li><li><p>分析自动配置了哪些东西，怎么用。</p></li></ul></blockquote><p>Druid 官网：<a href="https://github.com/alibaba/druid">https://github.com/alibaba/druid</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据源基本配置</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.type</span>=<span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_boot</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">MYXH</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">520.ILY!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置 StatFilter 监控</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.stat.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.stat.db-type</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.stat.log-slow-sql</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.stat.slow-sql-millis</span>=<span class="string">2000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置 WallFilter 防火墙</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.wall.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.wall.db-type</span>=<span class="string">mysql</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.wall.config.delete-allow</span>=<span class="string">false</span></span><br><span class="line"><span class="attr">spring.datasource.druid.filter.wall.config.drop-table-allow</span>=<span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置监控页，内置监控页面的首页是 /druid/index.html</span></span><br><span class="line"><span class="attr">spring.datasource.druid.stat-view-servlet.enabled</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">spring.datasource.druid.stat-view-servlet.login-username</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.datasource.druid.stat-view-servlet.login-password</span>=<span class="string">admin</span></span><br><span class="line"><span class="attr">spring.datasource.druid.stat-view-servlet.allow</span>=<span class="string">\*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 其他 Filter 配置不再演示</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 目前为以下 Filter 提供了配置支持，请参考文档或者根据 IDE 提示（spring.datasource.druid.filter.\*）进行配置。</span></span><br><span class="line"><span class="comment"># StatFilter</span></span><br><span class="line"><span class="comment"># WallFilter</span></span><br><span class="line"><span class="comment"># ConfigFilter</span></span><br><span class="line"><span class="comment"># EncodingConvertFilter</span></span><br><span class="line"><span class="comment"># Slf4jLogFilter</span></span><br><span class="line"><span class="comment"># Log4jFilter</span></span><br><span class="line"><span class="comment"># Log4j2Filter</span></span><br><span class="line"><span class="comment"># CommonsLogFilter</span></span><br></pre></td></tr></table></figure><h3 id="3-8-附录：示例数据库"><a href="#3-8-附录：示例数据库" class="headerlink" title="3.8 附录：示例数据库"></a>3.8 附录：示例数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 创建数据库 spring_boot</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> spring_boot;</span><br><span class="line"></span><br><span class="line"># 选择数据库 spring_boot</span><br><span class="line">USE spring_boot;</span><br><span class="line"></span><br><span class="line"># 创建用户表 t_user</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_user`</span><br><span class="line">(</span><br><span class="line">    `id`         <span class="type">BIGINT</span>(<span class="number">20</span>)   <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    `login_name` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名称&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">    `nick_name`  <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户昵称&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">    `password`   <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span> <span class="keyword">COLLATE</span> <span class="string">&#x27;utf8_general_ci&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 添加用户表 t_user 的数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_user`(`id`, `login_name`, `nick_name`, `password`)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;MYXH&#x27;</span>, <span class="string">&#x27;末影小黑xh&#x27;</span>, <span class="string">&#x27;520.ILY!&#x27;</span>),</span><br><span class="line">       (<span class="number">2</span>, <span class="string">&#x27;root&#x27;</span>, <span class="string">&#x27;root 用户&#x27;</span>, <span class="string">&#x27;000000&#x27;</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;管理员&#x27;</span>, <span class="string">&#x27;123456&#x27;</span>),</span><br><span class="line">       (<span class="number">4</span>, <span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;测试员&#x27;</span>, <span class="string">&#x27;test&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="第-4-章-SpringBoot3-基础特性"><a href="#第-4-章-SpringBoot3-基础特性" class="headerlink" title="第 4 章 SpringBoot3-基础特性"></a>第 4 章 SpringBoot3-基础特性</h2><h3 id="4-1-SpringApplication"><a href="#4-1-SpringApplication" class="headerlink" title="4.1 SpringApplication"></a>4.1 SpringApplication</h3><h4 id="4-1-1-自定义-banner"><a href="#4-1-1-自定义-banner" class="headerlink" title="4.1.1 自定义 banner"></a>4.1.1 自定义 banner</h4><p>1、类路径添加 <code>banner.txt</code> 或设置 <code>spring.banner.location</code> 就可以定制 banner。</p><p>2、推荐网站：链接: <a href="https://www.bootschool.net/ascii">Spring Boot banner 在线生成工具</a>，制作下载英文 banner.txt，修改替换 banner.txt 文字实现自定义，个性化启动。</p><h4 id="4-1-2-自定义-SpringApplication"><a href="#4-1-2-自定义-SpringApplication" class="headerlink" title="4.1.2 自定义 SpringApplication"></a>4.1.2 自定义 SpringApplication</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.features;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.Banner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boot306FeaturesApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1、SpringApplication：Boot 应用的核心 API 入口</span></span><br><span class="line">        <span class="comment">// SpringApplication.run(Boot306FeaturesApplication.class, args);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.1 自定义 SpringApplication 的底层设置</span></span><br><span class="line">        <span class="type">SpringApplication</span> <span class="variable">springApplication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplication</span>(Boot306FeaturesApplication.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 程序化调整 SpringApplication 的参数，配置文件优先级高于程序化调整的优先级</span></span><br><span class="line">        springApplication.setBannerMode(Banner.Mode.OFF);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3 SpringApplication 运行起来</span></span><br><span class="line">        springApplication.run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-3-FluentBuilder-API"><a href="#4-1-3-FluentBuilder-API" class="headerlink" title="4.1.3 FluentBuilder API"></a>4.1.3 FluentBuilder API</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.features;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.Banner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主程序类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Boot306FeaturesApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 1、SpringApplication：Boot 应用的核心 API 入口</span></span><br><span class="line">        <span class="comment">// SpringApplication.run(Boot306FeaturesApplication.class, args);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.1 自定义 SpringApplication 的底层设置</span></span><br><span class="line">        <span class="comment">// SpringApplication springApplication = new SpringApplication(Boot306FeaturesApplication.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 程序化调整 SpringApplication 的参数，配置文件优先级高于程序化调整的优先级</span></span><br><span class="line">        <span class="comment">// springApplication.setBannerMode(Banner.Mode.OFF);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3 SpringApplication 运行起来</span></span><br><span class="line">        <span class="comment">// springApplication.run(args);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、Builder 方式构建 SpringApplication：通过 FluentAPI 进行设置</span></span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpringApplicationBuilder</span>()</span><br><span class="line">                .main(Boot306FeaturesApplication.class)</span><br><span class="line">                .sources(Boot306FeaturesApplication.class)</span><br><span class="line">                .bannerMode(Banner.Mode.OFF)</span><br><span class="line">                .run(args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-Profiles"><a href="#4-2-Profiles" class="headerlink" title="4.2 Profiles"></a>4.2 Profiles</h3><blockquote><p>环境隔离能力，快速切换开发、测试、生产环境。</p><p>步骤：</p><p>1、<strong>标识环境</strong>：指定哪些组件、配置在哪个环境生效。</p><p>2、<strong>切换环境</strong>：这个环境对应的所有组件和配置就应该生效。</p></blockquote><h4 id="4-2-1-使用"><a href="#4-2-1-使用" class="headerlink" title="4.2.1 使用"></a>4.2.1 使用</h4><h5 id="4-2-1-1-指定环境"><a href="#4-2-1-1-指定环境" class="headerlink" title="4.2.1.1 指定环境"></a>4.2.1.1 指定环境</h5><ul><li><p>Spring Profiles 提供一种<strong>隔离配置</strong>的方式，使其仅在<strong>特定环境</strong>生效。</p></li><li><p>任何 <code>@Component</code>，<code>@Configuration</code> 或 <code>@ConfigurationProperties</code> 可以使用 <code>@Profile</code> 标记，来指定何时被加载。（<strong>容器中的组件</strong>都可以被 <code>@Profile</code> 标记）</p></li></ul><h5 id="4-2-1-2-环境激活"><a href="#4-2-1-2-环境激活" class="headerlink" title="4.2.1.2 环境激活"></a>4.2.1.2 环境激活</h5><p>1、配置激活指定环境，配置文件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 激活指定的一个或多个环境</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev, test</span></span><br></pre></td></tr></table></figure><p>2、也可以使用命令行激活。<code>--spring.profiles.active=dev, test</code>。</p><p>3、还可以配置<strong>默认环境</strong>，不标注 @Profile 的组件永远都存在。</p><ul><li><p>① 以前默认环境叫 default。</p></li><li><p>② <code>spring.profiles.default=dev</code>。</p></li></ul><p>4、推荐使用激活方式激活指定环境。</p><h5 id="4-2-1-3-环境包含"><a href="#4-2-1-3-环境包含" class="headerlink" title="4.2.1.3 环境包含"></a>4.2.1.3 环境包含</h5><p>注意：</p><p>1、<code>spring.profiles.active</code> 和 <code>spring.profiles.default</code> 只能用到<strong>无 profile 的文件</strong>中，如果在 <code>application-dev.properties/yaml</code> 中编写就是无效的。</p><p>2、也可以额外添加生效文件，而不是激活替换。比如：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 包含指定环境，不管激活哪个环境，这个环境都有，总是要生效的环境</span></span><br><span class="line"><span class="attr">spring.profiles.include</span>=<span class="string">dev, test</span></span><br></pre></td></tr></table></figure><p>最佳实战：</p><ul><li><p><strong>生效的环境 &#x3D; 激活的环境&#x2F;默认环境 + 包含的环境</strong>。</p></li><li><p>项目里面这么用。</p><ul><li><p>基础的配置 <code>mybatis</code>、<code>log</code>：写到<strong>包含环境中</strong>。</p></li><li><p>需要动态切换变化的 <code>db</code>、<code>redis</code>：写到<strong>激活的环境中</strong>。</p></li></ul></li></ul><h4 id="4-2-2-Profile-分组"><a href="#4-2-2-Profile-分组" class="headerlink" title="4.2.2 Profile 分组"></a>4.2.2 Profile 分组</h4><p>创建 <code>prod</code> 组，指定包含 <code>db</code> 和 <code>mq</code> 配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Profile 分组</span></span><br><span class="line"><span class="attr">spring.profiles.group.prod[0]</span>=<span class="string">db</span></span><br><span class="line"><span class="attr">spring.profiles.group.prod[1]</span>=<span class="string">mq</span></span><br></pre></td></tr></table></figure><p>使用 <code>--spring.profiles.active=prod</code>，就会激活 <code>prod</code>，<code>db</code>，<code>mq</code> 配置文件。</p><h4 id="4-2-3-Profile-配置文件"><a href="#4-2-3-Profile-配置文件" class="headerlink" title="4.2.3 Profile 配置文件"></a>4.2.3 Profile 配置文件</h4><ul><li><p><code>application-&#123;profile&#125;.properties</code> 可以作为<strong>指定环境的配置文件</strong>。</p></li><li><p>激活这个环境，<strong>配置</strong>就会生效。最终生效的所有<strong>配置</strong>是。</p><ul><li><p><code>application.properties</code>：主配置文件，任意时候都生效。</p></li><li><p><code>application-&#123;profile&#125;.properties</code>：指定环境配置文件，激活指定环境生效。</p></li></ul></li></ul><p>profile 优先级 &gt; application 优先级。</p><h3 id="4-3-外部化配置"><a href="#4-3-外部化配置" class="headerlink" title="4.3 外部化配置"></a>4.3 外部化配置</h3><blockquote><p><strong>场景</strong>：线上应用如何<strong>快速修改配置</strong>，并<strong>应用最新配置</strong>？</p><p>SpringBoot 使用<strong>配置优先级 + 外部配置</strong>简化配置更新、简化运维。</p><p>只需要给 <strong>jar</strong> 应用所在的文件夹放一个 <strong>application.properties</strong> 最新配置文件，重启项目就能自动应用最新配置。</p></blockquote><h4 id="4-3-1-配置优先级"><a href="#4-3-1-配置优先级" class="headerlink" title="4.3.1 配置优先级"></a>4.3.1 配置优先级</h4><p>Spring Boot 允许将<strong>配置外部化</strong>，以便可以在不同的环境中使用相同的应用程序代码。</p><p>可以使用各种<strong>外部配置源</strong>，包括 <code>Java Properties 文件</code>、<code>YAML 文件</code>、<code>环境变量</code>和<code>命令行参数</code>。</p><p><code>@Value</code> 可以获取值，也可以用 <code>@ConfigurationProperties</code> 将所有属性绑定到 <code>Java Object</code> 中。</p><p><strong>以下是 SpringBoot 属性源加载顺序</strong>，<strong>后面的会覆盖前面的值</strong>，<strong>由低到高，高优先级配置覆盖低优先级</strong>。</p><p>1、<strong>默认属性</strong>（通过 <code>SpringApplication.setDefaultProperties</code> 指定的）。</p><p>2、<code>@PropertySource</code> 指定加载的配置（需要写在<code>@Configuration</code> 类上才可生效）。</p><p>3、<strong>配置文件</strong>（<strong>application.properties&#x2F;yml 等</strong>）。</p><p>4、<code>RandomValuePropertySource</code> 支持的 <code>random.*</code> 配置（如：@Value(“${random.int}”)）。</p><p>5、OS 环境变量。</p><p>6、Java 系统属性（<code>System.getProperties()</code>）。</p><p>7、JNDI 属性（来自 <code>java:comp/env</code>）。</p><p><code>8、ServletContext</code> 初始化参数。</p><p><code>9、ServletConfig</code> 初始化参数。</p><p>10、<code>SPRING_APPLICATION_JSON</code> 属性（内置在环境变量或系统属性中的 JSON）。</p><p>11、<strong>命令行参数</strong>。</p><p>12、测试属性。（<code>@SpringBootTest</code> 进行测试时指定的属性）。</p><p>13、测试类 <code>@TestPropertySource</code> 注解。</p><p>14、Devtools 设置的全局属性。（<code>$HOME/.config/spring-boot</code>）。</p><blockquote><p>结论：配置可以写到很多位置，常见的优先级顺序：</p><ul><li><strong>命令行</strong> &gt; <strong>配置文件</strong> &gt; <strong>springapplication 配置</strong></li></ul></blockquote><p><strong>配置文件优先级</strong>如下：（<strong>后面覆盖前面</strong>）</p><p>1、<strong>jar 包内</strong>的 <code>application.properties/yml</code>。</p><p>2、<strong>jar 包内</strong>的 <code>application-&#123;profile&#125;.properties/yml</code>。</p><p>3、<strong>jar 包外</strong>的 <code>application.properties/yml</code>。</p><p>4、<strong>jar 包外</strong>的 <code>application-&#123;profile&#125;.properties/yml</code>。</p><p><strong>建议</strong>：<strong>用一种格式的配置文件</strong>。<strong>如果</strong> <code>.properties</code> <strong>和</strong> <code>.yml</code> <strong>同时存在，则</strong> <code>.properties</code> <strong>优先</strong>。</p><blockquote><p>结论：<strong>包外 &gt; 包内</strong>，同级情况：<strong>profile 配置 &gt; application 配置</strong>。</p></blockquote><p><strong>所有参数均可由命令行传入</strong>，<strong>使用</strong> <code>--参数项=参数值</code>，<strong>将会被添加到环境变量中</strong>，<strong>并优先于</strong><code>配置文件</code>。</p><p><strong>比如</strong> <code>java -jar app.jar --name=&quot;Spring&quot;</code>，<strong>可以使用</strong> <code>@Value(&quot;$&#123;name&#125;&quot;)</code> <strong>获取</strong>。</p><p>演示场景：</p><ul><li><p>包内：application.properties <code>server.port=8080</code>。</p></li><li><p>包内：application-dev.properties <code>server.port=8081</code></p></li><li><p>包外：application.properties <code>server.port=8180</code></p></li><li><p>包外：application-dev.properties <code>server.port=8181</code></p></li></ul><p>启动端口？：<code>命令行</code> &gt; <code>8181</code> &gt; <code>8180</code> &gt; <code>8081</code> &gt; <code>8080</code>。</p><h4 id="4-3-2-外部配置"><a href="#4-3-2-外部配置" class="headerlink" title="4.3.2 外部配置"></a>4.3.2 外部配置</h4><p>SpringBoot 应用启动时会自动寻找 <code>application.properties</code> 和 <code>application.yaml</code> 位置，进行加载。顺序如下：（<strong>后面覆盖前面</strong>）</p><p>1、类路径：内部。</p><ul><li><p>① 类根路径.</p></li><li><p>② 类下 <code>/config</code> 包。</p></li></ul><p>2、当前路径：项目所在的位置。</p><ul><li><p>① 当前路径。</p></li><li><p>② 当前下 <code>/config</code> 子目录。</p></li><li><p>③ <code>/config</code> 目录的直接子目录。</p></li></ul><p>最终效果：优先级由高到低，前面覆盖后面。</p><ul><li><p>命令行 &gt; 包外 config 直接子目录 &gt; 包外 config 目录 &gt; 包外根目录 &gt; 包内目录。</p></li><li><p>同级比较：</p><ul><li><p>profile 配置 &gt; 默认配置。</p></li><li><p>properties 配置 &gt; yaml 配置。</p></li></ul></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/958e78de934440a6a2092e02e91f8498.png" alt="外部配置"></p><p>规律：最外层的最优先。</p><ul><li><p>命令行 &gt; 所有。</p></li><li><p>包外 &gt; 包内。</p></li><li><p>config 目录 &gt; 根目录。</p></li><li><p>profile &gt; application。</p></li></ul><p>配置不同就都生效（互补），配置相同高优先级覆盖低优先级。</p><h4 id="4-3-3-导入配置"><a href="#4-3-3-导入配置" class="headerlink" title="4.3.3 导入配置"></a>4.3.3 导入配置</h4><p>使用 <code>spring.config.import</code> 可以导入额外配置。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入指定的配置</span></span><br><span class="line"><span class="attr">spring.config.import</span>=<span class="string">classpath:/a.properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 导入配置优先级低于配置文件的优先级</span></span><br><span class="line"><span class="attr">a</span>=<span class="string">c</span></span><br></pre></td></tr></table></figure><p>无论以上写法的先后顺序，<code>a.properties</code> 的值总是优先于直接在文件中编写的 a。</p><h4 id="4-3-4-属性占位符"><a href="#4-3-4-属性占位符" class="headerlink" title="4.3.4 属性占位符"></a>4.3.4 属性占位符</h4><p>配置文件中可以使用 <code>$&#123;name:default&#125;</code> 形式取出之前配置过的值。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">my.server.port</span>=<span class="string">我的服务端口是：$&#123;server.port&#125;，我的用户名是：$&#123;my.username:末影小黑xh&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-单元测试-JUnit5"><a href="#4-4-单元测试-JUnit5" class="headerlink" title="4.4 单元测试 JUnit5"></a>4.4 单元测试 JUnit5</h3><h4 id="4-4-1-整合"><a href="#4-4-1-整合" class="headerlink" title="4.4.1 整合"></a>4.4.1 整合</h4><p>SpringBoot 提供一系列测试工具集及注解方便进行测试。</p><p><code>spring-boot-test</code> 提供核心测试能力，<code>spring-boot-test-autoconfigure</code> 提供测试的一些自动配置。</p><p>只需要导入 <code>spring-boot-starter-test</code> 即可整合测试。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>spring-boot-starter-test</code> 默认提供了以下库供测试使用。</p><ul><li><p><a href="https://junit.org/junit5/">JUnit 5</a></p></li><li><p><a href="https://docs.spring.io/spring-framework/docs/6.0.4/reference/html/testing.html#integration-testing">Spring Test</a></p></li><li><p><a href="https://assertj.github.io/doc/">AssertJ</a></p></li><li><p><a href="https://github.com/hamcrest/JavaHamcrest">Hamcrest</a></p></li><li><p><a href="https://site.mockito.org/">Mockito</a></p></li><li><p><a href="https://github.com/skyscreamer/JSONassert">JSONassert</a></p></li><li><p><a href="https://github.com/json-path/JsonPath">JsonPath</a></p></li></ul><h4 id="4-4-2-测试"><a href="#4-4-2-测试" class="headerlink" title="4.4.2 测试"></a>4.4.2 测试</h4><h5 id="4-4-2-1-组件测试"><a href="#4-4-2-1-组件测试" class="headerlink" title="4.4.2.1 组件测试"></a>4.4.2.1 组件测试</h5><p>直接 <code>@Autowired</code> 容器中的组件进行测试。</p><h5 id="4-4-2-2-注解"><a href="#4-4-2-2-注解" class="headerlink" title="4.4.2.2 注解"></a>4.4.2.2 注解</h5><p>JUnit5 的注解与 JUnit4 的注解有所变化。</p><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations">https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations</a></p><ul><li><p><strong>@Test</strong>：表示方法是测试方法，但是与 JUnit4 的 @Test 不同，他的职责非常单一不能声明任何属性，拓展的测试将会由 Jupiter 提供额外测试。</p></li><li><p><strong>@ParameterizedTest</strong>：表示方法是参数化测试，下方会有详细介绍。</p></li><li><p><strong>@RepeatedTest</strong>：表示方法可重复执行，下方会有详细介绍。</p></li><li><p><strong>@DisplayName</strong>：为测试类或者测试方法设置展示名称。</p></li><li><p><strong>@BeforeEach</strong>：表示在每个单元测试之前执行。</p></li><li><p><strong>@AfterEach</strong>：表示在每个单元测试之后执行。</p></li><li><p><strong>@BeforeAll</strong>：表示在所有单元测试之前执行。</p></li><li><p><strong>@AfterAll</strong>：表示在所有单元测试之后执行。</p></li><li><p><strong>@Tag</strong>：表示单元测试类别，类似于 JUnit4 中的 @Categories。</p></li><li><p><strong>@Disabled</strong>：表示测试类或测试方法不执行，类似于 JUnit4 中的 @Ignore。</p></li><li><p><strong>@Timeout</strong>：表示测试方法运行如果超过了指定时间将会返回错误。</p></li><li><p><strong>@ExtendWith</strong>：为测试类或测试方法提供扩展类引用。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.features;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.features.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具备测试 SpringBoot 应用容器中所有组件的功能，测试类必须在主程序所在的包及其子包</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boot306FeaturesApplicationTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 自动注入任意组件即可测试</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试 sum() 方法 &quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> helloService.sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">3</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试1&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有测试方法运行之前先运行这个，只打印一次</span></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个测试方法运行之前先运行这个，每个方法运行打印一次</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2-3-断言"><a href="#4-4-2-3-断言" class="headerlink" title="4.4.2.3 断言"></a>4.4.2.3 断言</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>assertEquals</td><td>判断两个对象或两个原始类型是否相等。</td></tr><tr><td>assertNotEquals</td><td>判断两个对象或两个原始类型是否不相等。</td></tr><tr><td>assertSame</td><td>判断两个对象引用是否指向同一个对象。</td></tr><tr><td>assertNotSame</td><td>判断两个对象引用是否指向不同的对象。</td></tr><tr><td>assertTrue</td><td>判断给定的布尔值是否为 true。</td></tr><tr><td>assertFalse</td><td>判断给定的布尔值是否为 false。</td></tr><tr><td>assertNull</td><td>判断给定的对象引用是否为 null。</td></tr><tr><td>assertNotNull</td><td>判断给定的对象引用是否不为 null。</td></tr><tr><td><strong>assertArrayEquals</strong></td><td><strong>数组断言</strong>。</td></tr><tr><td><strong>assertAll</strong></td><td><strong>组合断言</strong>。</td></tr><tr><td><strong>assertThrows</strong></td><td><strong>异常断言</strong>。</td></tr><tr><td><strong>assertTimeout</strong></td><td><strong>超时断言</strong>。</td></tr><tr><td><strong>fail</strong></td><td><strong>快速失败</strong>。</td></tr></tbody></table><h5 id="4-4-2-4-嵌套测试"><a href="#4-4-2-4-嵌套测试" class="headerlink" title="4.4.2.4 嵌套测试"></a>4.4.2.4 嵌套测试</h5><blockquote><p>JUnit 5 可以通过 Java 中的内部类和 @Nested 注解实现嵌套测试，从而可以更好的把相关的测试方法组织在一起。在内部类中可以使用 @BeforeEach 和 @AfterEach 注解，而且嵌套的层次没有限制。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.features;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;一个堆栈&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloTest</span></span><br><span class="line">&#123;</span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;使用 new Stack() 实例化堆栈&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">isInstantiatedWithNew</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;当新建时&quot;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">WhenNew</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">createNewStack</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;为空&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">isEmpty</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;在弹出时抛出 EmptyStackException 异常&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPopped</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;在查看时抛出 EmptyStackException 异常&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPeeked</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;在推入元素后&quot;)</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AfterPushing</span></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">anElement</span> <span class="operator">=</span> <span class="string">&quot;一个元素&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">pushAnElement</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;它不再为空&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">isNotEmpty</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;当弹出元素并且为空时返回该元素&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPopped</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;当查看元素时返回该元素，但仍然保持非空&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPeeked</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-4-2-5-参数化测试"><a href="#4-4-2-5-参数化测试" class="headerlink" title="4.4.2.5 参数化测试"></a>4.4.2.5 参数化测试</h5><p>参数化测试是 JUnit5 很重要的一个新特性，它使得用不同的参数多次运行测试成为了可能，也为单元测试带来许多便利。</p><p>利用 @<strong>ValueSource</strong> 等注解，指定入参，将可以使用不同的参数进行多次单元测试，而不需要每新增一个参数就新增一个单元测试，省去了很多冗余代码。</p><p>@<strong>ValueSource</strong>：为参数化测试指定入参来源，支持八大基础类以及 String 类型，Class 类型。</p><p>@NullSource：表示为参数化测试提供一个 null 的入参。</p><p>@EnumSource：表示为参数化测试提供一个枚举入参。</p><p>@CsvFileSource：表示读取指定 CSV 文件内容作为参数化测试入参。</p><p>@MethodSource：表示读取指定方法的返回值作为参数化测试入参（注意方法返回需要是一个流）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.features;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.features.service.HelloService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.MethodSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.ValueSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.platform.commons.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具备测试 SpringBoot 应用容器中所有组件的功能，测试类必须在主程序所在的包及其子包</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Boot306FeaturesApplicationTests</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 自动注入任意组件即可测试</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    HelloService helloService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试 sum() 方法 &quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">sum</span> <span class="operator">=</span> helloService.sum(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        Assertions.assertEquals(<span class="number">3</span>, sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DisplayName(&quot;测试1&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 参数化测试</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource(strings = &#123;&quot;one&quot;, &quot;two&quot;, &quot;three&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;参数化测试1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">parameterizedTest1</span><span class="params">(String string)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        Assertions.assertTrue(StringUtils.isNotBlank(string));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="comment">// 指定方法名，返回值就是测试用的参数</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;method&quot;)</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;方法来源参数&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWithExplicitLocalMethodSource</span><span class="params">(String name)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        Assertions.assertNotNull(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">method</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 返回 Stream 则可</span></span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 所有测试方法运行之前先运行这个，只打印一次</span></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每个测试方法运行之前先运行这个，每个方法运行打印一次</span></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第-5-章-SpringBoot3-核心原理"><a href="#第-5-章-SpringBoot3-核心原理" class="headerlink" title="第 5 章 SpringBoot3-核心原理"></a>第 5 章 SpringBoot3-核心原理</h2><h3 id="5-1-事件和监听器"><a href="#5-1-事件和监听器" class="headerlink" title="5.1 事件和监听器"></a>5.1 事件和监听器</h3><h4 id="5-1-1-生命周期监听"><a href="#5-1-1-生命周期监听" class="headerlink" title="5.1.1 生命周期监听"></a>5.1.1 生命周期监听</h4><p>场景：监听<strong>应用</strong>的<strong>生命周期</strong>。</p><h5 id="5-1-1-1-监听器-SpringApplicationRunListener"><a href="#5-1-1-1-监听器-SpringApplicationRunListener" class="headerlink" title="5.1.1.1 监听器 SpringApplicationRunListener"></a>5.1.1.1 监听器 SpringApplicationRunListener</h5><p>1、自定义 <code>SpringApplicationRunListener</code> 来<strong>监听事件</strong>。</p><ul><li><p>① 编写 <code>SpringApplicationRunListener</code> <strong>实现类</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.ConfigurableBootstrapContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplicationRunListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.ConfigurableEnvironment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * SpringBoot 应用生命周期监听</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * Listener先要从 META-INF/spring.factories 读到</span></span><br><span class="line"><span class="comment"> * &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1、引导：利用 BootstrapContext 引导整个项目启动</span></span><br><span class="line"><span class="comment"> *         starting：               应用开始，SpringApplication 的 run 方法一调用，只要有了 BootstrapContext 就执行</span></span><br><span class="line"><span class="comment"> *         environmentPrepared：    环境准备好（把启动参数等绑定到环境变量中），但是 ioc 还没有创建（调一次）</span></span><br><span class="line"><span class="comment"> * 2、启动：</span></span><br><span class="line"><span class="comment"> *        contextPrepared：         ioc 容器创建并准备好，但是 sources（主配置类）没加载，并关闭引导上下文，组件都没创建（调一次）</span></span><br><span class="line"><span class="comment"> *        contextLoaded：           ioc 容器加载，主配置类加载进去了，但是 ioc 容器还没刷新（bean 没创建）</span></span><br><span class="line"><span class="comment"> *        ----- 截止现在，ioc 容器里面还没造 bean -----</span></span><br><span class="line"><span class="comment"> *        started：                 ioc 容器刷新了（所有 bean 造好了），但是 runner 没调用</span></span><br><span class="line"><span class="comment"> *        ready：                   ioc 容器刷新了（所有 bean 造好了），所有 runner 调用完了</span></span><br><span class="line"><span class="comment"> * 3、运行：</span></span><br><span class="line"><span class="comment"> *       以上步骤都正确执行，代表容器 running。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAppListener</span> <span class="keyword">implements</span> <span class="title class_">SpringApplicationRunListener</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">starting</span><span class="params">(ConfigurableBootstrapContext bootstrapContext)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- starting() 正在启动 ---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">environmentPrepared</span><span class="params">(ConfigurableBootstrapContext bootstrapContext, ConfigurableEnvironment environment)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- environmentPrepared() 环境准备完成 ---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextPrepared</span><span class="params">(ConfigurableApplicationContext context)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- contextPrepared() ioc 容器准备完成 ---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoaded</span><span class="params">(ConfigurableApplicationContext context)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- contextLoaded() ioc 容器加载完成 ---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">started</span><span class="params">(ConfigurableApplicationContext context, Duration timeTaken)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- started() 启动完成 ---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ready</span><span class="params">(ConfigurableApplicationContext context, Duration timeTaken)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- ready() 准备就绪 ---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">failed</span><span class="params">(ConfigurableApplicationContext context, Throwable exception)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------- failed() 应用启动失败 ---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ApplicationEvent&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ApplicationEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------- 事件到达 --------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;event = &quot;</span> + event);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>② 在 <code>META-INF/spring.factories</code> 中配置 <code>org.springframework.boot.SpringApplicationRunListener=自己的 Listener</code>，还可以指定一个<strong>有参构造器</strong>，接受两个参数<code>(SpringApplication application, String[] args)</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">com.myxh.springboot.core.listener.MyAppListener</span><br><span class="line"></span><br><span class="line">org.springframework.context.ApplicationListener=\</span><br><span class="line">com.myxh.springboot.core.listener.MyListener</span><br></pre></td></tr></table></figure></li><li><p>③ springboot 在 <code>spring-boot.jar</code> 中配置了默认的 Listener，如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Run Listeners</span><br><span class="line">org.springframework.boot.SpringApplicationRunListener=\</span><br><span class="line">org.springframework.boot.context.event.EventPublishingRunListener</span><br></pre></td></tr></table></figure></li></ul><h5 id="5-1-1-2-生命周期全流程"><a href="#5-1-1-2-生命周期全流程" class="headerlink" title="5.1.1.2 生命周期全流程"></a>5.1.1.2 生命周期全流程</h5><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/4862e326b6784082ae0ba11a17438ce2.png" alt="生命周期全流程"></p><h4 id="5-1-2-事件触发时机"><a href="#5-1-2-事件触发时机" class="headerlink" title="5.1.2 事件触发时机"></a>5.1.2 事件触发时机</h4><h5 id="5-1-2-1-各种回调监听器"><a href="#5-1-2-1-各种回调监听器" class="headerlink" title="5.1.2.1 各种回调监听器"></a>5.1.2.1 各种回调监听器</h5><ul><li><p><code>BootstrapRegistryInitializer</code>：<strong>感知特定阶段</strong>，感知<strong>引导初始化</strong>。</p><ul><li><p><code>META-INF/spring.factories</code>。</p></li><li><p><strong>创建引导上下文</strong> <code>bootstrapContext</code> <strong>的时候触发</strong>。</p></li><li><p><code>application.addBootstrapRegistryInitializer();</code></p></li><li><p><strong>场景</strong>：<strong>进行密钥校对授权</strong>。</p></li></ul></li><li><p>ApplicationContextInitializer：<strong>感知特定阶段</strong>，感知 ioc 容器初始化。</p><ul><li><p><code>META-INF/spring.factories</code>。</p></li><li><p><code>application.addInitializers();</code></p></li></ul></li><li><p><strong>ApplicationListener</strong>：<strong>感知全阶段，基于事件机制，感知事件，一旦到了哪个阶段可以做别的事。</strong></p><ul><li><p><code>@Bean</code> 或 <code>@EventListener</code>：<strong>事件驱动</strong>。</p></li><li><p><code>SpringApplication.addListeners(...)</code> 或 <code>SpringApplicationBuilder.listeners(...)</code>。</p></li><li><p><code>META-INF/spring.factories</code>。</p></li></ul></li><li><p><strong>SpringApplicationRunListener</strong>：<strong>感知全阶段生命周期 + 各种阶段都能自定义操作，功能更完善。</strong></p><ul><li><code>META-INF/spring.factories</code>。</li></ul></li><li><p><strong>ApplicationRunner</strong>：<strong>感知特定阶段，感知应用就绪 Ready，卡死应用，就不会就绪。</strong></p><ul><li><code>@Bean</code>。</li></ul></li><li><p><strong>CommandLineRunner</strong>：<strong>感知特定阶段，感知应用就绪 Ready，卡死应用，就不会就绪。</strong></p><ul><li><code>@Bean</code>。</li></ul></li></ul><p>最佳实战：</p><ul><li><p>如果想要在项目启动前操作：<code>BootstrapRegistryInitializer</code> 和 <code>ApplicationContextInitializer</code>。</p></li><li><p>如果想要在项目启动完成后操作：<strong>ApplicationRunner</strong> 和 <strong>CommandLineRunner</strong>。</p></li><li><p><strong>如果要干涉生命周期做事</strong>：<strong>SpringApplicationRunListener</strong>。</p></li><li><p><strong>如果想要用事件机制</strong>：<strong>ApplicationListener</strong>。</p></li></ul><h5 id="5-1-2-2-完整触发流程"><a href="#5-1-2-2-完整触发流程" class="headerlink" title="5.1.2.2 完整触发流程"></a>5.1.2.2 完整触发流程</h5><p><strong>9 大事件</strong>触发顺序和时机：</p><p>1、<code>ApplicationStartingEvent</code>：应用启动但未做任何事情, 除过注册 <code>listeners</code> 和 <code>initializers</code>。</p><p>2、<code>ApplicationEnvironmentPreparedEvent</code>：Environment 准备好，但 context 未创建。</p><p>3、<code>ApplicationContextInitializedEvent</code>：ApplicationContext 准备好，ApplicationContextInitializers 调用，但是任何 bean 未加载。</p><p>4、<code>ApplicationPreparedEvent</code>：容器刷新之前，bean 定义信息加载。</p><p>5、<code>ApplicationStartedEvent</code>：容器刷新完成， runner 未调用。</p><blockquote><p>以下就开始插入了探针机制。</p></blockquote><p>6、<code>AvailabilityChangeEvent</code>：<code>LivenessState.CORRECT</code> 应用存活，<strong>存活探针</strong>。</p><p>7、<code>ApplicationReadyEvent</code>：任何 runner 被调用。</p><p>8、<code>AvailabilityChangeEvent</code>：<code>ReadinessState.ACCEPTING_TRAFFIC</code> <strong>就绪探针</strong>，可以接请求。</p><p>9、<code>ApplicationFailedEvent</code>：启动出错。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/6b6757fe30ef4c2ab0ae5999c898cffa.png" alt="完整触发流程"></p><p>应用事件发送顺序如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1cb875f2dc334c43b9a04c3848fad92f.png" alt="完整触发流程"></p><p>感知应用是否<strong>存活</strong>了：可能植物状态，虽然活着但是不能处理请求。</p><p>应用是否<strong>就绪</strong>了：能响应请求，说明确实活的比较好。</p><h5 id="5-1-2-3-SpringBoot-事件驱动开发"><a href="#5-1-2-3-SpringBoot-事件驱动开发" class="headerlink" title="5.1.2.3 SpringBoot 事件驱动开发"></a>5.1.2.3 SpringBoot 事件驱动开发</h5><blockquote><p>应用启动过程生命周期事件感知（9 大事件）、应用运行中事件感知（无数种）。</p></blockquote><ul><li><p><strong>事件发布</strong>：<code>ApplicationEventPublisherAware</code> 或<code>注入 ApplicationEventMulticaster</code>。</p></li><li><p><strong>事件监听</strong>：<code>组件 + @EventListener</code>。</p></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/49c5943f77474d78a66211f04944ac5b.png" alt="SpringBoot 事件驱动开发"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/bf0a43d500aa4a8ea94e38dbb2772e71.png" alt="SpringBoot 事件驱动开发"></p><blockquote><p>事件发布者。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 事件是广播出去的，所有监听这个事件的监听器都可以收到</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventPublisher</span> <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 底层发送事件用的组件，SpringBoot 会通过 ApplicationEventPublisherAware 接口自动注入</span></span><br><span class="line">    ApplicationEventPublisher applicationEventPublisher;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有事件都可以发</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event 事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendEvent</span><span class="params">(ApplicationEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用底层 API 发送事件</span></span><br><span class="line">        applicationEventPublisher.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会被自动调用，把真正发事件的底层组组件给注入进来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> applicationEventPublisher 此对象要使用的事件发布者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventPublisher</span><span class="params">(ApplicationEventPublisher applicationEventPublisher)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationEventPublisher = applicationEventPublisher;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 登录成功事件，所有事件都推荐继承 ApplicationEvent</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginSuccessEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录成功事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 事件来源，代表是谁登录成了</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginSuccessEvent</span><span class="params">(UserEntity source)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事件订阅者。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.event.LoginSuccessEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(LoginSuccessEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------- SystemService 感知到事件 --------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;event = &quot;</span> + event);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) event.getSource();</span><br><span class="line">        recordLog(source.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recordLog</span><span class="params">(String username)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;登录信息已被记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.event.LoginSuccessEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Order(2)</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;LoginSuccessEvent&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAccountScore</span><span class="params">(String username)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot; 加了 1 分&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(LoginSuccessEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------- AccountService  收到事件 --------&quot;</span>);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) event.getSource();</span><br><span class="line">        addAccountScore(source.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.event.LoginSuccessEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Async;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CouponService</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器调用&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="meta">@Order(3)</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(LoginSuccessEvent loginSuccessEvent)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------- CouponService 感知到事件 --------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;loginSuccessEvent = &quot;</span> + loginSuccessEvent);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">source</span> <span class="operator">=</span> (UserEntity) loginSuccessEvent.getSource();</span><br><span class="line">        sendCoupon(source.getUsername());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendCoupon</span><span class="params">(String username)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot; 随机得到了一张优惠券&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.core.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.core.event.LoginSuccessEvent;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.EventListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onEvent</span><span class="params">(LoginSuccessEvent event)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-------- HelloService 感知到事件 --------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;event = &quot;</span> + event);</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用业务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-自动配置原理"><a href="#5-2-自动配置原理" class="headerlink" title="5.2 自动配置原理"></a>5.2 自动配置原理</h3><h4 id="5-2-1-入门理解"><a href="#5-2-1-入门理解" class="headerlink" title="5.2.1 入门理解"></a>5.2.1 入门理解</h4><blockquote><p>应用关注的三大核心：场景、配置、组件。</p></blockquote><h5 id="5-2-1-1-自动配置流程"><a href="#5-2-1-1-自动配置流程" class="headerlink" title="5.2.1.1 自动配置流程"></a>5.2.1.1 自动配置流程</h5><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/3d28ae3daa994763b4d03ca627bcd969.png" alt="自动配置流程"></p><p>1、导入 <code>starter</code>。</p><p>2、依赖导入 <code>autoconfigure</code>。</p><p>3、寻找类路径下 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 文件。</p><p>4、启动，加载所有<strong>自动配置类</strong> <code>xxxAutoConfiguration</code>。</p><ul><li><p>① 给容器中配置<strong>功能组件</strong>。</p></li><li><p>② <code>组件参数</code>绑定到<code>属性类</code>中，<code>xxxProperties</code>。</p></li><li><p>③ <code>属性类</code>和<code>配置文件</code>前缀项绑定。</p></li><li><p>④ <code>@Contional 派生的条件注解进</code>行判断<strong>是否组件生效</strong>。</p></li></ul><p>5、效果：</p><ul><li><p>① 修改配置文件，修改底层参数。</p></li><li><p>② 所有场景自动配置好直接使用。</p></li><li><p>③ 可以注入 SpringBoot 配置好的组件随时使用。</p></li></ul><h5 id="5-2-1-2-SPI-机制"><a href="#5-2-1-2-SPI-机制" class="headerlink" title="5.2.1.2 SPI 机制"></a>5.2.1.2 SPI 机制</h5><blockquote><ul><li><p><strong>Java 中的 SPI（Service Provider Interface）是一种软件设计模式，用于在应用程序中动态地发现和加载组件</strong>。<strong>SPI 的思想</strong>是，定义一个接口或抽象类，然后通过在 classpath 中定义实现该接口的类来实现对组件的动态发现和加载。</p></li><li><p><strong>SPI</strong> 的主要目的是解决在应用程序中使用可插拔组件的问题。例如，一个应用程序可能需要使用不同的日志框架或数据库连接池，但是这些组件的选择可能取决于运行时的条件。通过使用 <strong>SPI</strong>，应用程序可以在运行时发现并加载适当的组件，而无需在代码中硬编码这些组件的实现类。</p></li><li><p>在 Java 中，<strong>SPI</strong> 的实现方式是通过在 <strong>META-INF&#x2F;services</strong> 目录下创建一个以服务接口全限定名为名字的文件，文件中包含实现该服务接口的类的全限定名。当应用程序启动时，Java 的 <strong>SPI</strong> 机制会自动扫描 classpath 中的这些文件，并根据文件中指定的类名来加载实现类。</p></li><li><p>通过使用 <strong>SPI</strong>，应用程序可以实现更灵活、可扩展的架构，同时也可以避免硬编码依赖关系和增加代码的可维护性。</p></li></ul></blockquote><p>在 SpringBoot 中，<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>。</p><blockquote><p>写一段 Java 的 SPI 机制代码。</p></blockquote><p>下面是一个简单的 Java SPI（Service Provider Interface）机制的示例代码，代码中包含了详细的注释说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MyService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务提供者 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService1</span> <span class="keyword">implements</span> <span class="title class_">MyService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyService1 正在执行。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spi;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务提供者 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyService2</span> <span class="keyword">implements</span> <span class="title class_">MyService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyService2 正在执行。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ServiceLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义服务加载器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceLoader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 加载并执行服务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadAndExecuteServices</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 使用Java SPI机制加载所有的服务提供者</span></span><br><span class="line">        java.util.ServiceLoader&lt;MyService&gt; serviceLoader = java.util.ServiceLoader.load(MyService.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有的服务提供者，并执行服务</span></span><br><span class="line">        <span class="keyword">for</span> (MyService service : serviceLoader)</span><br><span class="line">        &#123;</span><br><span class="line">            service.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.spi;</span><br><span class="line"><span class="comment">// 测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ServiceLoader</span> <span class="variable">loader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceLoader</span>();</span><br><span class="line">        loader.loadAndExecuteServices();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码展示了如何使用 Java SPI 机制来加载并执行服务提供者。其中，<code>MyService</code> 是服务接口，<code>MyService1</code> 和 <code>MyService2</code> 是两个具体的服务提供者实现。<code>ServiceLoader</code> 是服务加载器，它通过 <code>java.util.ServiceLoader</code> 来加载所有的服务提供者，并执行服务的 <code>execute()</code> 方法。最后，在 <code>Main</code> 类的 <code>main()</code> 方法中调用 <code>ServiceLoader</code> 的 <code>loadAndExecuteServices()</code> 方法即可加载并执行服务提供者。</p><p>注意：在实际使用 Java SPI 机制时，需要在 <code>src/main/resources/META-INF/services</code> 目录下创建一个以服务接口全限定名命名的文件，文件内容为具体的服务提供者实现类的全限定名。在本示例中，需要创建 <code>src/main/resources/META-INF/services/com.example.MyService</code> 文件，并在其中分别写入 <code>com.example.MyService1</code> 和 <code>com.example.MyService2</code>。这样，在调用 <code>java.util.ServiceLoader.load()</code> 方法时，就能正确加载到所有的服务提供者实现类。</p><h5 id="5-2-1-3-功能开关"><a href="#5-2-1-3-功能开关" class="headerlink" title="5.2.1.3 功能开关"></a>5.2.1.3 功能开关</h5><ul><li><p>自动配置：全部都配置好，什么都不用管，自动批量导入。</p><ul><li>项目一启动，SPI 文件中指定的所有都加载。</li></ul></li><li><p><code>@EnableXxx</code>：手动控制哪些功能的开启，手动导入。</p><ul><li><p>开启 xxx 功能。</p></li><li><p>都是利用 @Import 把此功能要用的组件导入进去。</p></li></ul></li></ul><h4 id="5-2-2-进阶理解"><a href="#5-2-2-进阶理解" class="headerlink" title="5.2.2 进阶理解"></a>5.2.2 进阶理解</h4><h5 id="5-2-2-1-SpringBootApplication"><a href="#5-2-2-1-SpringBootApplication" class="headerlink" title="5.2.2.1 @SpringBootApplication"></a>5.2.2.1 @SpringBootApplication</h5><p><strong>@SpringBootConfiguration</strong>。</p><p>就是 @Configuration，容器中的组件，配置类，Spring IOC 启动就会加载创建这个类对象。</p><p><strong>@EnableAutoConfiguration：开启自动配置</strong>。</p><p>开启自动配置。</p><p><strong>@AutoConfigurationPackage：扫描主程序包，加载自己的组件</strong>。</p><ul><li><p>利用 <code>@Import(AutoConfigurationPackages.Registrar.class)</code> 想要给容器中导入组件。</p></li><li><p>把<strong>主程序所在的包</strong>的所有组件导入进来。</p></li><li><p><strong>为什么 SpringBoot 默认只扫描主程序所在的包及其子包。</strong></p></li></ul><p><strong>@Import(AutoConfigurationImportSelector.class)：加载所有自动配置类，加载 starter 导入的组件</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; configurations = ImportCandidates.load(AutoConfiguration.class, getBeanClassLoader())</span><br><span class="line">    .getCandidates();</span><br></pre></td></tr></table></figure><blockquote><p>扫描 SPI 文件：<strong>META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</strong>。</p></blockquote><p><strong>@ComponentScan</strong>。</p><blockquote><p>组件扫描：排除一些组件（哪些不要）。</p><p>排除前面已经扫描进来的<strong>配置类</strong>、和<strong>自动配置类</strong>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123;@Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">    @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class)&#125;)</span></span><br></pre></td></tr></table></figure><h5 id="5-2-2-2-完整启动加载流程"><a href="#5-2-2-2-完整启动加载流程" class="headerlink" title="5.2.2.2 完整启动加载流程"></a>5.2.2.2 完整启动加载流程</h5><blockquote><p>生命周期启动加载流程。</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/fdd18182fd5045368a80db61a5352b94.png" alt="完整启动加载流程"></p><h3 id="5-3-自定义-starter"><a href="#5-3-自定义-starter" class="headerlink" title="5.3 自定义 starter"></a>5.3 自定义 starter</h3><blockquote><p>场景：<strong>抽取聊天机器人场景，它可以打招呼</strong>。</p><p>效果：任何项目导入此 <strong>starter</strong> 都具有打招呼功能，并且<strong>问候语</strong>中的<strong>人名</strong>需要可以在<strong>配置文件</strong>中修改。</p></blockquote><ul><li><p>1、创建<code>自定义 starter</code> 项目，引入 <code>spring-boot-starter</code> 基础依赖。</p></li><li><p>2、编写模块功能，引入模块所有需要的依赖。</p></li><li><p>3、编写 <code>xxxAutoConfiguration</code> 自动配置类，帮其他项目导入这个模块需要的所有组件。</p></li><li><p>4、编写配置文件 <code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> 指定启动需要加载的自动配置。</p></li><li><p>5、其他项目引入即可使用。</p></li></ul><h4 id="5-3-1-业务代码"><a href="#5-3-1-业务代码" class="headerlink" title="5.3.1 业务代码"></a>5.3.1 业务代码</h4><blockquote><p>自定义配置有提示，导入以下依赖重启项目，再写配置文件就有提示。</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入配置处理器，配置文件自定义的 properties 配置都会有提示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.starter.robot.properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 此属性类和配置文件指定前缀绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;robot&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotProperties</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">robot.name</span>=<span class="string">MYXH</span></span><br><span class="line"><span class="attr">robot.age</span>=<span class="string">21</span></span><br><span class="line"><span class="attr">robot.email</span>=<span class="string">1735350920@qq.com</span></span><br></pre></td></tr></table></figure><h4 id="5-3-2-基本抽取"><a href="#5-3-2-基本抽取" class="headerlink" title="5.3.2 基本抽取"></a>5.3.2 基本抽取</h4><ul><li><p>创建 starter 项目，把公共代码需要的所有依赖导入。</p></li><li><p>把公共代码复制进来。</p></li><li><p>自己写一个 <code>RobotAutoConfiguration</code>，给容器中导入这个场景需要的所有组件。</p><ul><li><p>为什么这些组件默认不会扫描进去？</p></li><li><p><strong>starter 所在的包和引入它的项目的主程序所在的包不是父子层级</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.starter.robot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.starter.robot.controller.RobotController;</span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.starter.robot.properties.RobotProperties;</span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.starter.robot.service.RobotService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 给容器中导入 Robot 功能要用的所有组件</span></span><br><span class="line"><span class="meta">@Import(&#123;RobotProperties.class, RobotController.class, RobotService.class&#125;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RobotAutoConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    // 把组件导入到容器中</span></span><br><span class="line"><span class="comment">    @Bean</span></span><br><span class="line"><span class="comment">    public RobotController robotController()</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        return new RobotController();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>别人引用这个 <code>starter</code>，直接导入这个 <code>RobotAutoConfiguration</code>，就能把这个场景的组件导入进来。</p></li><li><p>功能生效。</p></li><li><p>测试编写配置文件。</p></li></ul><h4 id="5-3-3-使用-EnableXxx-机制"><a href="#5-3-3-使用-EnableXxx-机制" class="headerlink" title="5.3.3 使用@EnableXxx 机制"></a>5.3.3 使用@EnableXxx 机制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.myxh.springboot.starter.robot.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.myxh.springboot.starter.robot.RobotAutoConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MYXH</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/9/24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(RobotAutoConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableRobot</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>别人引入 <code>starter</code> 需要使用 <code>@EnableRobot</code> 开启功能。</p><h4 id="5-3-4-完全自动配置"><a href="#5-3-4-完全自动配置" class="headerlink" title="5.3.4 完全自动配置"></a>5.3.4 完全自动配置</h4><ul><li><p>依赖 SpringBoot 的 SPI 机制。</p></li><li><p><code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code> <strong>文件中编写好自动配置类的全类名即可</strong>。</p></li><li><p><strong>项目启动，自动加载自动配置类</strong>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务保护-Jmeter测压</title>
      <link href="/2023/09/12/Jmeter%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2023/09/12/Jmeter%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Jmeter快速入门"><a href="#Jmeter快速入门" class="headerlink" title="Jmeter快速入门"></a>Jmeter快速入门</h1><h1 id="1-安装Jmeter"><a href="#1-安装Jmeter" class="headerlink" title="1.安装Jmeter"></a>1.安装Jmeter</h1><p>Jmeter依赖于JDK，所以必须确保当前计算机上已经安装了JDK，并且配置了环境变量。</p><h2 id="1-1-下载"><a href="#1-1-下载" class="headerlink" title="1.1.下载"></a>1.1.下载</h2><p>可以Apache Jmeter官网下载，地址：<a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715193149837.png"></p><p>当然，我们课前资料也提供了下载好的安装包：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715193224094.png"></p><h2 id="1-2-解压"><a href="#1-2-解压" class="headerlink" title="1.2.解压"></a>1.2.解压</h2><p>因为下载的是zip包，解压缩即可使用，目录结构如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715193334367.png"></p><p>其中的bin目录就是执行的脚本，其中包含启动脚本：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715193414601.png"></p><h3 id="1-3-运行"><a href="#1-3-运行" class="headerlink" title="1.3.运行"></a>1.3.运行</h3><p>双击即可运行，但是有两点注意：</p><ul><li>启动速度比较慢，要耐心等待</li><li>启动后黑窗口不能关闭，否则Jmeter也跟着关闭了</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715193730096.png"></p><h1 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h1><h2 id="2-1-设置中文语言"><a href="#2-1-设置中文语言" class="headerlink" title="2.1.设置中文语言"></a>2.1.设置中文语言</h2><p>默认Jmeter的语言是英文，需要设置：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715193838719.png"></p><p>效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715193914039.png"></p><blockquote><p><strong>注意</strong>：上面的配置只能保证本次运行是中文，如果要永久中文，需要修改Jmeter的配置文件</p></blockquote><p>打开jmeter文件夹，在bin目录中找到 <strong>jmeter.properties</strong>，添加下面配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language</span>=<span class="string">zh_CN</span></span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715194137982.png"></p><blockquote><p>注意：前面不要出现#，#代表注释，另外这里是下划线，不是中划线</p></blockquote><h2 id="2-2-基本用法"><a href="#2-2-基本用法" class="headerlink" title="2.2.基本用法"></a>2.2.基本用法</h2><p>在测试计划上点鼠标右键，选择添加 &gt; 线程（用户） &gt; 线程组：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715194413178.png"></p><p>在新增的线程组中，填写线程信息：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715195053807.png"></p><p>给线程组点鼠标右键，添加http取样器：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715195144130.png"></p><p>编写取样器内容：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715195410764.png"></p><p>添加监听报告：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715195844978.png"></p><p>添加监听结果树：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200155537.png"></p><p>汇总报告结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200243194.png"></p><p>结果树：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200336526.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spingcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringCloud-微服务保护</title>
      <link href="/2023/09/12/SpringCloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/"/>
      <url>/2023/09/12/SpringCloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BF%9D%E6%8A%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="微服务保护"><a href="#微服务保护" class="headerlink" title="微服务保护"></a>微服务保护</h1><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230912162649711.png"></p><h1 id="1-初识Sentinel"><a href="#1-初识Sentinel" class="headerlink" title="1.初识Sentinel"></a>1.初识Sentinel</h1><h2 id="1-1-雪崩问题及解决方案"><a href="#1-1-雪崩问题及解决方案" class="headerlink" title="1.1.雪崩问题及解决方案"></a>1.1.雪崩问题及解决方案</h2><h3 id="1-1-1-雪崩问题"><a href="#1-1-1-雪崩问题" class="headerlink" title="1.1.1.雪崩问题"></a>1.1.1.雪崩问题</h3><p>微服务中，服务间调用关系错综复杂，一个微服务往往依赖于多个其它微服务。</p><p> <img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1533829099748.png"></p><p>如图，如果服务提供者I发生了故障，当前的应用的部分业务因为依赖于服务I，因此也会被阻塞。此时，其它不依赖于服务I的业务似乎不受影响。</p><p> <img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1533829198240.png"></p><p>但是，依赖服务I的业务请求被阻塞，用户不会得到响应，则tomcat的这个线程不会释放，于是越来越多的用户请求到来，越来越多的线程会阻塞：</p><p> <img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1533829307389.png"></p><p>服务器支持的线程和并发数有限，请求一直阻塞，会导致服务器资源耗尽，从而导致所有其它服务都不可用，那么当前服务也就不可用了。</p><p>那么，依赖于当前服务的其它服务随着时间的推移，最终也都会变的不可用，形成级联失败，雪崩就发生了：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715172710340.png"></p><h3 id="1-1-2-超时处理"><a href="#1-1-2-超时处理" class="headerlink" title="1.1.2.超时处理"></a>1.1.2.超时处理</h3><p>解决雪崩问题的常见方式有四种：</p><p>•超时处理：设定超时时间，请求超过一定时间没有响应就返回错误信息，不会无休止等待</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715172820438.png"></p><h3 id="1-1-3-仓壁模式"><a href="#1-1-3-仓壁模式" class="headerlink" title="1.1.3.仓壁模式"></a>1.1.3.仓壁模式</h3><p>方案2：仓壁模式</p><p>仓壁模式来源于船舱的设计：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715172946352.png"></p><p>船舱都会被隔板分离为多个独立空间，当船体破损时，只会导致部分空间进入，将故障控制在一定范围内，避免整个船体都被淹没。</p><p>于此类似，我们可以限定每个业务能使用的线程数，避免耗尽整个tomcat的资源，因此也叫线程隔离。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715173215243.png"></p><h3 id="1-1-4-断路器"><a href="#1-1-4-断路器" class="headerlink" title="1.1.4.断路器"></a>1.1.4.断路器</h3><p>断路器模式：由<strong>断路器</strong>统计业务执行的异常比例，如果超出阈值则会<strong>熔断</strong>该业务，拦截访问该业务的一切请求。</p><p>断路器会统计访问某个服务的请求数量，异常比例：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715173327075.png"></p><p>当发现访问服务D的请求异常比例过高时，认为服务D有导致雪崩的风险，会拦截访问服务D的一切请求，形成熔断：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715173428073.png"></p><h3 id="1-1-5-限流"><a href="#1-1-5-限流" class="headerlink" title="1.1.5.限流"></a>1.1.5.限流</h3><p><strong>流量控制</strong>：限制业务访问的QPS，避免服务因流量的突增而故障。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715173555158.png"></p><h3 id="1-1-6-总结"><a href="#1-1-6-总结" class="headerlink" title="1.1.6.总结"></a>1.1.6.总结</h3><p>什么是雪崩问题？</p><ul><li>微服务之间相互调用，因为调用链中的一个服务故障，引起整个链路都无法访问的情况。</li></ul><p>可以认为：</p><p><strong>限流</strong>是对服务的保护，避免因瞬间高并发流量而导致服务故障，进而避免雪崩。是一种<strong>预防</strong>措施。</p><p><strong>超时处理、线程隔离、降级熔断</strong>是在部分服务故障时，将故障控制在一定范围，避免雪崩。是一种<strong>补救</strong>措施。</p><h2 id="1-2-服务保护技术对比"><a href="#1-2-服务保护技术对比" class="headerlink" title="1.2.服务保护技术对比"></a>1.2.服务保护技术对比</h2><p>在SpringCloud当中支持多种服务保护技术：</p><ul><li><a href="https://github.com/Netflix/Hystrix">Netfix Hystrix</a></li><li><a href="https://github.com/alibaba/Sentinel">Sentinel</a></li><li><a href="https://github.com/resilience4j/resilience4j">Resilience4J</a></li></ul><p>早期比较流行的是Hystrix框架，但目前国内实用最广泛的还是阿里巴巴的Sentinel框架，这里我们做下对比：</p><table><thead><tr><th></th><th><strong>Sentinel</strong></th><th><strong>Hystrix</strong></th></tr></thead><tbody><tr><td>隔离策略</td><td>信号量隔离</td><td>线程池隔离&#x2F;信号量隔离</td></tr><tr><td>熔断降级策略</td><td>基于慢调用比例或异常比例</td><td>基于失败比率</td></tr><tr><td>实时指标实现</td><td>滑动窗口</td><td>滑动窗口（基于 RxJava）</td></tr><tr><td>规则配置</td><td>支持多种数据源</td><td>支持多种数据源</td></tr><tr><td>扩展性</td><td>多个扩展点</td><td>插件的形式</td></tr><tr><td>基于注解的支持</td><td>支持</td><td>支持</td></tr><tr><td>限流</td><td>基于 QPS，支持基于调用关系的限流</td><td>有限的支持</td></tr><tr><td>流量整形</td><td>支持慢启动、匀速排队模式</td><td>不支持</td></tr><tr><td>系统自适应保护</td><td>支持</td><td>不支持</td></tr><tr><td>控制台</td><td>开箱即用，可配置规则、查看秒级监控、机器发现等</td><td>不完善</td></tr><tr><td>常见框架的适配</td><td>Servlet、Spring Cloud、Dubbo、gRPC  等</td><td>Servlet、Spring Cloud Netflix</td></tr></tbody></table><h2 id="1-3-Sentinel介绍和安装"><a href="#1-3-Sentinel介绍和安装" class="headerlink" title="1.3.Sentinel介绍和安装"></a>1.3.Sentinel介绍和安装</h2><h3 id="1-3-1-初识Sentinel"><a href="#1-3-1-初识Sentinel" class="headerlink" title="1.3.1.初识Sentinel"></a>1.3.1.初识Sentinel</h3><p>Sentinel是阿里巴巴开源的一款微服务流量控制组件。官网地址：<a href="https://sentinelguard.io/zh-cn/index.html">https://sentinelguard.io/zh-cn/index.html</a></p><p>Sentinel 具有以下特征:</p><p>•<strong>丰富的应用场景</strong>：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</p><p>•<strong>完备的实时监控</strong>：Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</p><p>•<strong>广泛的开源生态</strong>：Sentinel 提供开箱即用的与其它开源框架&#x2F;库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</p><p>•<strong>完善的</strong> <strong>SPI</strong> <strong>扩展点</strong>：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</p><h3 id="1-3-2-安装Sentinel"><a href="#1-3-2-安装Sentinel" class="headerlink" title="1.3.2.安装Sentinel"></a>1.3.2.安装Sentinel</h3><p>1）下载</p><p>sentinel官方提供了UI控制台，方便我们对系统做限流设置。大家可以在<a href="https://github.com/alibaba/Sentinel/releases">GitHub</a>下载。</p><p>课前资料也提供了下载好的jar包：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715174252531.png"></p><p>2）运行</p><p>将jar包放到任意非中文目录，执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure><p>如果要修改Sentinel的默认端口、账户、密码，可以通过下列配置：</p><table><thead><tr><th><strong>配置项</strong></th><th><strong>默认值</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>server.port</td><td>8080</td><td>服务端口</td></tr><tr><td>sentinel.dashboard.auth.username</td><td>sentinel</td><td>默认用户名</td></tr><tr><td>sentinel.dashboard.auth.password</td><td>sentinel</td><td>默认密码</td></tr></tbody></table><p>例如，修改端口：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dserver.port=8090 -jar sentinel-dashboard-1.8.1.jar</span><br></pre></td></tr></table></figure><p>3）访问</p><p>访问<a href="http://localhost:8080页面，就可以看到sentinel的控制台了：">http://localhost:8080页面，就可以看到sentinel的控制台了：</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715190827846.png"></p><p>需要输入账号和密码，默认都是：sentinel</p><p>登录后，发现一片空白，什么都没有：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715191134448.png"></p><p>这是因为我们还没有与微服务整合。</p><h2 id="1-4-微服务整合Sentinel"><a href="#1-4-微服务整合Sentinel" class="headerlink" title="1.4.微服务整合Sentinel"></a>1.4.微服务整合Sentinel</h2><p>我们在order-service中整合sentinel，并连接sentinel的控制台，步骤如下：</p><p>1）引入sentinel依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sentinel--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2）配置控制台</p><p>修改application.yaml文件，添加下面内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8088</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span> </span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:8080</span></span><br></pre></td></tr></table></figure><p>3）访问order-service的任意端点</p><p>打开浏览器，访问<a href="http://localhost:8088/order/101%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%89%8D%E8%83%BD%E8%A7%A6%E5%8F%91sentinel%E7%9A%84%E7%9B%91%E6%8E%A7%E3%80%82">http://localhost:8088/order/101，这样才能触发sentinel的监控。</a></p><p>然后再访问sentinel的控制台，查看效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715191241799.png"></p><h1 id="2-流量控制"><a href="#2-流量控制" class="headerlink" title="2.流量控制"></a>2.流量控制</h1><p>雪崩问题虽然有四种方案，但是限流是避免服务因突发的流量而发生故障，是对微服务雪崩问题的预防。我们先学习这种模式。</p><h2 id="2-1-簇点链路"><a href="#2-1-簇点链路" class="headerlink" title="2.1.簇点链路"></a>2.1.簇点链路</h2><p>当请求进入微服务时，首先会访问DispatcherServlet，然后进入Controller、Service、Mapper，这样的一个调用链就叫做<strong>簇点链路</strong>。簇点链路中被监控的每一个接口就是一个<strong>资源</strong>。</p><p>默认情况下sentinel会监控SpringMVC的每一个端点（Endpoint，也就是controller中的方法），因此SpringMVC的每一个端点（Endpoint）就是调用链路中的一个资源。</p><p>例如，我们刚才访问的order-service中的OrderController中的端点：&#x2F;order&#x2F;{orderId}</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715191757319.png"></p><p>流控、熔断等都是针对簇点链路中的资源来设置的，因此我们可以点击对应资源后面的按钮来设置规则：</p><ul><li>流控：流量控制</li><li>降级：降级熔断</li><li>热点：热点参数限流，是限流的一种</li><li>授权：请求的权限控制</li></ul><h2 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1.快速入门"></a>2.1.快速入门</h2><h3 id="2-1-1-示例"><a href="#2-1-1-示例" class="headerlink" title="2.1.1.示例"></a>2.1.1.示例</h3><p>点击资源&#x2F;order&#x2F;{orderId}后面的流控按钮，就可以弹出表单。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715191757319.png"></p><p>表单中可以填写限流规则，如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715192010657.png"></p><p>其含义是限制 &#x2F;order&#x2F;{orderId}这个资源的单机QPS为1，即每秒只允许1次请求，超出的请求会被拦截并报错。</p><h3 id="2-1-2-练习："><a href="#2-1-2-练习：" class="headerlink" title="2.1.2.练习："></a>2.1.2.练习：</h3><p>需求：给 &#x2F;order&#x2F;{orderId}这个资源设置流控规则，QPS不能超过 5，然后测试。</p><p>1）首先在sentinel控制台添加限流规则</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715192455429.png"></p><p>2）利用jmeter测试</p><p>如果没有用过jmeter，可以参考课前资料提供的文档《Jmeter快速入门.md》</p><p>课前资料提供了编写好的Jmeter测试样例：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200431615.png"></p><p>打开jmeter，导入课前资料提供的测试样例：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200537171.png"></p><p>选择：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200635414.png"></p><p>20个用户，2秒内运行完，QPS是10，超过了5.</p><p>选中<code>流控入门，QPS&lt;5</code>右键运行：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200804594.png"></p><blockquote><p>注意，不要点击菜单中的执行按钮来运行。</p></blockquote><p>结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715200853671.png"></p><p>可以看到，成功的请求每次只有5个</p><h2 id="2-2-流控模式"><a href="#2-2-流控模式" class="headerlink" title="2.2.流控模式"></a>2.2.流控模式</h2><p>在添加限流规则时，点击高级选项，可以选择三种<strong>流控模式</strong>：</p><ul><li>直接：统计当前资源的请求，触发阈值时对当前资源直接限流，也是默认的模式</li><li>关联：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</li><li>链路：统计从指定链路访问到本资源的请求，触发阈值时，对指定链路限流</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715201827886.png"></p><p>快速入门测试的就是直接模式。</p><h3 id="2-2-1-关联模式"><a href="#2-2-1-关联模式" class="headerlink" title="2.2.1.关联模式"></a>2.2.1.关联模式</h3><p><strong>关联模式</strong>：统计与当前资源相关的另一个资源，触发阈值时，对当前资源限流</p><p><strong>配置规则</strong>：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715202540786.png"></p><p><strong>语法说明</strong>：当&#x2F;write资源访问量触发阈值时，就会对&#x2F;read资源限流，避免影响&#x2F;write资源。</p><p><strong>使用场景</strong>：比如用户支付时需要修改订单状态，同时用户要查询订单。查询和修改操作会争抢数据库锁，产生竞争。业务需求是优先支付和更新订单的业务，因此当修改订单业务触发阈值时，需要对查询订单业务限流。</p><p><strong>需求说明</strong>：</p><ul><li><p>在OrderController新建两个端点：&#x2F;order&#x2F;query和&#x2F;order&#x2F;update，无需实现业务</p></li><li><p>配置流控规则，当&#x2F;order&#x2F; update资源被访问的QPS超过5时，对&#x2F;order&#x2F;query请求限流</p></li></ul><p>1）定义&#x2F;order&#x2F;query端点，模拟订单查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）定义&#x2F;order&#x2F;update端点，模拟订单更新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;更新订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务，查看sentinel控制台的簇点链路：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716101805951.png"></p><p>3）配置流控规则</p><p>对哪个端点限流，就点击哪个端点后面的按钮。我们是对订单查询&#x2F;order&#x2F;query限流，因此点击它后面的按钮：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716101934499.png"></p><p>在表单中填写流控规则：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716102103814.png"></p><p>4）在Jmeter测试</p><p>选择《流控模式-关联》：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716102416266.png"></p><p>可以看到1000个用户，100秒，因此QPS为10，超过了我们设定的阈值：5</p><p>查看http请求：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716102532554.png"></p><p>请求的目标是&#x2F;order&#x2F;update，这样这个断点就会触发阈值。</p><p>但限流的目标是&#x2F;order&#x2F;query，我们在浏览器访问，可以发现：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716102636030.png"></p><p>确实被限流了。</p><p>5）总结</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716103143002.png"></p><h3 id="2-2-2-链路模式"><a href="#2-2-2-链路模式" class="headerlink" title="2.2.2.链路模式"></a>2.2.2.链路模式</h3><p><strong>链路模式</strong>：只针对从指定链路访问到本资源的请求做统计，判断是否超过阈值。</p><p><strong>配置示例</strong>：</p><p>例如有两条请求链路：</p><ul><li><p>&#x2F;test1 –&gt; &#x2F;common</p></li><li><p>&#x2F;test2 –&gt; &#x2F;common</p></li></ul><p>如果只希望统计从&#x2F;test2进入到&#x2F;common的请求，则可以这样配置：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716103536346.png"></p><p><strong>实战案例</strong></p><p>需求：有查询订单和创建订单业务，两者都需要查询商品。针对从查询订单进入到查询商品的请求统计，并设置限流。</p><p>步骤：</p><ol><li><p>在OrderService中添加一个queryGoods方法，不用实现业务</p></li><li><p>在OrderController中，改造&#x2F;order&#x2F;query端点，调用OrderService中的queryGoods方法</p></li><li><p>在OrderController中添加一个&#x2F;order&#x2F;save的端点，调用OrderService的queryGoods方法</p></li><li><p>给queryGoods设置限流规则，从&#x2F;order&#x2F;query进入queryGoods的方法限制QPS必须小于2</p></li></ol><p>实现：</p><h4 id="1）添加查询商品方法"><a href="#1）添加查询商品方法" class="headerlink" title="1）添加查询商品方法"></a>1）添加查询商品方法</h4><p>在order-service服务中，给OrderService类添加一个queryGoods方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryGoods</span><span class="params">()</span>&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）查询订单时，查询商品"><a href="#2）查询订单时，查询商品" class="headerlink" title="2）查询订单时，查询商品"></a>2）查询订单时，查询商品</h4><p>在order-service的OrderController中，修改&#x2F;order&#x2F;query端点的业务逻辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/query&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询商品</span></span><br><span class="line">    orderService.queryGoods();</span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;查询订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）新增订单，查询商品"><a href="#3）新增订单，查询商品" class="headerlink" title="3）新增订单，查询商品"></a>3）新增订单，查询商品</h4><p>在order-service的OrderController中，修改&#x2F;order&#x2F;save端点，模拟新增订单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveOrder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 查询商品</span></span><br><span class="line">    orderService.queryGoods();</span><br><span class="line">    <span class="comment">// 查询订单</span></span><br><span class="line">    System.err.println(<span class="string">&quot;新增订单&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;新增订单成功&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）给查询商品添加资源标记"><a href="#4）给查询商品添加资源标记" class="headerlink" title="4）给查询商品添加资源标记"></a>4）给查询商品添加资源标记</h4><p>默认情况下，OrderService中的方法是不被Sentinel监控的，需要我们自己通过注解来标记要监控的方法。</p><p>给OrderService的queryGoods方法添加@SentinelResource注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SentinelResource(&quot;goods&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">queryGoods</span><span class="params">()</span>&#123;</span><br><span class="line">    System.err.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>链路模式中，是对不同来源的两个链路做监控。但是sentinel默认会给进入SpringMVC的所有请求设置同一个root资源，会导致链路模式失效。</p><p>我们需要关闭这种对SpringMVC的资源聚合，修改order-service服务的application.yml文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">web-context-unify:</span> <span class="literal">false</span> <span class="comment"># 关闭context整合</span></span><br></pre></td></tr></table></figure><p>重启服务，访问&#x2F;order&#x2F;query和&#x2F;order&#x2F;save，可以查看到sentinel的簇点链路规则中，出现了新的资源：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716105227163.png"></p><h4 id="5）添加流控规则"><a href="#5）添加流控规则" class="headerlink" title="5）添加流控规则"></a>5）添加流控规则</h4><p>点击goods资源后面的流控按钮，在弹出的表单中填写下面信息：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716105408723.png"></p><p>只统计从&#x2F;order&#x2F;query进入&#x2F;goods的资源，QPS阈值为2，超出则被限流。</p><h4 id="6）Jmeter测试"><a href="#6）Jmeter测试" class="headerlink" title="6）Jmeter测试"></a>6）Jmeter测试</h4><p>选择《流控模式-链路》：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716105612312.png"></p><p>可以看到这里200个用户，50秒内发完，QPS为4，超过了我们设定的阈值2</p><p>一个http请求是访问&#x2F;order&#x2F;save：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716105812789.png"></p><p>运行的结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716110027064.png"></p><p>完全不受影响。</p><p>另一个是访问&#x2F;order&#x2F;query：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716105855951.png"></p><p>运行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716105956401.png"></p><p>每次只有2个通过。</p><h3 id="2-2-3-总结"><a href="#2-2-3-总结" class="headerlink" title="2.2.3.总结"></a>2.2.3.总结</h3><p>流控模式有哪些？</p><p>•直接：对当前资源限流</p><p>•关联：高优先级资源触发阈值，对低优先级资源限流。</p><p>•链路：阈值统计时，只统计从指定资源进入当前资源的请求，是对请求来源的限流</p><h2 id="2-3-流控效果"><a href="#2-3-流控效果" class="headerlink" title="2.3.流控效果"></a>2.3.流控效果</h2><p>在流控的高级选项中，还有一个流控效果选项：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716110225104.png"></p><p>流控效果是指请求达到流控阈值时应该采取的措施，包括三种：</p><ul><li><p>快速失败：达到阈值后，新的请求会被立即拒绝并抛出FlowException异常。是默认的处理方式。</p></li><li><p>warm up：预热模式，对超出阈值的请求同样是拒绝并抛出异常。但这种模式阈值会动态变化，从一个较小值逐渐增加到最大阈值。</p></li><li><p>排队等待：让所有的请求按照先后次序排队执行，两个请求的间隔不能小于指定时长</p></li></ul><h3 id="2-3-1-warm-up"><a href="#2-3-1-warm-up" class="headerlink" title="2.3.1.warm up"></a>2.3.1.warm up</h3><p>阈值一般是一个微服务能承担的最大QPS，但是一个服务刚刚启动时，一切资源尚未初始化（<strong>冷启动</strong>），如果直接将QPS跑到最大值，可能导致服务瞬间宕机。</p><p>warm up也叫<strong>预热模式</strong>，是应对服务冷启动的一种方案。请求阈值初始值是 maxThreshold &#x2F; coldFactor，持续指定时长后，逐渐提高到maxThreshold值。而coldFactor的默认值是3.</p><p>例如，我设置QPS的maxThreshold为10，预热时间为5秒，那么初始阈值就是 10 &#x2F; 3 ，也就是3，然后在5秒后逐渐增长到10.</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716110629796.png"></p><p><strong>案例</strong></p><p>需求：给&#x2F;order&#x2F;{orderId}这个资源设置限流，最大QPS为10，利用warm up效果，预热时长为5秒</p><h4 id="1）配置流控规则："><a href="#1）配置流控规则：" class="headerlink" title="1）配置流控规则："></a>1）配置流控规则：</h4><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716111012387.png"></p><h4 id="2）Jmeter测试"><a href="#2）Jmeter测试" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《流控效果，warm up》：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716111136699.png"></p><p>QPS为10.</p><p>刚刚启动时，大部分请求失败，成功的只有3个，说明QPS被限定在3：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716111303701.png"></p><p>随着时间推移，成功比例越来越高：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716111404717.png"></p><p>到Sentinel控制台查看实时监控：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716111526480.png"></p><p>一段时间后：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716111658541.png"></p><h3 id="2-3-2-排队等待"><a href="#2-3-2-排队等待" class="headerlink" title="2.3.2.排队等待"></a>2.3.2.排队等待</h3><p>当请求超过QPS阈值时，快速失败和warm up 会拒绝新的请求并抛出异常。</p><p>而排队等待则是让所有请求进入一个队列中，然后按照阈值允许的时间间隔依次执行。后来的请求必须等待前面执行完成，如果请求预期的等待时间超出最大时长，则会被拒绝。</p><p>工作原理</p><p>例如：QPS &#x3D; 5，意味着每200ms处理一个队列中的请求；timeout &#x3D; 2000，意味着<strong>预期等待时长</strong>超过2000ms的请求会被拒绝并抛出异常。</p><p>那什么叫做预期等待时长呢？</p><p>比如现在一下子来了12 个请求，因为每200ms执行一个请求，那么：</p><ul><li>第6个请求的<strong>预期等待时长</strong> &#x3D;  200 * （6 - 1） &#x3D; 1000ms</li><li>第12个请求的预期等待时长 &#x3D; 200 * （12-1） &#x3D; 2200ms</li></ul><p>现在，第1秒同时接收到10个请求，但第2秒只有1个请求，此时QPS的曲线这样的：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716113147176.png"></p><p>如果使用队列模式做流控，所有进入的请求都要排队，以固定的200ms的间隔执行，QPS会变的很平滑：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716113426524.png"></p><p>平滑的QPS曲线，对于服务器来说是更友好的。</p><p><strong>案例</strong></p><p>需求：给&#x2F;order&#x2F;{orderId}这个资源设置限流，最大QPS为10，利用排队的流控效果，超时时长设置为5s</p><h4 id="1）添加流控规则"><a href="#1）添加流控规则" class="headerlink" title="1）添加流控规则"></a>1）添加流控规则</h4><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716114048918.png"></p><h4 id="2）Jmeter测试-1"><a href="#2）Jmeter测试-1" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《流控效果，队列》：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716114243558.png"></p><p>QPS为15，已经超过了我们设定的10。</p><p>如果是之前的 快速失败、warmup模式，超出的请求应该会直接报错。</p><p>但是我们看看队列模式的运行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716114429361.png"></p><p>全部都通过了。</p><p>再去sentinel查看实时监控的QPS曲线：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716114522935.png"></p><p>QPS非常平滑，一致保持在10，但是超出的请求没有被拒绝，而是放入队列。因此<strong>响应时间</strong>（等待时间）会越来越长。</p><p>当队列满了以后，才会有部分请求失败：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716114651137.png"></p><h3 id="2-3-3-总结"><a href="#2-3-3-总结" class="headerlink" title="2.3.3.总结"></a>2.3.3.总结</h3><p>流控效果有哪些？</p><ul><li><p>快速失败：QPS超过阈值时，拒绝新的请求</p></li><li><p>warm up： QPS超过阈值时，拒绝新的请求；QPS阈值是逐渐提升的，可以避免冷启动时高并发导致服务宕机。</p></li><li><p>排队等待：请求会进入队列，按照阈值允许的时间间隔依次执行请求；如果请求预期等待时长大于超时时间，直接拒绝</p></li></ul><h2 id="2-4-热点参数限流"><a href="#2-4-热点参数限流" class="headerlink" title="2.4.热点参数限流"></a>2.4.热点参数限流</h2><p>之前的限流是统计访问某个资源的所有请求，判断是否超过QPS阈值。而热点参数限流是<strong>分别统计参数值相同的请求</strong>，判断是否超过QPS阈值。</p><h3 id="2-4-1-全局参数限流"><a href="#2-4-1-全局参数限流" class="headerlink" title="2.4.1.全局参数限流"></a>2.4.1.全局参数限流</h3><p>例如，一个根据id查询商品的接口：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716115014663.png"></p><p>访问&#x2F;goods&#x2F;{id}的请求中，id参数值会有变化，热点参数限流会根据参数值分别统计QPS，统计结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716115131463.png"></p><p>当id&#x3D;1的请求触发阈值被限流时，id值不为1的请求不受影响。</p><p>配置示例：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716115232426.png"></p><p>代表的含义是：对hot这个资源的0号参数（第一个参数）做统计，每1秒<strong>相同参数值</strong>的请求数不能超过5</p><h3 id="2-4-2-热点参数限流"><a href="#2-4-2-热点参数限流" class="headerlink" title="2.4.2.热点参数限流"></a>2.4.2.热点参数限流</h3><p>刚才的配置中，对查询商品这个接口的所有商品一视同仁，QPS都限定为5.</p><p>而在实际开发中，可能部分商品是热点商品，例如秒杀商品，我们希望这部分商品的QPS限制与其它商品不一样，高一些。那就需要配置热点参数限流的高级选项了：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716115717523.png"></p><p>结合上一个配置，这里的含义是对0号的long类型参数限流，每1秒相同参数的QPS不能超过5，有两个例外：</p><p>•如果参数值是100，则每1秒允许的QPS为10</p><p>•如果参数值是101，则每1秒允许的QPS为15</p><h3 id="2-4-4-案例"><a href="#2-4-4-案例" class="headerlink" title="2.4.4.案例"></a>2.4.4.案例</h3><p><strong>案例需求</strong>：给&#x2F;order&#x2F;{orderId}这个资源添加热点参数限流，规则如下：</p><p>•默认的热点参数规则是每1秒请求量不超过2</p><p>•给102这个参数设置例外：每1秒请求量不超过4</p><p>•给103这个参数设置例外：每1秒请求量不超过10</p><p><strong>注意事项</strong>：热点参数限流对默认的SpringMVC资源无效，需要利用@SentinelResource注解标记资源</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230823214153625.png"></p><h4 id="1）标记资源"><a href="#1）标记资源" class="headerlink" title="1）标记资源"></a>1）标记资源</h4><p>给order-service中的OrderController中的&#x2F;order&#x2F;{orderId}资源添加注解：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120033572.png"></p><h4 id="2）热点参数限流规则"><a href="#2）热点参数限流规则" class="headerlink" title="2）热点参数限流规则"></a>2）热点参数限流规则</h4><p>访问该接口，可以看到我们标记的hot资源出现了：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120208509.png"></p><p>这里不要点击hot后面的按钮，页面有BUG</p><p>点击左侧菜单中<strong>热点规则</strong>菜单：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120319009.png"></p><p>点击新增，填写表单：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120536714.png"></p><h4 id="3）Jmeter测试"><a href="#3）Jmeter测试" class="headerlink" title="3）Jmeter测试"></a>3）Jmeter测试</h4><p>选择《热点参数限流 QPS1》：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120754527.png"></p><p>这里发起请求的QPS为5.</p><p>包含3个http请求：</p><p>普通参数，QPS阈值为2</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120840501.png"></p><p>运行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716121105567.png"></p><p>例外项，QPS阈值为4</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120900365.png"></p><p>运行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716121201630.png"></p><p>例外项，QPS阈值为10</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716120919131.png"></p><p>运行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716121220305.png"></p><h1 id="3-隔离和降级"><a href="#3-隔离和降级" class="headerlink" title="3.隔离和降级"></a>3.隔离和降级</h1><p>限流是一种预防措施，虽然限流可以尽量避免因高并发而引起的服务故障，但服务还会因为其它原因而故障。</p><p>而要将这些故障控制在一定范围，避免雪崩，就要靠<strong>线程隔离</strong>（舱壁模式）和<strong>熔断降级</strong>手段了。</p><p><strong>线程隔离</strong>之前讲到过：调用者在调用服务提供者时，给每个调用的请求分配独立线程池，出现故障时，最多消耗这个线程池内资源，避免把调用者的所有资源耗尽。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715173215243.png"></p><p><strong>熔断降级</strong>：是在调用方这边加入断路器，统计对服务提供者的调用，如果调用的失败比例过高，则熔断该业务，不允许访问该服务的提供者了。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210715173428073.png"></p><p>可以看到，不管是线程隔离还是熔断降级，都是对<strong>客户端</strong>（调用方）的保护。需要在<strong>调用方</strong> 发起远程调用时做线程隔离、或者服务熔断。</p><p>而我们的微服务远程调用都是基于Feign来完成的，因此我们需要将Feign与Sentinel整合，在Feign里面实现线程隔离和服务熔断。</p><h2 id="3-1-FeignClient整合Sentinel"><a href="#3-1-FeignClient整合Sentinel" class="headerlink" title="3.1.FeignClient整合Sentinel"></a>3.1.FeignClient整合Sentinel</h2><p>SpringCloud中，微服务调用都是通过Feign来实现的，因此做客户端保护必须整合Feign和Sentinel。</p><h3 id="3-1-1-修改配置，开启sentinel功能"><a href="#3-1-1-修改配置，开启sentinel功能" class="headerlink" title="3.1.1.修改配置，开启sentinel功能"></a>3.1.1.修改配置，开启sentinel功能</h3><p>修改OrderService的application.yml文件，开启Feign的Sentinel功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line">  <span class="attr">sentinel:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment"># 开启feign对sentinel的支持</span></span><br></pre></td></tr></table></figure><h3 id="3-1-2-编写失败降级逻辑"><a href="#3-1-2-编写失败降级逻辑" class="headerlink" title="3.1.2.编写失败降级逻辑"></a>3.1.2.编写失败降级逻辑</h3><p>业务失败后，不能直接报错，而应该返回用户一个友好提示或者默认结果，这个就是失败降级逻辑。</p><p>给FeignClient编写失败后的降级逻辑</p><p>①方式一：FallbackClass，无法对远程调用的异常做处理</p><p>②方式二：FallbackFactory，可以对远程调用的异常做处理，我们选择这种</p><p>这里我们演示方式二的失败降级处理。</p><p><strong>步骤一</strong>：在feing-api项目中定义类，实现FallbackFactory：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716122403502.png"></p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.feign.clients.fallback;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.clients.UserClient;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.pojo.User;</span><br><span class="line"><span class="keyword">import</span> feign.hystrix.FallbackFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserClientFallbackFactory</span> <span class="keyword">implements</span> <span class="title class_">FallbackFactory</span>&lt;UserClient&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserClient <span class="title function_">create</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClient</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;查询用户异常&quot;</span>, throwable);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>步骤二</strong>：在feing-api项目中的DefaultFeignConfiguration类中将UserClientFallbackFactory注册为一个Bean：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> UserClientFallbackFactory <span class="title function_">userClientFallbackFactory</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserClientFallbackFactory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>步骤三</strong>：在feing-api项目中的UserClient接口中使用UserClientFallbackFactory：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.itcast.feign.clients.fallback.UserClientFallbackFactory;</span><br><span class="line"><span class="keyword">import</span> cn.itcast.feign.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;userservice&quot;, fallbackFactory = UserClientFallbackFactory.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启后，访问一次订单查询业务，然后查看sentinel控制台，可以看到新的簇点链路：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716123705780.png"></p><h3 id="3-1-3-总结"><a href="#3-1-3-总结" class="headerlink" title="3.1.3.总结"></a>3.1.3.总结</h3><p>Sentinel支持的雪崩解决方案：</p><ul><li>线程隔离（仓壁模式）</li><li>降级熔断</li></ul><p>Feign整合Sentinel的步骤：</p><ul><li>在application.yml中配置：feign.sentienl.enable&#x3D;true</li><li>给FeignClient编写FallbackFactory并注册为Bean</li><li>将FallbackFactory配置到FeignClient</li></ul><h2 id="3-2-线程隔离（舱壁模式）"><a href="#3-2-线程隔离（舱壁模式）" class="headerlink" title="3.2.线程隔离（舱壁模式）"></a>3.2.线程隔离（舱壁模式）</h2><h3 id="3-2-1-线程隔离的实现方式"><a href="#3-2-1-线程隔离的实现方式" class="headerlink" title="3.2.1.线程隔离的实现方式"></a>3.2.1.线程隔离的实现方式</h3><p>线程隔离有两种方式实现：</p><ul><li><p>线程池隔离</p></li><li><p>信号量隔离（Sentinel默认采用）</p></li></ul><p>如图：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716123036937.png"></p><p><strong>线程池隔离</strong>：给每个服务调用业务分配一个线程池，利用线程池本身实现隔离效果</p><p><strong>信号量隔离</strong>：不创建线程池，而是计数器模式，记录业务使用的线程数量，达到信号量上限时，禁止新的请求。</p><p>两者的优缺点：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716123240518.png"></p><h3 id="3-2-2-sentinel的线程隔离"><a href="#3-2-2-sentinel的线程隔离" class="headerlink" title="3.2.2.sentinel的线程隔离"></a>3.2.2.sentinel的线程隔离</h3><p><strong>用法说明</strong>：</p><p>在添加限流规则时，可以选择两种阈值类型：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716123411217.png"></p><ul><li><p>QPS：就是每秒的请求数，在快速入门中已经演示过</p></li><li><p>线程数：是该资源能使用用的tomcat线程数的最大值。也就是通过限制线程数量，实现<strong>线程隔离</strong>（舱壁模式）。</p></li></ul><p><strong>案例需求</strong>：给 order-service服务中的UserClient的查询用户接口设置流控规则，线程数不能超过 2。然后利用jemeter测试。</p><h4 id="1）配置隔离规则"><a href="#1）配置隔离规则" class="headerlink" title="1）配置隔离规则"></a>1）配置隔离规则</h4><p>选择feign接口后面的流控按钮：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716123831992.png"></p><p>填写表单：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716123936844.png"></p><h4 id="2）Jmeter测试-2"><a href="#2）Jmeter测试-2" class="headerlink" title="2）Jmeter测试"></a>2）Jmeter测试</h4><p>选择《阈值类型-线程数&lt;2》：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716124229894.png"></p><p>一次发生10个请求，有较大概率并发线程数超过2，而超出的请求会走之前定义的失败降级逻辑。</p><p>查看运行结果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716124147820.png"></p><p>发现虽然结果都是通过了，不过部分请求得到的响应是降级返回的null信息。</p><h3 id="3-2-3-总结"><a href="#3-2-3-总结" class="headerlink" title="3.2.3.总结"></a>3.2.3.总结</h3><p>线程隔离的两种手段是？</p><ul><li><p>信号量隔离</p></li><li><p>线程池隔离</p></li></ul><p>信号量隔离的特点是？</p><ul><li>基于计数器模式，简单，开销小</li></ul><p>线程池隔离的特点是？</p><ul><li>基于线程池模式，有额外开销，但隔离控制更强</li></ul><h2 id="3-3-熔断降级"><a href="#3-3-熔断降级" class="headerlink" title="3.3.熔断降级"></a>3.3.熔断降级</h2><p>熔断降级是解决雪崩问题的重要手段。其思路是由<strong>断路器</strong>统计服务调用的异常比例、慢请求比例，如果超出阈值则会<strong>熔断</strong>该服务。即拦截访问该服务的一切请求；而当服务恢复时，断路器会放行访问该服务的请求。</p><p>断路器控制熔断和放行是通过状态机来完成的：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716130958518.png"></p><p>状态机包括三个状态：</p><ul><li>closed：关闭状态，断路器放行所有请求，并开始统计异常比例、慢请求比例。超过阈值则切换到open状态</li><li>open：打开状态，服务调用被<strong>熔断</strong>，访问被熔断服务的请求会被拒绝，快速失败，直接走降级逻辑。Open状态5秒后会进入half-open状态</li><li>half-open：半开状态，放行一次请求，根据执行结果来判断接下来的操作。<ul><li>请求成功：则切换到closed状态</li><li>请求失败：则切换到open状态</li></ul></li></ul><p>断路器熔断策略有三种：慢调用、异常比例、异常数</p><h3 id="3-3-1-慢调用"><a href="#3-3-1-慢调用" class="headerlink" title="3.3.1.慢调用"></a>3.3.1.慢调用</h3><p><strong>慢调用</strong>：业务的响应时长（RT）大于指定时长的请求认定为慢调用请求。在指定时间内，如果请求数量超过设定的最小数量，慢调用比例大于设定的阈值，则触发熔断。</p><p>例如：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716145934347.png"></p><p>解读：RT超过500ms的调用是慢调用，统计最近10000ms内的请求，如果请求量超过10次，并且慢调用比例不低于0.5，则触发熔断，熔断时长为5秒。然后进入half-open状态，放行一次请求做测试。</p><p><strong>案例</strong></p><p>需求：给 UserClient的查询用户接口设置降级规则，慢调用的RT阈值为50ms，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5</p><h4 id="1）设置慢调用"><a href="#1）设置慢调用" class="headerlink" title="1）设置慢调用"></a>1）设置慢调用</h4><p>修改user-service中的&#x2F;user&#x2F;{id}这个接口的业务。通过休眠模拟一个延迟时间：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716150234787.png"></p><p>此时，orderId&#x3D;101的订单，关联的是id为1的用户，调用时长为60ms：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716150510956.png"></p><p>orderId&#x3D;102的订单，关联的是id为2的用户，调用时长为非常短；</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716150605208.png"></p><h4 id="2）设置熔断规则"><a href="#2）设置熔断规则" class="headerlink" title="2）设置熔断规则"></a>2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716150654094.png"></p><p>规则：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716150740434.png"></p><p>超过50ms的请求都会被认为是慢请求</p><h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>在浏览器访问：<a href="http://localhost:8088/order/101%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%EF%BC%9A">http://localhost:8088/order/101，快速刷新5次，可以发现：</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716150911004.png"></p><p>触发了熔断，请求时长缩短至5ms，快速失败了，并且走降级逻辑，返回的null</p><p>在浏览器访问：<a href="http://localhost:8088/order/102%EF%BC%8C%E7%AB%9F%E7%84%B6%E4%B9%9F%E8%A2%AB%E7%86%94%E6%96%AD%E4%BA%86%EF%BC%9A">http://localhost:8088/order/102，竟然也被熔断了：</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716151107785.png"></p><h3 id="3-3-2-异常比例、异常数"><a href="#3-3-2-异常比例、异常数" class="headerlink" title="3.3.2.异常比例、异常数"></a>3.3.2.异常比例、异常数</h3><p><strong>异常比例或异常数</strong>：统计指定时间内的调用，如果调用次数超过指定请求数，并且出现异常的比例达到设定的比例阈值（或超过指定异常数），则触发熔断。</p><p>例如，一个异常比例设置：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716131430682.png"></p><p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于0.4，则触发熔断。</p><p>一个异常数设置：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716131522912.png"></p><p>解读：统计最近1000ms内的请求，如果请求量超过10次，并且异常比例不低于2次，则触发熔断。</p><p><strong>案例</strong></p><p>需求：给 UserClient的查询用户接口设置降级规则，统计时间为1秒，最小请求数量为5，失败阈值比例为0.4，熔断时长为5s</p><h4 id="1）设置异常请求"><a href="#1）设置异常请求" class="headerlink" title="1）设置异常请求"></a>1）设置异常请求</h4><p>首先，修改user-service中的&#x2F;user&#x2F;{id}这个接口的业务。手动抛出异常，以触发异常比例的熔断：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716151348183.png"></p><p>也就是说，id 为 2时，就会触发异常</p><h4 id="2）设置熔断规则-1"><a href="#2）设置熔断规则-1" class="headerlink" title="2）设置熔断规则"></a>2）设置熔断规则</h4><p>下面，给feign接口设置降级规则：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716150654094.png"></p><p>规则：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716151538785.png"></p><p>在5次请求中，只要异常比例超过0.4，也就是有2次以上的异常，就会触发熔断。</p><h4 id="3）测试-1"><a href="#3）测试-1" class="headerlink" title="3）测试"></a>3）测试</h4><p>在浏览器快速访问：<a href="http://localhost:8088/order/102%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%88%B7%E6%96%B05%E6%AC%A1%EF%BC%8C%E8%A7%A6%E5%8F%91%E7%86%94%E6%96%AD%EF%BC%9A">http://localhost:8088/order/102，快速刷新5次，触发熔断：</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716151722916.png"></p><p>此时，我们去访问本来应该正常的103：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716151844817.png"></p><h1 id="4-授权规则"><a href="#4-授权规则" class="headerlink" title="4.授权规则"></a>4.授权规则</h1><p>授权规则可以对请求方来源做判断和控制。</p><h2 id="4-1-授权规则"><a href="#4-1-授权规则" class="headerlink" title="4.1.授权规则"></a>4.1.授权规则</h2><h3 id="4-1-1-基本规则"><a href="#4-1-1-基本规则" class="headerlink" title="4.1.1.基本规则"></a>4.1.1.基本规则</h3><p>授权规则可以对调用方的来源做控制，有白名单和黑名单两种方式。</p><ul><li><p>白名单：来源（origin）在白名单内的调用者允许访问</p></li><li><p>黑名单：来源（origin）在黑名单内的调用者不允许访问</p></li></ul><p>点击左侧菜单的授权，可以看到授权规则：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716152010750.png"></p><ul><li><p>资源名：就是受保护的资源，例如&#x2F;order&#x2F;{orderId}</p></li><li><p>流控应用：是来源者的名单，</p><ul><li>如果是勾选白名单，则名单中的来源被许可访问。</li><li>如果是勾选黑名单，则名单中的来源被禁止访问。</li></ul></li></ul><p>比如：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716152349191.png"></p><p>我们允许请求从gateway到order-service，不允许浏览器访问order-service，那么白名单中就要填写<strong>网关的来源名称（origin）</strong>。</p><h3 id="4-1-2-如何获取origin"><a href="#4-1-2-如何获取origin" class="headerlink" title="4.1.2.如何获取origin"></a>4.1.2.如何获取origin</h3><p>Sentinel是通过RequestOriginParser这个接口的parseOrigin来获取请求的来源的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从请求request对象中获取origin，获取方式自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的作用就是从request对象中，获取请求者的origin值并返回。</p><p>默认情况下，sentinel不管请求者从哪里来，返回值永远是default，也就是说一切请求的来源都被认为是一样的值default。</p><p>因此，我们需要自定义这个接口的实现，让<strong>不同的请求，返回不同的origin</strong>。</p><p>例如order-service服务中，我们定义一个RequestOriginParser的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.sentinel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.RequestOriginParser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderOriginParser</span> <span class="keyword">implements</span> <span class="title class_">RequestOriginParser</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">parseOrigin</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.获取请求头</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;origin&quot;</span>);</span><br><span class="line">        <span class="comment">// 2.非空判断</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(origin)) &#123;</span><br><span class="line">            origin = <span class="string">&quot;blank&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> origin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们会尝试从request-header中获取origin值。</p><h3 id="4-1-3-给网关添加请求头"><a href="#4-1-3-给网关添加请求头" class="headerlink" title="4.1.3.给网关添加请求头"></a>4.1.3.给网关添加请求头</h3><p>既然获取请求origin的方式是从reques-header中获取origin值，我们必须让<strong>所有从gateway路由到微服务的请求都带上origin头</strong>。</p><p>这个需要利用之前学习的一个GatewayFilter来实现，AddRequestHeaderGatewayFilter。</p><p>修改gateway服务中的application.yml，添加一个defaultFilter：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">default-filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">AddRequestHeader=origin,gateway</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="comment"># ...略</span></span><br></pre></td></tr></table></figure><p>这样，从gateway路由的所有请求都会带上origin头，值为gateway。而从其它地方到达微服务的请求则没有这个头。</p><h3 id="4-1-4-配置授权规则"><a href="#4-1-4-配置授权规则" class="headerlink" title="4.1.4.配置授权规则"></a>4.1.4.配置授权规则</h3><p>接下来，我们添加一个授权规则，放行origin值为gateway的请求。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716153250134.png"></p><p>配置如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716153301069.png"></p><p>现在，我们直接跳过网关，访问order-service服务：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716153348396.png"></p><p>通过网关访问：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716153434095.png"></p><h2 id="4-2-自定义异常结果"><a href="#4-2-自定义异常结果" class="headerlink" title="4.2.自定义异常结果"></a>4.2.自定义异常结果</h2><p>默认情况下，发生限流、降级、授权拦截时，都会抛出异常到调用方。异常结果都是flow limmiting（限流）。这样不够友好，无法得知是限流还是降级还是授权拦截。</p><h3 id="4-2-1-异常类型"><a href="#4-2-1-异常类型" class="headerlink" title="4.2.1.异常类型"></a>4.2.1.异常类型</h3><p>而如果要自定义异常时的返回结果，需要实现BlockExceptionHandler接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求被限流、降级、授权拦截时抛出的异常：BlockException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有三个参数：</p><ul><li>HttpServletRequest request：request对象</li><li>HttpServletResponse response：response对象</li><li>BlockException e：被sentinel拦截时抛出的异常</li></ul><p>这里的BlockException包含多个不同的子类：</p><table><thead><tr><th><strong>异常</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>FlowException</td><td>限流异常</td></tr><tr><td>ParamFlowException</td><td>热点参数限流的异常</td></tr><tr><td>DegradeException</td><td>降级异常</td></tr><tr><td>AuthorityException</td><td>授权规则异常</td></tr><tr><td>SystemBlockException</td><td>系统规则异常</td></tr></tbody></table><h3 id="4-2-2-自定义异常处理"><a href="#4-2-2-自定义异常处理" class="headerlink" title="4.2.2.自定义异常处理"></a>4.2.2.自定义异常处理</h3><p>下面，我们就在order-service定义一个自定义异常处理类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.order.sentinel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.adapter.spring.webmvc.callback.BlockExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.BlockException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.authority.AuthorityException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.degrade.DegradeException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.FlowException;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">BlockExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;未知异常&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">429</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> FlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被限流了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ParamFlowException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被热点参数限流&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> DegradeException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;请求被降级了&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> AuthorityException) &#123;</span><br><span class="line">            msg = <span class="string">&quot;没有权限访问&quot;</span>;</span><br><span class="line">            status = <span class="number">401</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        response.setStatus(status);</span><br><span class="line">        response.getWriter().println(<span class="string">&quot;&#123;\&quot;msg\&quot;: &quot;</span> + msg + <span class="string">&quot;, \&quot;status\&quot;: &quot;</span> + status + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启测试，在不同场景下，会返回不同的异常消息.</p><p>限流：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716153938887.png"></p><p>授权拦截时：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716154012736.png"></p><h1 id="5-规则持久化"><a href="#5-规则持久化" class="headerlink" title="5.规则持久化"></a>5.规则持久化</h1><p>现在，sentinel的所有规则都是内存存储，重启后所有规则都会丢失。在生产环境下，我们必须确保这些规则的持久化，避免丢失。</p><h2 id="5-1-规则管理模式"><a href="#5-1-规则管理模式" class="headerlink" title="5.1.规则管理模式"></a>5.1.规则管理模式</h2><p>规则是否能持久化，取决于规则管理模式，sentinel支持三种规则管理模式：</p><ul><li>原始模式：Sentinel的默认模式，将规则保存在内存，重启服务会丢失。</li><li>pull模式</li><li>push模式</li></ul><h3 id="5-1-1-pull模式"><a href="#5-1-1-pull模式" class="headerlink" title="5.1.1.pull模式"></a>5.1.1.pull模式</h3><p>pull模式：控制台将配置的规则推送到Sentinel客户端，而客户端会将配置规则保存在本地文件或数据库中。以后会定时去本地文件或数据库中查询，更新本地规则。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716154155238.png"></p><h3 id="5-1-2-push模式"><a href="#5-1-2-push模式" class="headerlink" title="5.1.2.push模式"></a>5.1.2.push模式</h3><p>push模式：控制台将配置规则推送到远程配置中心，例如Nacos。Sentinel客户端监听Nacos，获取配置变更的推送消息，完成本地配置更新。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716154215456.png"></p><h2 id="5-2-实现push模式"><a href="#5-2-实现push模式" class="headerlink" title="5.2.实现push模式"></a>5.2.实现push模式</h2><p>详细步骤可以参考资料的《sentinel规则持久化》：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210716154255466.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> spingcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-05</title>
      <link href="/2023/08/24/day05-SpringBootWeb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/"/>
      <url>/2023/08/24/day05-SpringBootWeb%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBootWeb请求响应"><a href="#SpringBootWeb请求响应" class="headerlink" title="SpringBootWeb请求响应"></a>SpringBootWeb请求响应</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在上一次的课程中，我们开发了springbootweb的入门程序。 基于SpringBoot的方式开发一个web应用，浏览器发起请求 &#x2F;hello 后 ，给浏览器返回字符串 “Hello World ~”。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826161735076.png"></p><p>其实呢，是我们在浏览器发起请求，请求了我们的后端web服务器(也就是内置的Tomcat)。而我们在开发web程序时呢，定义了一个控制器类Controller，请求会被部署在Tomcat中的Controller接收，然后Controller再给浏览器一个响应，响应一个字符串 “Hello World”。 而在请求响应的过程中是遵循HTTP协议的。</p><p>但是呢，这里要告诉大家的时，其实在Tomcat这类Web服务器中，是不识别我们自己定义的Controller的。但是我们前面讲到过Tomcat是一个Servlet容器，是支持Serlvet规范的，所以呢，在tomcat中是可以识别 Servlet程序的。 那我们所编写的XxxController 是如何处理请求的，又与Servlet之间有什么联系呢？</p><p>其实呢，在SpringBoot进行web程序开发时，它内置了一个核心的Servlet程序 DispatcherServlet，称之为 核心控制器。 DispatcherServlet 负责接收页面发送的请求，然后根据执行的规则，将请求再转发给后面的请求处理器Controller，请求处理器处理完请求之后，最终再由DispatcherServlet给浏览器响应数据。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826165340157.png"></p><p>那将来浏览器发送请求，会携带请求数据，包括：请求行、请求头；请求到达tomcat之后，tomcat会负责解析这些请求数据，然后呢将解析后的请求数据会传递给Servlet程序的HttpServletRequest对象，那也就意味着 HttpServletRequest 对象就可以获取到请求数据。 而Tomcat，还给Servlet程序传递了一个参数 HttpServletResponse，通过这个对象，我们就可以给浏览器设置响应数据 。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826171407354.png"> </p><p>那上述所描述的这种浏览器&#x2F;服务器的架构模式呢，我们称之为：BS架构。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826171454775.png"> </p><p>• BS架构：Browser&#x2F;Server，浏览器&#x2F;服务器架构模式。客户端只需要浏览器，应用程序的逻辑和数据都存储在服务端。</p><p>那今天呢，我们的课程内容主要就围绕着：请求、响应进行。 今天课程内容，主要包含三个部分：</p><blockquote><ul><li>请求</li><li>响应</li><li>分层解耦</li></ul></blockquote><h2 id="1-请求"><a href="#1-请求" class="headerlink" title="1. 请求"></a>1. 请求</h2><p>在本章节呢，我们主要讲解，如何接收页面传递过来的请求数据。</p><h3 id="1-1-Postman"><a href="#1-1-Postman" class="headerlink" title="1.1 Postman"></a>1.1 Postman</h3><p>之前我们课程中有提到当前最为主流的开发模式：前后端分离</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203095553048.png"></p><p>在这种模式下，前端技术人员基于”接口文档”，开发前端程序；后端技术人员也基于”接口文档”，开发后端程序。</p><p>由于前后端分离，对我们后端技术人员来讲，在开发过程中，是没有前端页面的，那我们怎么测试自己所开发的程序呢？</p><p>方式1：像之前SpringBoot入门案例中一样，直接使用浏览器。在浏览器中输入地址，测试后端程序。</p><ul><li>弊端：在浏览器地址栏中输入地址这种方式都是GET请求，如何我们要用到POST请求怎么办呢？<ul><li>要解决POST请求，需要程序员自己编写前端代码（比较麻烦）</li></ul></li></ul><p>方式2：使用专业的接口测试工具（课程中我们使用Postman工具）</p><h4 id="1-1-1-介绍"><a href="#1-1-1-介绍" class="headerlink" title="1.1.1 介绍"></a>1.1.1 介绍</h4><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826173003949.png"> </p><ul><li><p>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。</p><blockquote><p>Postman原是Chrome浏览器的插件，可以模拟浏览器向后端服务器发起任何形式(如:get、post)的HTTP请求</p><p>使用Postman还可以在发起请求时，携带一些请求参数、请求头等信息</p></blockquote></li><li><p>作用：常用于进行接口测试</p></li><li><p>特征</p><ul><li>简单</li><li>实用</li><li>美观</li><li>大方</li></ul></li></ul><h4 id="1-1-2-安装"><a href="#1-1-2-安装" class="headerlink" title="1.1.2 安装"></a>1.1.2 安装</h4><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826173919556.png"> </p><blockquote><p>可以前往官方网址下载：<a href="https://www.postman.com/downloads/">Download Postman | Get Started for Free</a></p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826174601266.png"> </p><p>安装完成之后，进入页面中会提示有新版本可以升级（无需升级）</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826174900779.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203112117979.png"></p><p>界面介绍:</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826175306141.png"> </p><p><strong>如果我们需要将测试的请求信息保存下来，就需要创建一个postman的账号，然后登录之后才可以。</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203103623435.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203112252985.png"> </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203112320687.png"> </p><p>登录完成之后，可以创建工作空间：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203113552785.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203113925733.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203113847126.png"></p><p>创建请求：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203114031824.png"></p><p>点击”Save”，保存当前请求</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203114231572.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203114806665.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203114852752.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203115001098.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203115041949.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203115110440.png"></p><h3 id="1-2-简单参数"><a href="#1-2-简单参数" class="headerlink" title="1.2 简单参数"></a>1.2 简单参数</h3><p>简单参数：在向服务器发起请求时，向服务器传递的是一些普通的请求数据。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826180550583.png"></p><p>那么在后端程序中，如何接收传递过来的普通参数数据呢？</p><p>我们在这里讲解两种方式：</p><ol><li>原始方式   </li><li>SpringBoot方式</li></ol><h4 id="1-2-1-原始方式"><a href="#1-2-1-原始方式" class="headerlink" title="1.2.1 原始方式"></a>1.2.1 原始方式</h4><p>在原始的Web程序当中，需要通过Servlet中提供的API：HttpServletRequest（请求对象），获取请求的相关信息。比如获取请求参数：</p><blockquote><p>Tomcat接收到http请求时：把请求的相关信息封装到HttpServletRequest对象中</p></blockquote><p>在Controller中，我们要想获取Request对象，可以直接在方法的形参中声明 HttpServletRequest 对象。然后就可以通过该对象来获取请求信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据指定的参数名获取请求参数的数据值</span></span><br><span class="line">String  request.getParameter(<span class="string">&quot;参数名&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//原始方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">        <span class="comment">// 请求参数： name=Tom&amp;age=10   （有2个请求参数）</span></span><br><span class="line">        <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">        <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;name&quot;</span>);<span class="comment">//name就是请求参数名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ageStr</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;age&quot;</span>);<span class="comment">//age就是请求参数名</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> Integer.parseInt(ageStr);<span class="comment">//需要手动进行类型转换</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上这种方式，我们仅做了解。（在以后的开发中不会使用到）</p></blockquote><h4 id="1-2-2-SpringBoot方式"><a href="#1-2-2-SpringBoot方式" class="headerlink" title="1.2.2 SpringBoot方式"></a>1.2.2 SpringBoot方式</h4><p>在Springboot的环境中，对原始的API进行了封装，接收参数的形式更加简单。 如果是简单参数，参数名与形参变量名相同，定义同名的形参即可接收参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=10</span></span><br><span class="line">    <span class="comment">// 第1个请求参数： name=Tom   参数名:name，参数值:Tom</span></span><br><span class="line">    <span class="comment">// 第2个请求参数： age=10     参数名:age , 参数值:10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String name , Integer age )</span>&#123;<span class="comment">//形参名和请求参数名保持一致</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>postman测试( GET 请求)：</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203122405075.png"> </p><p><strong>postman测试( POST请求 )：</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220826181117898.png"></p><blockquote><p><strong>结论：不论是GET请求还是POST请求，对于简单参数来讲，只要保证&#x3D;&#x3D;请求参数名和Controller方法中的形参名保持一致&#x3D;&#x3D;，就可以获取到请求参数中的数据值。</strong></p></blockquote><h4 id="1-2-3-参数名不一致"><a href="#1-2-3-参数名不一致" class="headerlink" title="1.2.3 参数名不一致"></a>1.2.3 参数名不一致</h4><p>如果方法形参名称与请求参数名称不一致，controller方法中的形参还能接收到请求参数值吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><br><span class="line">    <span class="comment">// 请求参数名：name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(String username , Integer age )</span>&#123;<span class="comment">//请求参数名和形参名不相同</span></span><br><span class="line">        System.out.println(username+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>答案：运行没有报错。 controller方法中的username值为：null，age值为20</p><ul><li>结论：对于简单参数来讲，请求参数名和controller方法中的形参名不一致时，无法接收到请求数据</li></ul><p>那么如果我们开发中，遇到了这种请求参数名和controller方法中的形参名不相同，怎么办？</p><p>解决方案：可以使用Spring提供的@RequestParam注解完成映射</p><p>在方法形参前面加上 @RequestParam 然后通过value属性执行请求参数名，从而完成映射。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">// http://localhost:8080/simpleParam?name=Tom&amp;age=20</span></span><br><span class="line">    <span class="comment">// 请求参数名：name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//springboot方式</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String username , Integer age )</span>&#123;</span><br><span class="line">        System.out.println(username+<span class="string">&quot;  :  &quot;</span>+age);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意事项：</strong></p><p>@RequestParam中的required属性默认为true（默认值也是true），代表该请求参数必须传递，如果不传递将报错</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203130726310.png"></p><p>如果该参数是可选的，可以将required属性设置为false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/simpleParam&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">simpleParam</span><span class="params">(<span class="meta">@RequestParam(name = &quot;name&quot;, required = false)</span> String username, Integer age)</span>&#123;</span><br><span class="line"> System.out.println(username+ <span class="string">&quot;:&quot;</span> + age);</span><br><span class="line"> <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><h3 id="1-3-实体参数"><a href="#1-3-实体参数" class="headerlink" title="1.3 实体参数"></a>1.3 实体参数</h3><p>在使用简单参数做为数据传递方式时，前端传递了多少个请求参数，后端controller方法中的形参就要书写多少个。如果请求参数比较多，通过上述的方式一个参数一个参数的接收，会比较繁琐。 </p><p>此时，我们可以考虑将请求参数封装到一个实体类对象中。 要想完成数据封装，需要遵守如下规则：<strong>请求参数名与实体类的属性名相同</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203131954932.png"></p><h4 id="1-3-1-简单实体对象"><a href="#1-3-1-简单实体对象" class="headerlink" title="1.3.1 简单实体对象"></a>1.3.1 简单实体对象</h4><p>定义POJO实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//实体参数：简单实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/simplePojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">simplePojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><ul><li>参数名和实体类属性名一致时</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203161246168.png"> </p><ul><li>参数名和实体类属性名不一致时</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203161004349.png"></p><h4 id="1-3-2-复杂实体对象"><a href="#1-3-2-复杂实体对象" class="headerlink" title="1.3.2 复杂实体对象"></a>1.3.2 复杂实体对象</h4><p>上面我们讲的呢是简单的实体对象，下面我们在来学习下复杂的实体对象。</p><p>复杂实体对象指的是，在实体类中有一个或多个属性，也是实体对象类型的。如下：</p><ul><li>User类中有一个Address类型的属性（Address是一个实体类）</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203160447953.png"></p><p>复杂实体对象的封装，需要遵守如下规则：</p><ul><li><strong>请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套实体类属性参数。</strong></li></ul><p>定义POJO实体类：</p><ul><li>Address实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProvince</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProvince</span><span class="params">(String province)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;province=&#x27;&quot;</span> + province + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, city=&#x27;&quot;</span> + city + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>User实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address; <span class="comment">//地址对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//实体参数：复杂实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/complexPojo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">complexPojo</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203162706175.png"> </p><h3 id="1-4-数组集合参数"><a href="#1-4-数组集合参数" class="headerlink" title="1.4 数组集合参数"></a>1.4 数组集合参数</h3><p>数组集合参数的使用场景：在HTML的表单中，有一个表单项是支持多选的(复选框)，可以提交选择的多个值。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203164114083.png"> </p><p>多个值是怎么提交的呢？其实多个值也是一个一个的提交。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203164944144.png"> </p><p>后端程序接收上述多个值的方式有两种：</p><ol><li>数组</li><li>集合</li></ol><h4 id="1-4-1-数组"><a href="#1-4-1-数组" class="headerlink" title="1.4.1 数组"></a>1.4.1 数组</h4><p>数组参数：<strong>请求参数名与形参数组名称相同且请求参数为多个，定义数组类型形参即可接收参数</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203190218468.png"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] hobby)</span>&#123;</span><br><span class="line">        System.out.println(Arrays.toString(hobby));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p>在前端请求时，有两种传递形式：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203191732601.png"> </p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203191822996.png"></p><h4 id="1-4-2-集合"><a href="#1-4-2-集合" class="headerlink" title="1.4.2 集合"></a>1.4.2 集合</h4><p>集合参数：<strong>请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam 绑定参数关系</strong></p><blockquote><p>默认情况下，请求中参数名相同的多个值，是封装到数组。如果要封装到集合，要使用@RequestParam绑定参数关系</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203211640646.png"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//数组集合参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hobby)</span>&#123;</span><br><span class="line">        System.out.println(hobby);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p>方式一： xxxxxxxxxx?hobby&#x3D;game&amp;hobby&#x3D;java</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203212221939.png"> </p><p>方式二：xxxxxxxxxxxxx?hobby&#x3D;game,java</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203212024679.png"></p><h3 id="1-5-日期参数"><a href="#1-5-日期参数" class="headerlink" title="1.5 日期参数"></a>1.5 日期参数</h3><p>上述演示的都是一些普通的参数，在一些特殊的需求中，可能会涉及到日期类型数据的封装。比如，如下需求：</p><p><img src="/assets/image-20220826194159343.png" alt="image-20220826194159343"> </p><p>因为日期的格式多种多样（如：2022-12-12 10:05:45 、2022&#x2F;12&#x2F;12 10:05:45），那么对于日期类型的参数在进行封装的时候，需要通过@DateTimeFormat注解，以及其pattern属性来设置日期的格式。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203213120692.png"></p><ul><li>@DateTimeFormat注解的pattern属性中指定了哪种日期格式，前端的日期参数就必须按照指定的格式传递。</li><li>后端controller方法中，需要使用Date类型或LocalDateTime类型，来封装传递的参数。</li></ul><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//日期时间参数</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/dateParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">dateParam</span><span class="params">(<span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span> LocalDateTime updateTime)</span>&#123;</span><br><span class="line">        System.out.println(updateTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203214600716.png"></p><h3 id="1-6-JSON参数"><a href="#1-6-JSON参数" class="headerlink" title="1.6 JSON参数"></a>1.6 JSON参数</h3><p>在学习前端技术时，我们有讲到过JSON，而在前后端进行交互时，如果是比较复杂的参数，前后端通过会使用JSON格式的数据进行传输。 （JSON是开发中最常用的前后端数据交互方式）</p><p>我们学习JSON格式参数，主要从以下两个方面着手：</p><ol><li>Postman在发送请求时，如何传递json格式的请求参数</li><li>在服务端的controller方法中，如何接收json格式的请求参数</li></ol><p>Postman发送JSON格式数据：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203225623337.png"></p><p>服务端Controller方法接收JSON格式数据：</p><ul><li>传递json格式的参数，在Controller中会使用实体类进行封装。 </li><li>封装规则：<strong>JSON数据键名与形参对象属性名相同，定义POJO类型形参即可接收参数。需要使用 @RequestBody标识。</strong></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203230457901.png"></p><ul><li>@RequestBody注解：将JSON数据映射到形参的实体类对象中（JSON中的key和实体类中的属性名保持一致）</li></ul><p>实体类：Address</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实体类：User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略GET , SET 方法</span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//JSON参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/jsonParam&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">jsonParam</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203231803000.png"> </p><h3 id="1-7-路径参数"><a href="#1-7-路径参数" class="headerlink" title="1.7 路径参数"></a>1.7 路径参数</h3><p>传统的开发中请求参数是放在请求体(POST请求)传递或跟在URL后面通过?key&#x3D;value的形式传递(GET请求)。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221203235715804.png"></p><p>在现在的开发中，经常还会直接在请求的URL中传递参数。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/user/1</span><br><span class="line">http://localhost:880/user/1/0</span><br></pre></td></tr></table></figure><p>上述的这种传递请求参数的形式呢，我们称之为：路径参数。</p><p>学习路径参数呢，主要掌握在后端的controller方法中，如何接收路径参数。</p><p>路径参数：</p><ul><li>前端：通过请求URL直接传递参数</li><li>后端：使用{…}来标识该路径参数，需要使用@PathVariable获取路径参数</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204001520756.png"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Postman测试：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204002040184.png"></p><p><strong>传递多个路径参数：</strong></p><p>Postman：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204002306288.png"></p><p>Controller方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestController</span> &#123;</span><br><span class="line">    <span class="comment">//路径参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/path/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">pathParam2</span><span class="params">(<span class="meta">@PathVariable</span> Integer id, <span class="meta">@PathVariable</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(id+ <span class="string">&quot; : &quot;</span> +name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-响应"><a href="#2-响应" class="headerlink" title="2. 响应"></a>2. 响应</h2><p>前面我们学习过HTTL协议的交互方式：请求响应模式（有请求就有响应）</p><p>那么Controller程序呢，除了接收请求外，还可以进行响应。</p><h3 id="2-1-ResponseBody"><a href="#2-1-ResponseBody" class="headerlink" title="2.1 @ResponseBody"></a>2.1 @ResponseBody</h3><p>在我们前面所编写的controller方法中，都已经设置了响应数据。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204100656376.png"></p><p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p><p>答案：使用@ResponseBody注解</p><p><strong>@ResponseBody注解：</strong></p><ul><li>类型：方法注解、类注解</li><li>位置：书写在Controller方法上或类上</li><li>作用：将方法返回值直接响应给浏览器<ul><li>如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式后在响应给浏览器</li></ul></li></ul><p>但是在我们所书写的Controller中，只在类上添加了@RestController注解、方法添加了@RequestMapping注解，并没有使用@ResponseBody注解，怎么给浏览器响应呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原因：在类上添加的@RestController注解，是一个组合注解。</p><ul><li>@RestController &#x3D; @Controller + @ResponseBody</li></ul><p>@RestController源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span>   <span class="comment">//元注解（修饰注解的注解）</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Documented</span>    <span class="comment">//元注解</span></span><br><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@ResponseBody</span> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line">    <span class="meta">@AliasFor(</span></span><br><span class="line"><span class="meta">        annotation = Controller.class</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结论：在类上添加@RestController就相当于添加了@ResponseBody注解。</p><ul><li>类上有@RestController注解或@ResponseBody注解时：表示当前类下所有的方法返回值做为响应数据<ul><li>方法的返回值，如果是一个POJO对象或集合时，会先转换为JSON格式，在响应给浏览器</li></ul></li></ul><p>下面我们来测试下响应数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    <span class="comment">//响应字符串</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应实体对象</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();<span class="comment">//创建实体类对象</span></span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应集合数据</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();<span class="comment">//集合对象</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在服务端响应了一个对象或者集合，那私前端获取到的数据是什么样子的呢？我们使用postman发送请求来测试下。测试效果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204172339375.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204172705426.png"></p><h3 id="2-2-统一响应结果"><a href="#2-2-统一响应结果" class="headerlink" title="2.2 统一响应结果"></a>2.2 统一响应结果</h3><p>大家有没有发现一个问题，我们在前面所编写的这些Controller方法中，返回值各种各样，没有任何的规范。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204174052622.png"></p><p>如果我们开发一个大型项目，项目中controller方法将成千上万，使用上述方式将造成整个项目难以维护。那在真实的项目开发中是什么样子的呢？</p><p>在真实的项目开发中，无论是哪种方法，我们都会定义一个统一的返回结果。方案如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204174537686.png"></p><blockquote><p>前端：只需要按照统一格式的返回结果进行解析(仅一种解析方案)，就可以拿到数据。</p></blockquote><p>统一的返回结果使用类来描述，在这个结果中包含：</p><ul><li><p>响应状态码：当前请求是成功，还是失败</p></li><li><p>状态码信息：给页面的提示信息</p></li><li><p>返回的数据：给前端响应的数据（字符串、对象、集合）</p></li></ul><p>定义在一个实体类Result来包含以上信息。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;<span class="comment">//响应码，1 代表成功; 0 代表失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg;  <span class="comment">//响应码 描述字符串</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//返回的数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增删改 成功响应(不需要给前端返回数据)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查询 成功响应(把查询结果做为返回数据响应给前端)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>,<span class="string">&quot;success&quot;</span>,data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//失败响应</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>,msg,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造Controller：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123; </span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="comment">//return new Result(1,&quot;success&quot;,&quot;Hello World ~&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/getAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应统一格式的结果</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listAddr&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">listAddr</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Address&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr.setProvince(<span class="string">&quot;广东&quot;</span>);</span><br><span class="line">        addr.setCity(<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">addr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">        addr2.setProvince(<span class="string">&quot;陕西&quot;</span>);</span><br><span class="line">        addr2.setCity(<span class="string">&quot;西安&quot;</span>);</span><br><span class="line"></span><br><span class="line">        list.add(addr);</span><br><span class="line">        list.add(addr2);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Postman测试：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204180946963.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204180744084.png"></p><h3 id="2-3-案例"><a href="#2-3-案例" class="headerlink" title="2.3 案例"></a>2.3 案例</h3><p>下面我们通过一个案例，来加强对请求响应的学习。</p><h4 id="2-3-1-需求说明"><a href="#2-3-1-需求说明" class="headerlink" title="2.3.1 需求说明"></a>2.3.1 需求说明</h4><p>需求：加载并解析xml文件中的数据，完成数据处理，并在页面展示</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204185928260.png">  </p><ul><li>获取员工数据，返回统一响应结果，在页面渲染展示</li></ul><h4 id="2-3-2-准备工作"><a href="#2-3-2-准备工作" class="headerlink" title="2.3.2 准备工作"></a>2.3.2 准备工作</h4><p>案例准备：</p><ol><li><p>XML文件</p><ul><li>已经准备好(emp.xml)，直接导入进来，放在 src&#x2F;main&#x2F;resources目录下</li></ul></li><li><p>工具类</p><ul><li>已经准备好解析XML文件的工具类，无需自己实现</li><li>直接在创建一个包 com.itheima.utils ，然后将工具类拷贝进来</li></ul></li><li><p>前端页面资源</p><ul><li>已经准备好，直接拷贝进来，放在src&#x2F;main&#x2F;resources下的static目录下</li></ul></li></ol><p>Springboot项目的静态资源(html，css，js等前端资源)默认存放目录为：classpath:&#x2F;static 、 classpath:&#x2F;public、 classpath:&#x2F;resources</p><blockquote><p>在SpringBoot项目中，静态资源默认可以存放的目录：</p><ul><li>classpath:&#x2F;static&#x2F;</li><li>classpath:&#x2F;public&#x2F;</li><li>classpath:&#x2F;resources&#x2F;</li><li>classpath:&#x2F;META-INF&#x2F;resources&#x2F;</li></ul><p>classpath：</p><ul><li>代表的是类路径，在maven的项目中，其实指的就是 src&#x2F;main&#x2F;resources 或者 src&#x2F;main&#x2F;java，但是java目录是存放java代码的，所以相关的配置文件及静态资源文档，就放在 src&#x2F;main&#x2F;resources下。</li></ul></blockquote><h4 id="2-3-3-实现步骤"><a href="#2-3-3-实现步骤" class="headerlink" title="2.3.3 实现步骤"></a>2.3.3 实现步骤</h4><ol><li><p>在pom.xml文件中引入dom4j的依赖，用于解析XML文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入资料中提供的：解析XML的工具类XMLParserUtils、实体类Emp、XML文件emp.xml</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204182828547.png"> </p></li><li><p>引入资料中提供的静态页面文件，放在resources下的static目录下</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204183044848.png"> </p></li><li><p>创建EmpController类，编写Controller程序，处理请求，响应数据</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204184313822.png"></p></li></ol><h4 id="2-3-4-代码实现"><a href="#2-3-4-代码实现" class="headerlink" title="2.3.4 代码实现"></a>2.3.4 代码实现</h4><p>Contriller代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        <span class="comment">//System.out.println(file);</span></span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统一返回结果实体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code ;<span class="comment">//1 成功 , 0 失败</span></span><br><span class="line">    <span class="keyword">private</span> String msg; <span class="comment">//提示信息</span></span><br><span class="line">    <span class="keyword">private</span> Object data; <span class="comment">//数据 date</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, String msg, Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">success</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">1</span>, <span class="string">&quot;success&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">error</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">0</span>, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-5-测试"><a href="#2-3-5-测试" class="headerlink" title="2.3.5 测试"></a>2.3.5 测试</h4><p>代码编写完毕之后，我们就可以运行引导类，启动服务进行测试了。 </p><p>使用Postman测试：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204190341389.png"></p><p>打开浏览器，在浏览器地址栏输入： <a href="http://localhost:8080/emp.html">http://localhost:8080/emp.html</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204185455556.png"> </p><h4 id="2-3-6-问题分析"><a href="#2-3-6-问题分析" class="headerlink" title="2.3.6 问题分析"></a>2.3.6 问题分析</h4><p>上述案例的功能，我们虽然已经实现，但是呢，我们会发现案例中：解析XML数据，获取数据的代码，处理数据的逻辑的代码，给页面响应的代码全部都堆积在一起了，全部都写在controller方法中了。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204190712411.png"></p><p>当前程序的这个业务逻辑还是比较简单的，如果业务逻辑再稍微复杂一点，我们会看到Controller方法的代码量就很大了。</p><ul><li><p>当我们要修改操作数据部分的代码，需要改动Controller</p></li><li><p>当我们要完善逻辑处理部分的代码，需要改动Controller</p></li><li><p>当我们需要修改数据响应的代码，还是需要改动Controller</p></li></ul><p>这样呢，就会造成我们整个工程代码的复用性比较差，而且代码难以维护。 那如何解决这个问题呢？其实在现在的开发中，有非常成熟的解决思路，那就是分层开发。</p><h2 id="3-分层解耦"><a href="#3-分层解耦" class="headerlink" title="3. 分层解耦"></a>3. 分层解耦</h2><h3 id="3-1-三层架构"><a href="#3-1-三层架构" class="headerlink" title="3.1 三层架构"></a>3.1 三层架构</h3><h4 id="3-1-1-介绍"><a href="#3-1-1-介绍" class="headerlink" title="3.1.1 介绍"></a>3.1.1 介绍</h4><p>在我们进行程序设计以及程序开发时，尽可能让每一个接口、类、方法的职责更单一些（单一职责原则）。</p><blockquote><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利用后期的维护。</p></blockquote><p>我们之前开发的程序呢，并不满足单一职责原则。下面我们来分析下之前的程序：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204191650390.png"> </p><p>那其实我们上述案例的处理逻辑呢，从组成上看可以分为三个部分：</p><ul><li>数据访问：负责业务数据的维护操作，包括增、删、改、查等操作。</li><li>逻辑处理：负责业务逻辑处理的代码。</li><li>请求处理、响应数据：负责，接收页面的请求，给页面响应数据。</li></ul><p>按照上述的三个组成部分，在我们项目开发中呢，可以将代码分为三层：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204193837678.png"></p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>基于三层架构的程序执行流程：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204194207812.png"></p><ul><li>前端发起的请求，由Controller层接收（Controller响应数据给前端）</li><li>Controller层调用Service层来进行逻辑处理（Service层处理完后，把处理结果返回给Controller层）</li><li>Serivce层调用Dao层（逻辑处理过程中需要用到的一些数据要从Dao层获取）</li><li>Dao层操作文件中的数据（Dao拿到的数据会返回给Service层）</li></ul><blockquote><p>思考：按照三层架构的思想，如何要对业务逻辑(Service层)进行变更，会影响到Controller层和Dao层吗？ </p><p>答案：不会影响。 （程序的扩展性、维护性变得更好了）</p></blockquote><h4 id="3-1-2-代码拆分"><a href="#3-1-2-代码拆分" class="headerlink" title="3.1.2 代码拆分"></a>3.1.2 代码拆分</h4><p>我们使用三层架构思想，来改造下之前的程序：</p><ul><li>控制层包名：xxxx.controller</li><li>业务逻辑层包名：xxxx.service</li><li>数据访问层包名：xxxx.dao</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204195812200.png"></p><p><strong>控制层：</strong>接收前端发送的请求，对请求进行处理，并响应数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line">    <span class="comment">//业务层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpService</span> <span class="variable">empService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpServiceA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service层, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>业务逻辑层：</strong>处理具体的业务逻辑</p><ul><li>业务接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务逻辑接口（制定业务标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>业务实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务逻辑实现类（按照业务标准实现）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    <span class="comment">//dao层对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">EmpDao</span> <span class="variable">empDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EmpDaoA</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数据访问层：</strong>负责数据的访问操作，包含数据的增、删、改、查</p><ul><li>数据访问接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据访问层接口（制定标准）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="comment">//获取员工列表数据</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数据访问实现类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据访问实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204201342490.png"></p><p>三层架构的好处：</p><ol><li>复用性强</li><li>便于维护</li><li>利用扩展</li></ol><h3 id="3-2-分层解耦"><a href="#3-2-分层解耦" class="headerlink" title="3.2 分层解耦"></a>3.2 分层解耦</h3><p>刚才我们学习过程序分层思想了，接下来呢，我们来学习下程序的解耦思想。</p><p>解耦：解除耦合。</p><h4 id="3-2-1-耦合问题"><a href="#3-2-1-耦合问题" class="headerlink" title="3.2.1 耦合问题"></a>3.2.1 耦合问题</h4><p>首先需要了解软件开发涉及到的两个概念：内聚和耦合。</p><ul><li><p>内聚：软件中各个功能模块内部的功能联系。</p></li><li><p>耦合：衡量软件中各个层&#x2F;模块之间的依赖、关联的程度。</p></li></ul><p><strong>软件设计原则：高内聚低耦合。</strong></p><blockquote><p>高内聚指的是：一个模块中各个元素之间的联系的紧密程度，如果各个元素(语句、程序段)之间的联系程度越高，则内聚性越高，即 “高内聚”。</p><p>低耦合指的是：软件中各个层、模块之间的依赖关联程序越低越好。</p></blockquote><p>程序中高内聚的体现：</p><ul><li>EmpServiceA类中只编写了和员工相关的逻辑处理代码</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204202531571.png"> </p><p>程序中耦合代码的体现：</p><ul><li>把业务类变为EmpServiceB时，需要修改controller层中的代码</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204203904900.png"></p><p>高内聚、低耦合的目的是使程序模块的可重用性、移植性大大增强。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220828215549593.png"></p><h4 id="3-2-2-解耦思路"><a href="#3-2-2-解耦思路" class="headerlink" title="3.2.2  解耦思路"></a>3.2.2  解耦思路</h4><p>之前我们在编写代码时，需要什么对象，就直接new一个就可以了。 这种做法呢，层与层之间代码就耦合了，当service层的实现变了之后， 我们还需要修改controller层的代码。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204204916033.png"></p><p> 那应该怎么解耦呢？</p><ul><li>首先不能在EmpController中使用new对象。代码如下：</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204205328069.png"></p><ul><li>此时，就存在另一个问题了，不能new，就意味着没有业务层对象（程序运行就报错），怎么办呢？<ul><li>我们的解决思路是：<ul><li>提供一个容器，容器中存储一些对象(例：EmpService对象)</li><li>controller程序从容器中获取EmpService类型的对象</li></ul></li></ul></li></ul><p>我们想要实现上述解耦操作，就涉及到Spring中的两个核心概念：</p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称IOC。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><blockquote><p>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器</p></blockquote></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称DI。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><blockquote><p>程序运行时需要某个资源，此时容器就为其提供这个资源。</p><p>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象</p></blockquote></li></ul><p>IOC容器中创建、管理的对象，称之为：bean对象</p><h3 id="3-3-IOC-DI"><a href="#3-3-IOC-DI" class="headerlink" title="3.3 IOC&amp;DI"></a>3.3 IOC&amp;DI</h3><p>上面我们引出了Spring中IOC和DI的基本概念，下面我们就来具体学习下IOC和DI的代码实现。</p><h4 id="3-3-1-IOC-DI入门"><a href="#3-3-1-IOC-DI入门" class="headerlink" title="3.3.1 IOC&amp;DI入门"></a>3.3.1 IOC&amp;DI入门</h4><p>任务：完成Controller层、Service层、Dao层的代码解耦</p><ul><li>思路：<ol><li>删除Controller层、Service层中new对象的代码</li><li>Service层及Dao层的实现类，交给IOC容器管理</li><li>为Controller及Service注入运行时依赖的对象<ul><li>Controller程序中注入依赖的Service层对象</li><li>Service程序中注入依赖的Dao层对象</li></ul></li></ol></li></ul><p>第1步：删除Controller层、Service层中new对象的代码</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204212807207.png"></p><p>第2步：Service层及Dao层的实现类，交给IOC容器管理</p><ul><li>使用Spring提供的注解：@Component ，就可以实现类交给IOC容器管理</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204213328034.png"></p><p>第3步：为Controller及Service注入运行时依赖的对象</p><ul><li>使用Spring提供的注解：@Autowired ，就可以实现程序运行时IOC容器自动注入需要的依赖对象</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204213859112.png"></p><p>完整的三层代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//将当前对象交给IOC容器管理,成为IOC容器的bean</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试：</p><ul><li>启动SpringBoot引导类，打开浏览器，输入：<a href="http://localhost:8080/emp.html">http://localhost:8080/emp.html</a></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204185455556.png"></p><h4 id="3-3-2-IOC详解"><a href="#3-3-2-IOC详解" class="headerlink" title="3.3.2 IOC详解"></a>3.3.2 IOC详解</h4><p>通过IOC和DI的入门程序呢，我们已经基本了解了IOC和DI的基础操作。接下来呢，我们学习下IOC控制反转和DI依赖注入的细节。</p><h5 id="3-3-2-1-bean的声明"><a href="#3-3-2-1-bean的声明" class="headerlink" title="3.3.2.1 bean的声明"></a>3.3.2.1 bean的声明</h5><p>前面我们提到IOC控制反转，就是将对象的控制权交给Spring的IOC容器，由IOC容器创建及管理对象。IOC容器创建的对象称为bean对象。</p><p>在之前的入门案例中，要把某个对象交给IOC容器管理，需要在类上添加一个注解：@Component </p><p>而Spring框架为了更好的标识web应用程序开发当中，bean对象到底归属于哪一层，又提供了@Component的衍生注解：</p><ul><li>@Controller    （标注在控制层类上）</li><li>@Service          （标注在业务层类上）</li><li>@Repository    （标注在数据访问层类上）</li></ul><p>修改入门案例代码：</p><ul><li><strong>Controller层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span>  <span class="comment">//@RestController = @Controller + @ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpService empService ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/listEmp&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//1. 调用service, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empService.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 响应数据</span></span><br><span class="line">        <span class="keyword">return</span> Result.success(empList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>Service层：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpServiceA</span> <span class="keyword">implements</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span> <span class="comment">//运行时,从IOC容器中获取该类型对象,赋值给该变量</span></span><br><span class="line">    <span class="keyword">private</span> EmpDao empDao ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 调用dao, 获取数据</span></span><br><span class="line">        List&lt;Emp&gt; empList = empDao.listEmp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 对数据进行转换处理 - gender, job</span></span><br><span class="line">        empList.stream().forEach(emp -&gt; &#123;</span><br><span class="line">            <span class="comment">//处理 gender 1: 男, 2: 女</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> emp.getGender();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(gender))&#123;</span><br><span class="line">                emp.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理job - 1: 讲师, 2: 班主任 , 3: 就业指导</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> emp.getJob();</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">&quot;1&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;讲师&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;2&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;班主任&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(job))&#123;</span><br><span class="line">                emp.setJob(<span class="string">&quot;就业指导&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Dao层：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpDaoA</span> <span class="keyword">implements</span> <span class="title class_">EmpDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Emp&gt; <span class="title function_">listEmp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 加载并解析emp.xml</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;emp.xml&quot;</span>).getFile();</span><br><span class="line">        System.out.println(file);</span><br><span class="line">        List&lt;Emp&gt; empList = XmlParserUtils.parse(file, Emp.class);</span><br><span class="line">        <span class="keyword">return</span> empList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要把某个对象交给IOC容器管理，需要在对应的类上加上如下注解之一：</p><table><thead><tr><th align="left">注解</th><th>说明</th><th>位置</th></tr></thead><tbody><tr><td align="left">@Controller</td><td>@Component的衍生注解</td><td>标注在控制器类上</td></tr><tr><td align="left">@Service</td><td>@Component的衍生注解</td><td>标注在业务类上</td></tr><tr><td align="left">@Repository</td><td>@Component的衍生注解</td><td>标注在数据访问类上（由于与mybatis整合，用的少）</td></tr><tr><td align="left">@Component</td><td>声明bean的基础注解</td><td>不属于以上三类时，用此注解</td></tr></tbody></table><blockquote><p>查看源码：<img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204221320230.png"></p></blockquote><p>在IOC容器中，每一个Bean都有一个属于自己的名字，可以通过注解的value属性指定bean的名字。如果没有指定，默认为类名首字母小写。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204222650873.png"></p><blockquote><p>注意事项: </p><ul><li>声明bean的时候，可以通过value属性指定bean的名字，如果没有指定，默认为类名首字母小写。</li><li>使用以上四个注解都可以声明bean，但是在springboot集成web开发中，声明控制器bean只能用@Controller。</li></ul></blockquote><h5 id="3-3-2-2-组件扫描"><a href="#3-3-2-2-组件扫描" class="headerlink" title="3.3.2.2 组件扫描"></a>3.3.2.2 组件扫描</h5><p>问题：使用前面学习的四个注解声明的bean，一定会生效吗？</p><p>答案：不一定。（原因：bean想要生效，还需要被组件扫描）</p><p> 下面我们通过修改项目工程的目录结构，来测试bean对象是否生效：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204223602694.png"></p><p>运行程序后，报错：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204223815554.png"></p><p>为什么没有找到bean对象呢？</p><ul><li>使用四大注解声明的bean，要想生效，还需要被组件扫描注解@ComponentScan扫描</li></ul><blockquote><p>@ComponentScan注解虽然没有显式配置，但是实际上已经包含在了引导类声明注解 @SpringBootApplication 中，&#x3D;&#x3D;<strong>默认扫描的范围是SpringBoot启动类所在包及其子包</strong>&#x3D;&#x3D;。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204224643683.png"> </p></blockquote><ul><li>解决方案：手动添加@ComponentScan注解，指定要扫描的包   （&#x3D;&#x3D;仅做了解，不推荐&#x3D;&#x3D;）</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204225437297.png"></p><p>推荐做法（如下图）：</p><ul><li>将我们定义的controller，service，dao这些包呢，都放在引导类所在包com.itheima的子包下，这样我们定义的bean就会被自动的扫描到</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204225815624.png"></p><h4 id="3-3-3-DI详解"><a href="#3-3-3-DI详解" class="headerlink" title="3.3.3 DI详解"></a>3.3.3 DI详解</h4><p>上一小节我们讲解了控制反转IOC的细节，接下来呢，我们学习依赖注解DI的细节。</p><p>依赖注入，是指IOC容器要为应用程序去提供运行时所依赖的资源，而资源指的就是对象。</p><p>在入门程序案例中，我们使用了@Autowired这个注解，完成了依赖注入的操作，而这个Autowired翻译过来叫：自动装配。</p><p>@Autowired注解，默认是按照<strong>类型</strong>进行自动装配的（去IOC容器中找某个类型的对象，然后完成注入操作）</p><blockquote><p>入门程序举例：在EmpController运行的时候，就要到IOC容器当中去查找EmpService这个类型的对象，而我们的IOC容器中刚好有一个EmpService这个类型的对象，所以就找到了这个类型的对象完成注入操作。</p></blockquote><p>那如果在IOC容器中，存在多个相同类型的bean对象，会出现什么情况呢？</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204232154445.png"></p><ul><li>程序运行会报错</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204231616724.png"></p><p>如何解决上述问题呢？Spring提供了以下几种解决方案：</p><ul><li><p>@Primary</p></li><li><p>@Qualifier</p></li><li><p>@Resource</p></li></ul><p>使用@Primary注解：当存在多个相同类型的Bean注入时，加上@Primary注解，来确定默认的实现。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204232501679.png"> </p><p>使用@Qualifier注解：指定当前要注入的bean对象。 在@Qualifier的value属性中，指定注入的bean的名称。</p><ul><li>@Qualifier注解不能单独使用，必须配合@Autowired使用</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204233333606.png"></p><p>使用@Resource注解：是按照bean的名称进行注入。通过name属性指定要注入的bean的名称。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221204233637735.png"></p><blockquote><p>面试题 ： @Autowird 与 @Resource的区别</p><ul><li>@Autowired 是spring框架提供的注解，而@Resource是JDK提供的注解</li><li>@Autowired 默认是按照类型注入，而@Resource是按照名称注入</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-04</title>
      <link href="/2023/08/12/day04-SpringBootWeb%E5%85%A5%E9%97%A8/"/>
      <url>/2023/08/12/day04-SpringBootWeb%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><blockquote><ol><li><p>SpringBootWeb入门</p></li><li><p>HTTP协议</p></li><li><p>Web服务器-Tomcat</p></li></ol></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130095316032.png"></p><p>下面我们将进入SpringBoot基础阶段的学习。</p><p>在没有正式的学习SpringBoot之前，我们要先来了解下什么是Spring。</p><p>我们可以打开Spring的官网(<a href="https://spring.io)，去看一下Spring的简介：Spring">https://spring.io)，去看一下Spring的简介：Spring</a> makes Java simple。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220617222738668.png"></p><p>Spring的官方提供很多开源的项目，我们可以点击上面的projects，看到spring家族旗下的项目，按照流行程度排序为：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220617222925923.png"></p><p>Spring发展到今天已经形成了一种开发生态圈，Spring提供了若干个子项目，每个项目用于完成特定的功能。而我们在项目开发时，一般会偏向于选择这一套spring家族的技术，来解决对应领域的问题，那我们称这一套技术为<strong>spring全家桶</strong>。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220617222609699.png"></p><p>而Spring家族旗下这么多的技术，最基础、最核心的是 SpringFramework。其他的spring家族的技术，都是基于SpringFramework的，SpringFramework中提供很多实用功能，如：依赖注入、事务管理、web开发支持、数据访问、消息服务等等。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220617224427947.png"></p><p>而如果我们在项目中，直接基于SpringFramework进行开发，存在两个问题：配置繁琐、入门难度大。 </p><p><img src="/assets/image-20220823185227296.png"></p><p>所以基于此呢，spring官方推荐我们从另外一个项目开始学习，那就是目前最火爆的SpringBoot。 </p><p>通过springboot就可以快速的帮我们构建应用程序，所以springboot呢，最大的特点有两个 ：</p><ul><li>简化配置</li><li>快速开发</li></ul><p><strong>Spring Boot 可以帮助我们非常快速的构建应用程序、简化开发、提高效率 。</strong></p><p>接下来，我们就直接通过一个SpringBoot的web入门程序，让大家快速感受一下，基于SpringBoot进行Web开发的便捷性。</p><h2 id="1-SpringBootWeb快速入门"><a href="#1-SpringBootWeb快速入门" class="headerlink" title="1. SpringBootWeb快速入门"></a>1. SpringBootWeb快速入门</h2><h3 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h3><p>需求：基于SpringBoot的方式开发一个web应用，浏览器发起请求&#x2F;hello后，给浏览器返回字符串 “Hello World ~”。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220823191003444.png"></p><h3 id="1-2-开发步骤"><a href="#1-2-开发步骤" class="headerlink" title="1.2 开发步骤"></a>1.2 开发步骤</h3><p>第1步：创建SpringBoot工程项目</p><p>第2步：定义HelloController类，添加方法hello，并添加注解</p><p>第3步：测试运行</p><h4 id="1-2-1-创建SpringBoot工程（需要联网）"><a href="#1-2-1-创建SpringBoot工程（需要联网）" class="headerlink" title="1.2.1 创建SpringBoot工程（需要联网）"></a>1.2.1 创建SpringBoot工程（需要联网）</h4><p>基于Spring官方骨架，创建SpringBoot工程。</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201184702136.png" alt="" style="zoom:80%;" /><p>基本信息描述完毕之后，勾选web开发相关依赖。</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201184850248.png" alt="" style="zoom:80%;" /><p>点击Finish之后，就会联网创建这个SpringBoot工程，创建好之后，结构如下：</p><ul><li>&#x3D;&#x3D;注意：在联网创建过程中，会下载相关资源(请耐心等待)&#x3D;&#x3D;</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201185910596.png"> </p><h4 id="1-2-2-定义请求处理类"><a href="#1-2-2-定义请求处理类" class="headerlink" title="1.2.2 定义请求处理类"></a>1.2.2 定义请求处理类</h4><p>在com.itheima这个包下创建一个子包controller</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201190541295.png" alt="" style="zoom:80%;" /><p>然后在controller包下新建一个类：HelloController</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201190825439.png" alt="" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World ~&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello World ~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><h4 id="1-2-3-运行测试"><a href="#1-2-3-运行测试" class="headerlink" title="1.2.3 运行测试"></a>1.2.3 运行测试</h4><p>运行SpringBoot自动生成的引导类</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201191028124.png"> </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201191348924.png"> </p><p>打开浏览器，输入 <code>http://localhost:8080/hello</code></p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220823195048415.png" style="zoom:80%;" /><h3 id="1-3-Web分析"><a href="#1-3-Web分析" class="headerlink" title="1.3 Web分析"></a>1.3 Web分析</h3><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201224603497.png"></p><p>浏览器：</p><ul><li><p>输入网址：<code>http://192.168.100.11:8080/hello</code></p><ul><li><p>通过IP地址192.168.100.11定位到网络上的一台计算机</p><blockquote><p>我们之前在浏览器中输入的localhost，就是127.0.0.1（本机）</p></blockquote></li><li><p>通过端口号8080找到计算机上运行的程序</p><blockquote><p><code>localhost:8080</code>  , 意思是在本地计算机中找到正在运行的8080端口的程序</p></blockquote></li><li><p>&#x2F;hello是请求资源位置</p><ul><li>资源：对计算机而言资源就是数据<ul><li>web资源：通过网络可以访问到的资源（通常是指存放在服务器上的数据）</li></ul></li></ul><blockquote><p><code>localhost:8080/hello</code> ，意思是向本地计算机中的8080端口程序，获取资源位置是&#x2F;hello的数据</p><ul><li>8080端口程序，在服务器找&#x2F;hello位置的资源数据，发给浏览器</li></ul></blockquote></li></ul></li></ul><p>服务器：（可以理解为ServerSocket）</p><ul><li>接收到浏览器发送的信息（如：&#x2F;hello）</li><li>在服务器上找到&#x2F;hello的资源</li><li>把资源发送给浏览器</li></ul><blockquote><p>我们在JavaSE阶段学习网络编程时，有讲过网络三要素：</p><ul><li>IP  ：网络中计算机的唯一标识</li><li>端口 ：计算机中运行程序的唯一标识</li><li>协议 ：网络中计算机之间交互的规则</li></ul><p><strong>问题：浏览器和服务器两端进行数据交互，使用什么协议？</strong></p><p><strong>答案：http协议</strong></p></blockquote><h2 id="2-HTTP协议"><a href="#2-HTTP协议" class="headerlink" title="2. HTTP协议"></a>2. HTTP协议</h2><h3 id="2-1-HTTP-概述"><a href="#2-1-HTTP-概述" class="headerlink" title="2.1 HTTP-概述"></a>2.1 HTTP-概述</h3><h4 id="2-1-1-介绍"><a href="#2-1-1-介绍" class="headerlink" title="2.1.1 介绍"></a>2.1.1 介绍</h4><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220823200024507.png"></p><p>HTTP：Hyper Text Transfer Protocol(超文本传输协议)，规定了浏览器与服务器之间数据传输的规则。</p><ul><li>http是互联网上应用最为广泛的一种网络协议 </li><li>http协议要求：浏览器在向服务器发送请求数据时，或是服务器在向浏览器发送响应数据时，都必须按照固定的格式进行数据传输</li></ul><p>如果想知道http协议的数据传输格式有哪些，可以打开浏览器，点击<code>F12</code>打开开发者工具，点击<code>Network</code>来查看</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202105735230.png"></p><p>浏览器向服务器进行请求时：</p><ul><li>服务器按照固定的格式进行解析</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202111044434.png"></p><p>服务器向浏览器进行响应时：</p><ul><li>浏览器按照固定的格式进行解析</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202111307819.png"></p><p><strong>所以，我们学习HTTP主要就是学习请求和响应数据的具体格式内容。</strong></p><h4 id="2-2-2-特点"><a href="#2-2-2-特点" class="headerlink" title="2.2.2 特点"></a>2.2.2 特点</h4><p>我们刚才初步认识了HTTP协议，那么我们在看看HTTP协议有哪些特点：</p><ul><li><p>**基于TCP协议: **   面向连接，安全</p><blockquote><p>TCP是一种面向连接的(建立连接之前是需要经过三次握手)、可靠的、基于字节流的传输层通信协议，在数据传输方面更安全</p></blockquote></li><li><p><strong>基于请求-响应模型:</strong>   一次请求对应一次响应（先请求后响应）</p><blockquote><p>请求和响应是一一对应关系，没有请求，就没有响应</p></blockquote></li><li><p><strong>HTTP协议是无状态协议:</strong>  对于数据没有记忆能力。每次请求-响应都是独立的</p><blockquote><p>无状态指的是客户端发送HTTP请求给服务端之后，服务端根据请求响应数据，响应完后，不会记录任何信息。</p><ul><li>缺点:  多次请求间不能共享数据</li><li>优点:  速度快</li></ul><p>请求之间无法共享数据会引发的问题：</p><ul><li>如：京东购物。加入购物车和去购物车结算是两次请求</li><li>由于HTTP协议的无状态特性，加入购物车请求响应结束后，并未记录加入购物车是何商品</li><li>发起去购物车结算的请求后，因为无法获取哪些商品加入了购物车，会导致此次请求无法正确展示数据</li></ul><p>具体使用的时候，我们发现京东是可以正常展示数据的，原因是Java早已考虑到这个问题，并提出了使用会话技术(Cookie、Session)来解决这个问题。具体如何来做，我们后面课程中会讲到。</p></blockquote><p>刚才提到HTTP协议是规定了请求和响应数据的格式，那具体的格式是什么呢?</p></li></ul><h3 id="2-2-HTTP-请求协议"><a href="#2-2-HTTP-请求协议" class="headerlink" title="2.2 HTTP-请求协议"></a>2.2 HTTP-请求协议</h3><p>浏览器和服务器是按照HTTP协议进行数据通信的。</p><p>HTTP协议又分为：请求协议和响应协议</p><ul><li>请求协议：浏览器将数据以请求格式发送到服务器<ul><li>包括：<strong>请求行</strong>、<strong>请求头</strong> 、<strong>请求体</strong></li></ul></li><li>响应协议：服务器将数据以响应格式返回给浏览器<ul><li>包括：<strong>响应行</strong> 、<strong>响应头</strong> 、<strong>响应体</strong></li></ul></li></ul><p>在HTTP1.1版本中，浏览器访问服务器的几种方式： </p><table><thead><tr><th align="center">请求方式</th><th align="left">请求说明</th></tr></thead><tbody><tr><td align="center"><strong>GET</strong></td><td align="left">获取资源。<br/>向特定的资源发出请求。例：<a href="http://www.baidu.com/s?wd=itheima">http://www.baidu.com/s?wd=itheima</a></td></tr><tr><td align="center"><strong>POST</strong></td><td align="left">传输实体主体。<br/>向指定资源提交数据进行处理请求（例：上传文件），数据被包含在请求体中。</td></tr><tr><td align="center">OPTIONS</td><td align="left">返回服务器针对特定资源所支持的HTTP请求方式。<br/>因为并不是所有的服务器都支持规定的方法，为了安全有些服务器可能会禁止掉一些方法，例如：DELETE、PUT等。那么OPTIONS就是用来询问服务器支持的方法。</td></tr><tr><td align="center">HEAD</td><td align="left">获得报文首部。<br/>HEAD方法类似GET方法，但是不同的是HEAD方法不要求返回数据。通常用于确认URI的有效性及资源更新时间等。</td></tr><tr><td align="center">PUT</td><td align="left">传输文件。<br/>PUT方法用来传输文件。类似FTP协议，文件内容包含在请求报文的实体中，然后请求保存到URL指定的服务器位置。</td></tr><tr><td align="center">DELETE</td><td align="left">删除文件。<br/>请求服务器删除Request-URI所标识的资源</td></tr><tr><td align="center">TRACE</td><td align="left">追踪路径。<br/>回显服务器收到的请求，主要用于测试或诊断</td></tr><tr><td align="center">CONNECT</td><td align="left">要求用隧道协议连接代理。<br/>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td></tr></tbody></table><p>在我们实际应用中常用的也就是 ：<strong>GET、POST</strong></p><p><strong>GET方式的请求协议：</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220823200708026.png"> </p><ul><li><p>请求行 ：HTTP请求中的第一行数据。由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p><ul><li>请求方式：GET  </li><li>资源路径：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求路径：&#x2F;brand&#x2F;findAll</li><li>请求参数：name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求参数是以key&#x3D;value形式出现</li><li>多个请求参数之间使用<code>&amp;</code>连接</li></ul></li><li>请求路径和请求参数之间使用<code>?</code>连接</li></ul><p>  </p></li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li><p>请求头 ：第二行开始，上图黄色部分内容就是请求头。格式为key: value形式 </p><ul><li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。这样服务器在收到信息后，就可以知道是谁，想干什么了</li></ul><p>常见的HTTP请求头有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Host: 表示请求的主机名</span><br><span class="line"></span><br><span class="line">User-Agent: 浏览器版本。 例如：Chrome浏览器的标识类似Mozilla/5.0 ...Chrome/79 ，IE浏览器的标识类似Mozilla/5.0 (Windows NT ...)like Gecko</span><br><span class="line"></span><br><span class="line">Accept：表示浏览器能接收的资源类型，如text/*，image/*或者*/*表示所有；</span><br><span class="line"></span><br><span class="line">Accept-Language：表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</span><br><span class="line"></span><br><span class="line">Accept-Encoding：表示浏览器可以支持的压缩类型，例如gzip, deflate等。</span><br><span class="line"></span><br><span class="line">Content-Type：请求主体的数据类型</span><br><span class="line"></span><br><span class="line">Content-Length：数据主体的大小（单位：字节）</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>举例说明：服务端可以根据请求头中的内容来获取客户端的相关信息，有了这些信息服务端就可以处理不同的业务需求。</p><p>比如:</p><ul><li>不同浏览器解析HTML和CSS标签的结果会有不一致，所以就会导致相同的代码在不同的浏览器会出现不同的效果</li><li>服务端根据客户端请求头中的数据获取到客户端的浏览器类型，就可以根据不同的浏览器设置不同的代码来达到一致的效果（这就是我们常说的浏览器兼容问题）</li></ul></blockquote><ul><li>请求体 ：存储请求参数<ul><li>GET请求的请求参数在请求行中，故不需要设置请求体</li></ul></li></ul><p><strong>POST方式的请求协议：</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220823201303601.png"></p><ul><li>请求行(以上图中红色部分)：包含请求方式、资源路径、协议&#x2F;版本<ul><li>请求方式：POST</li><li>资源路径：&#x2F;brand</li><li>协议&#x2F;版本：HTTP&#x2F;1.1</li></ul></li><li>请求头(以上图中黄色部分)   </li><li>请求体(以上图中绿色部分) ：存储请求参数 <ul><li>请求体和请求头之间是有一个空行隔开（作用：用于标记请求头结束）</li></ul></li></ul><p>GET请求和POST请求的区别：</p><table><thead><tr><th>区别方式</th><th>GET请求</th><th>POST请求</th></tr></thead><tbody><tr><td>请求参数</td><td>请求参数在请求行中。<br/>例：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1</td><td>请求参数在请求体中</td></tr><tr><td>请求参数长度</td><td>请求参数长度有限制(浏览器不同限制也不同)</td><td>请求参数长度没有限制</td></tr><tr><td>安全性</td><td>安全性低。原因：请求参数暴露在浏览器地址栏中。</td><td>安全性相对高</td></tr></tbody></table><h3 id="2-3-HTTP-响应协议"><a href="#2-3-HTTP-响应协议" class="headerlink" title="2.3 HTTP-响应协议"></a>2.3 HTTP-响应协议</h3><h4 id="2-3-1-格式介绍"><a href="#2-3-1-格式介绍" class="headerlink" title="2.3.1 格式介绍"></a>2.3.1 格式介绍</h4><p>与HTTP的请求一样，HTTP响应的数据也分为3部分：<strong>响应行</strong>、<strong>响应头</strong> 、<strong>响应体</strong> </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220823202344149.png"> </p><ul><li><p>响应行(以上图中红色部分)：响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</p><ul><li>协议&#x2F;版本：HTTP&#x2F;1.1</li><li>响应状态码：200</li><li>状态码描述：OK</li></ul></li><li><p>响应头(以上图中黄色部分)：响应数据的第二行开始。格式为key：value形式</p><ul><li>http是个无状态的协议，所以可以在请求头和响应头中设置一些信息和想要执行的动作，这样，对方在收到信息后，就可以知道你是谁，你想干什么</li></ul><p>常见的HTTP响应头有:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Content-Type：表示该响应内容的类型，例如text/html，image/jpeg ；</span><br><span class="line"></span><br><span class="line">Content-Length：表示该响应内容的长度（字节数）；</span><br><span class="line"></span><br><span class="line">Content-Encoding：表示该响应压缩算法，例如gzip ；</span><br><span class="line"></span><br><span class="line">Cache-Control：指示客户端应如何缓存，例如max-age=300表示可以最多缓存300秒 ;</span><br><span class="line"></span><br><span class="line">Set-Cookie: 告诉浏览器为当前页面所在的域设置cookie ;</span><br></pre></td></tr></table></figure></li></ul><ul><li>响应体(以上图中绿色部分)： 响应数据的最后一部分。存储响应的数据<ul><li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li></ul></li></ul><h4 id="2-3-2-响应状态码"><a href="#2-3-2-响应状态码" class="headerlink" title="2.3.2 响应状态码"></a>2.3.2 响应状态码</h4><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td><strong>响应中</strong> — 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</td></tr><tr><td>2xx</td><td><strong>成功</strong> — 表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td><strong>重定向</strong> — 重定向到其它地方，让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td><strong>客户端错误</strong> — 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td><strong>服务器端错误</strong> — 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><p>参考: 资料&#x2F;SpringbootWeb&#x2F;响应状态码.md</p><p>关于响应状态码，我们先主要认识三个状态码，其余的等后期用到了再去掌握：</p><ul><li>200    ok   客户端请求成功</li><li>404  Not Found  请求资源不存在</li><li>500  Internal Server Error  服务端发生不可预期的错误</li></ul><h3 id="2-4-HTTP-协议解析"><a href="#2-4-HTTP-协议解析" class="headerlink" title="2.4 HTTP-协议解析"></a>2.4 HTTP-协议解析</h3><p>将资料中准备好的Demo工程，导入到我们的IDEA中，有一个Server.java类，这里面就是自定义的一个服务器代码，主要使用到的是<code>ServerSocket</code>和<code>Socket</code></p><blockquote><p>&#x3D;&#x3D;说明：以下代码大家不需要自己写，我们主要是通过代码，让大家了解到服务器针对HTTP协议的解析机制&#x3D;&#x3D;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义web服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ServerSocket</span> <span class="variable">ss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>); <span class="comment">// 监听指定端口</span></span><br><span class="line">        System.out.println(<span class="string">&quot;server is running...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">sock</span> <span class="operator">=</span> ss.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;connected from &quot;</span> + sock.getRemoteSocketAddress());</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Handler</span>(sock);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    Socket sock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(Socket sock)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sock = sock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="built_in">this</span>.sock.getInputStream();</span><br><span class="line">             <span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="built_in">this</span>.sock.getOutputStream()) &#123;</span><br><span class="line">                handle(input, output);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.sock.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioe) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;client disconnected.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(InputStream input, OutputStream output)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(input, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(output, StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">// 读取HTTP请求:</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">requestOk</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">first</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">        <span class="keyword">if</span> (first.startsWith(<span class="string">&quot;GET / HTTP/1.&quot;</span>)) &#123;</span><br><span class="line">            requestOk = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> reader.readLine();</span><br><span class="line">            <span class="keyword">if</span> (header.isEmpty()) &#123; <span class="comment">// 读取到空行时, HTTP Header读取完毕</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(header);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(requestOk ? <span class="string">&quot;Response OK&quot;</span> : <span class="string">&quot;Response Error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!requestOk) &#123;<span class="comment">// 发送错误响应:</span></span><br><span class="line">            writer.write(<span class="string">&quot;HTTP/1.0 404 Not Found\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Length: 0\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 发送成功响应:</span></span><br><span class="line">            <span class="comment">//读取html文件，转换为字符串</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Server.class.getClassLoader().getResourceAsStream(<span class="string">&quot;html/a.html&quot;</span>);</span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is));</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">                data.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            br.close();</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> data.toString().getBytes(StandardCharsets.UTF_8).length;</span><br><span class="line"></span><br><span class="line">            writer.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Connection: keep-alive\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Type: text/html\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;Content-Length: &quot;</span> + length + <span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;\r\n&quot;</span>); <span class="comment">// 空行标识Header和Body的分隔</span></span><br><span class="line">            writer.write(data.toString());</span><br><span class="line">            writer.flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动ServerSocket程序：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202170430928.png"></p><p>浏览器输入：<code>http://localhost:8080</code>  就会访问到ServerSocket程序 </p><ul><li>ServerSocket程序，会读取服务器上<code>html/a.html</code>文件，并把文件数据发送给浏览器</li><li>浏览器接收到a.html文件中的数据后进行解析，显示以下内容</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202171204705.png"> </p><p>现在大家知道了服务器是可以使用java完成编写，是可以接受页面发送的请求和响应数据给前端浏览器的，而在开发中真正用到的Web服务器，我们不会自己写的，都是使用目前比较流行的web服务器。如：<strong>Tomcat</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220824233452167.png"> </p><h2 id="3-WEB服务器-Tomcat"><a href="#3-WEB服务器-Tomcat" class="headerlink" title="3. WEB服务器-Tomcat"></a>3. WEB服务器-Tomcat</h2><h3 id="3-1-简介"><a href="#3-1-简介" class="headerlink" title="3.1 简介"></a>3.1 简介</h3><h4 id="3-1-1-服务器概述"><a href="#3-1-1-服务器概述" class="headerlink" title="3.1.1 服务器概述"></a>3.1.1 服务器概述</h4><p><strong>服务器硬件</strong></p><ul><li>指的也是计算机，只不过服务器要比我们日常使用的计算机大很多。</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202173148317.png"> </p><p>服务器，也称伺服器。是提供计算服务的设备。由于服务器需要响应服务请求，并进行处理，因此一般来说服务器应具备承担服务并且保障服务的能力。</p><p>服务器的构成包括处理器、硬盘、内存、系统总线等，和通用的计算机架构类似，但是由于需要提供高可靠的服务，因此在处理能力、稳定性、可靠性、安全性、可扩展性、可管理性等方面要求较高。</p><p>在网络环境下，根据服务器提供的服务类型不同，可分为：文件服务器，数据库服务器，应用程序服务器，WEB服务器等。</p><p>服务器只是一台设备，必须安装服务器软件才能提供相应的服务。</p><p><strong>服务器软件</strong></p><p>服务器软件：基于ServerSocket编写的程序</p><ul><li>服务器软件本质是一个运行在服务器设备上的应用程序</li><li>能够接收客户端请求，并根据请求给客户端响应数据</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1530625192392.png"></p><h4 id="3-1-2-Web服务器"><a href="#3-1-2-Web服务器" class="headerlink" title="3.1.2 Web服务器"></a>3.1.2 Web服务器</h4><p>Web服务器是一个应用程序(软件)，对HTTP协议的操作进行封装，使得程序员不必直接对协议进行操作(不用程序员自己写代码去解析http协议规则)，让Web开发更加便捷。主要功能是”提供网上信息浏览服务”。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220824233614686.png"></p><p>Web服务器是安装在服务器端的一款软件，将来我们把自己写的Web项目部署到Tomcat服务器软件中，当Web服务器软件启动后，部署在Web服务器软件中的页面就可以直接通过浏览器来访问了。</p><p><strong>Web服务器软件使用步骤</strong></p><ul><li>准备静态资源</li><li>下载安装Web服务器软件</li><li>将静态资源部署到Web服务器上</li><li>启动Web服务器使用浏览器访问对应的资源</li></ul><p>第1步：准备静态资源</p><ul><li>在提供的资料中找到静态资源文件</li></ul><p><img src="/assets/image-20221202180119859.png" alt="image-20221202180119859"> </p><p>第2步：下载安装Web服务器软件</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202181110555.png"></p><p>第3步：将静态资源部署到Web服务器上</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202180805686.png"></p><p>第4步：启动Web服务器使用浏览器访问对应的资源</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202181346327.png"></p><p>浏览器输入：<code>http://localhost:8080/demo/index.html</code></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202181651469.png"></p><p>上述内容在演示的时候，使用的是Apache下的Tomcat软件，至于Tomcat软件如何使用，后面会详细的讲到。而对于Web服务器来说，实现的方案有很多，Tomcat只是其中的一种，而除了Tomcat以外，还有很多优秀的Web服务器，比如:</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220824233728524.png"> </p><p>Tomcat就是一款软件，我们主要是以学习如何去使用为主。具体我们会从以下这些方向去学习:</p><ol><li><p>简介：初步认识下Tomcat</p></li><li><p>基本使用: 安装、卸载、启动、关闭、配置和项目部署，这些都是对Tomcat的基本操作</p></li><li><p>IDEA中如何创建Maven Web项目</p></li><li><p>IDEA中如何使用Tomcat,后面这两个都是我们以后开发经常会用到的方式</p></li></ol><p>首选我们来认识下Tomcat。</p><h4 id="3-1-3-Tomcat"><a href="#3-1-3-Tomcat" class="headerlink" title="3.1.3 Tomcat"></a>3.1.3 Tomcat</h4><p>Tomcat服务器软件是一个免费的开源的web应用服务器。是Apache软件基金会的一个核心项目。由Apache，Sun和其他一些公司及个人共同开发而成。</p><p>由于Tomcat只支持Servlet&#x2F;JSP少量JavaEE规范，所以是一个开源免费的轻量级Web服务器。</p><blockquote><p>JavaEE规范：   JavaEE &#x3D;&gt; Java Enterprise Edition(Java企业版)</p><p>avaEE规范就是指Java企业级开发的技术规范总和。包含13项技术规范：JDBC、JNDI、EJB、RMI、JSP、Servlet、XML、JMS、Java IDL、JTS、JTA、JavaMail、JAF</p></blockquote><p>因为Tomcat支持Servlet&#x2F;JSP规范，所以Tomcat也被称为Web容器、Servlet容器。JavaWeb程序需要依赖Tomcat才能运行。</p><p>Tomcat的官网: <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a> </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220824233903517.png"> </p><h3 id="3-2-基本使用"><a href="#3-2-基本使用" class="headerlink" title="3.2 基本使用"></a>3.2 基本使用</h3><h4 id="3-2-1-下载"><a href="#3-2-1-下载" class="headerlink" title="3.2.1 下载"></a>3.2.1 下载</h4><p>直接从官方网站下载：<a href="https://tomcat.apache.org/download-90.cgi">https://tomcat.apache.org/download-90.cgi</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220824234407828.png"></p><blockquote><p>Tomcat软件类型说明：</p><ul><li>tar.gz文件，是linux和mac操作系统下的压缩版本</li><li>zip文件，是window操作系统下压缩版本（我们选择zip文件）</li></ul></blockquote><p>大家可以自行下载，也可以直接使用资料中已经下载好的资源，</p><p>Tomcat的软件程序  ：&#x2F;资料&#x2F;SpringbootWeb&#x2F;apache-tomcat-9.0.27-windows-x64.zip</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220824234527743.png"> </p><h4 id="3-2-2-安装与卸载"><a href="#3-2-2-安装与卸载" class="headerlink" title="3.2.2 安装与卸载"></a>3.2.2 安装与卸载</h4><p><strong>安装:</strong> Tomcat是绿色版，直接解压即安装</p><blockquote><p>在E盘的develop目录下，将<code>apache-tomcat-9.0.27-windows-x64.zip</code>进行解压缩，会得到一个<code>apache-tomcat-9.0.27</code>的目录，Tomcat就已经安装成功。</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202184545321.png"></p><p>&#x3D;&#x3D;注意，Tomcat在解压缩的时候，解压所在的目录可以任意，但最好解压到一个不包含中文和空格的目录，因为后期在部署项目的时候，如果路径有中文或者空格可能会导致程序部署失败。&#x3D;&#x3D;</p><p>打开<code>apache-tomcat-9.0.27</code>目录就能看到如下目录结构，每个目录中包含的内容需要认识下</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220824234652173.png">  </p><p>bin：目录下有两类文件，一种是以<code>.bat</code>结尾的，是Windows系统的可执行文件，一种是以<code>.sh</code>结尾的，是Linux系统的可执行文件。</p><p>webapps：就是以后项目部署的目录</p><p><strong>卸载：</strong>卸载比较简单，可以直接删除目录即可</p><h4 id="3-2-3-启动与关闭"><a href="#3-2-3-启动与关闭" class="headerlink" title="3.2.3 启动与关闭"></a>3.2.3 启动与关闭</h4><p><strong>启动Tomcat</strong> </p><ul><li>双击tomcat解压目录&#x2F;bin&#x2F;<strong>startup.bat</strong>文件即可启动tomcat</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202183201663.png"></p><p>&#x3D;&#x3D;注意: tomcat服务器启动后,黑窗口不会关闭,只要黑窗口不关闭,就证明tomcat服务器正在运行&#x3D;&#x3D;</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202183409304.png"></p><p>Tomcat的默认端口为8080，所以在浏览器的地址栏输入：<code>http://127.0.0.1:8080</code> 即可访问tomcat服务器</p><blockquote><p>127.0.0.1 也可以使用localhost代替。如：<code>http://localhost:8080</code></p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202183550682.png"></p><ul><li>能看到以上图片中Apache Tomcat的内容就说明Tomcat已经启动成功</li></ul><p>&#x3D;&#x3D;注意事项&#x3D;&#x3D; ：Tomcat启动的过程中，遇到控制台有中文乱码时，可以通常修改conf&#x2F;logging.prooperties文件解决</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220825083848086.png"> </p><p><strong>关闭:</strong>  关闭有三种方式 </p><p>1、强制关闭：直接x掉Tomcat窗口（不建议）</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202184753808.png"></p><p>2、正常关闭：bin\shutdown.bat</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202185103941.png"></p><p>3、正常关闭：在Tomcat启动窗口中按下 Ctrl+C</p><ul><li>说明：如果按下Ctrl+C没有反映，可以多按几次</li></ul><h4 id="3-2-4-常见问题"><a href="#3-2-4-常见问题" class="headerlink" title="3.2.4 常见问题"></a>3.2.4 常见问题</h4><p><strong>问题1：Tomcat启动时，窗口一闪而过</strong></p><ul><li>检查JAVA_HOME环境变量是否正确配置</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202190033167.png"></p><p><strong>问题2：端口号冲突</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220825084104447.png"></p><ul><li><p>发生问题的原因：Tomcat使用的端口被占用了。</p></li><li><p>解决方案：换Tomcat端口号</p><ul><li>要想修改Tomcat启动的端口号，需要修改 conf&#x2F;server.xml文件</li></ul></li></ul><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220825084017185.png" alt="" style="zoom:80%;" /> <blockquote><p>注: HTTP协议默认端口号为80，如果将Tomcat端口号改为80，则将来访问Tomcat时，将不用输入端口号。</p></blockquote><h3 id="3-3-入门程序解析"><a href="#3-3-入门程序解析" class="headerlink" title="3.3 入门程序解析"></a>3.3 入门程序解析</h3><p>关于web开发的基础知识，我们可以告一段落了。下面呢，我们在基于今天的核心技术点SpringBoot快速入门案例进行分析。</p><h4 id="3-3-1-Spring官方骨架"><a href="#3-3-1-Spring官方骨架" class="headerlink" title="3.3.1 Spring官方骨架"></a>3.3.1 Spring官方骨架</h4><p>之前我们创建的SpringBoot入门案例，是基于Spring官方提供的骨架实现的。</p><p>Spring官方骨架，可以理解为Spring官方为程序员提供一个搭建项目的模板。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202195646621.png"></p><p>我们可以通过访问：<a href="https://start.spring.io/">https://start.spring.io/</a> ，进入到官方骨架页面</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202201623424.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202200356398.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202200547676.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202200708988.png"></p><p>Spring官方生成的SpringBoot项目，怎么使用呢？</p><ul><li>解压缩后，就会得到一个SpringBoot项目工程</li></ul><p><img src="/assets/image-20221202201042109.png" alt="image-20221202201042109"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202201221136.png"></p><p>打开pom.xml文件，我们可以看到springboot项目中引入了web依赖和test依赖</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202201826364.png"></p><blockquote><p><strong>结论：不论使用IDEA创建SpringBoot项目，还是直接在官方网站利用骨架生成SpringBoot项目，项目的结构和pom.xml文件中内容是相似的。</strong></p></blockquote><h4 id="3-3-2-起步依赖"><a href="#3-3-2-起步依赖" class="headerlink" title="3.3.2 起步依赖"></a>3.3.2 起步依赖</h4><p>在我们之前讲解的SpringBoot快速入门案例中，同样也引用了：web依赖和test依赖</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202202305118.png"></p><p>spring-boot-starter-web和spring-boot-starter-test，在SpringBoot中又称为：起步依赖</p><p>而在SpringBoot的项目中，有很多的起步依赖，他们有一个共同的特征：就是以<code>spring-boot-starter-</code>作为开头。在以后大家遇到spring-boot-starter-xxx这类的依赖，都为起步依赖。</p><p>起步依赖有什么特殊之处呢，这里我们以入门案例中引入的起步依赖做为讲解：</p><ul><li>spring-boot-starter-web：包含了web应用开发所需要的常见依赖</li><li>spring-boot-starter-test：包含了单元测试所需要的常见依赖</li></ul><blockquote><p><strong>spring-boot-starter-web</strong>内部把关于Web开发所有的依赖都已经导入并且指定了版本，只需引入 <code>spring-boot-starter-web</code> 依赖就可以实现Web开发的需要的功能</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202204013113.png"></p></blockquote><p>Spring的官方提供了很多现成的starter(起步依赖)，我们在开发相关应用时，只需要引入对应的starter即可。</p><p>官方地址：<a href="https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters">https://docs.spring.io/spring-boot/docs/2.7.2/reference/htmlsingle/#using.build-systems.starters</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202204536647.png"></p><p>每一个起步依赖，都用于开发一个特定的功能。</p><blockquote><p>举例：当我们开发中需要使用redis数据库时，只需要在SpringBoot项目中，引入：spring-boot-starter-redis ，即可导入redis开发所需要的依赖。</p></blockquote><h4 id="3-3-2-SpringBoot父工程"><a href="#3-3-2-SpringBoot父工程" class="headerlink" title="3.3.2 SpringBoot父工程"></a>3.3.2 SpringBoot父工程</h4><p>在我们之前开发的SpringBoot入门案例中，我们通过maven引入的依赖，是没有指定具体的依赖版本号的。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202205103486.png"></p><p>为什么没有指定<version>版本号，可以正常使用呢？</p><ul><li>因为每一个SpringBoot工程，都有一个父工程。依赖的版本号，在父工程中统一管理。</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221202205318778.png"></p><h4 id="3-3-3-内嵌Tomcat"><a href="#3-3-3-内嵌Tomcat" class="headerlink" title="3.3.3 内嵌Tomcat"></a>3.3.3 内嵌Tomcat</h4><p>问题：为什么我们之前书写的SpringBoot入门程序中，并没有把程序部署到Tomcat的webapps目录下，也可以运行呢？</p><p>原因呢，是因为在我们的SpringBoot中，引入了web运行环境(也就是引入spring-boot-starter-web起步依赖)，其内部已经集成了内置的Tomcat服务器。</p><p>我们可以通过IDEA开发工具右侧的maven面板中，就可以看到当前工程引入的依赖。其中已经将Tomcat的相关依赖传递下来了，也就是说在SpringBoot中可以直接使用Tomcat服务器。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220825194553137.png"> </p><p>当我们运行SpringBoot的引导类时(运行main方法)，就会看到命令行输出的日志，其中占用8080端口的就是Tomcat。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220825195359993.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-04</title>
      <link href="/2023/07/27/day04-Maven/"/>
      <url>/2023/07/27/day04-Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><blockquote><ol><li>初识Maven</li><li>Maven概述<ul><li>Maven模型介绍</li><li>Maven仓库介绍</li><li>Maven安装与配置</li></ul></li><li>IDEA集成Maven</li><li>依赖管理</li></ol></blockquote><h2 id="01-Maven课程介绍"><a href="#01-Maven课程介绍" class="headerlink" title="01. Maven课程介绍"></a>01. Maven课程介绍</h2><h3 id="1-1-课程安排"><a href="#1-1-课程安排" class="headerlink" title="1.1 课程安排"></a>1.1 课程安排</h3><p>学习完前端Web开发技术后，我们即将开始学习后端Web开发技术。做为一名Java开发工程师，<strong>后端Web开发技术是我们学习的重点</strong>。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130095316032.png"></p><p>后端Web开发技术的学习，我们会先学习Java项目的构建工具：Maven</p><h3 id="1-2-初识Maven"><a href="#1-2-初识Maven" class="headerlink" title="1.2 初识Maven"></a>1.2 初识Maven</h3><h4 id="1-2-1-什么是Maven"><a href="#1-2-1-什么是Maven" class="headerlink" title="1.2.1 什么是Maven"></a>1.2.1 什么是Maven</h4><p>Maven是Apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><blockquote><p>Apache 软件基金会，成立于1999年7月，是目前世界上最大的最受欢迎的开源软件基金会，也是一个专门为支持开源项目而生的非盈利性组织。</p><p>开源项目：<a href="https://www.apache.org/index.html#projects-list">https://www.apache.org/index.html#projects-list</a></p></blockquote><h4 id="1-2-2-Maven的作用"><a href="#1-2-2-Maven的作用" class="headerlink" title="1.2.2 Maven的作用"></a>1.2.2 Maven的作用</h4><p>使用Maven能够做什么呢？</p><ol><li>依赖管理</li><li>统一项目结构</li><li>项目构建</li></ol><p><strong>依赖管理</strong>：</p><ul><li>方便快捷的管理项目依赖的资源(jar包)，避免版本冲突问题</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130104014162.png"></p><p>当使用maven进行项目依赖(jar包)管理，则很方便的可以解决这个问题。 我们只需要在maven项目的pom.xml文件中，添加一段如下图所示的配置即可实现。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616001159531.png">  </p><p>**统一项目结构 : **</p><ul><li>提供标准、统一的项目结构</li></ul><p>在项目开发中，当你使用不同的开发工具 (如：Eclipse、Idea)，创建项目工程时：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130212841973.png"> </p><p>若我们创建的是一个maven工程，是可以帮我们自动生成统一、标准的项目目录结构：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130220539444.png"></p><p>具体的统一结构如下：</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130140132209.png" alt="" style="zoom:80%;" /><blockquote><p>目录说明： </p><ul><li>src&#x2F;main&#x2F;java: java源代码目录</li><li>src&#x2F;main&#x2F;resources:  配置文件信息</li><li>src&#x2F;test&#x2F;java: 测试代码</li><li>src&#x2F;test&#x2F;resources: 测试配置文件信息</li></ul></blockquote><p><strong>项目构建 :</strong> </p><ul><li>maven提供了标准的、跨平台(Linux、Windows、MacOS) 的自动化项目构建方式</li></ul><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130140247524.png" alt="" style="zoom:67%;" /><p>如上图所示我们开发了一套系统，代码需要进行编译、测试、打包、发布，这些操作如果需要反复进行就显得特别麻烦，而Maven提供了一套简单的命令来完成项目构建。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130222907628.png"></p><p>综上所述，可以得到一个结论：<strong>Maven是一款管理和构建java项目的工具</strong></p><h2 id="02-Maven概述"><a href="#02-Maven概述" class="headerlink" title="02. Maven概述"></a>02. Maven概述</h2><h3 id="2-1-Maven介绍"><a href="#2-1-Maven介绍" class="headerlink" title="2.1 Maven介绍"></a>2.1 Maven介绍</h3><p>Apache Maven是一个项目管理和构建工具，它基于项目对象模型(Project Object Model , 简称: POM)的概念，通过一小段描述信息来管理项目的构建、报告和文档。</p><p>官网：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p>Maven的作用： </p><ol><li>方便的依赖管理</li><li>统一的项目结构</li><li>标准的项目构建流程</li></ol><h3 id="2-2-Maven模型"><a href="#2-2-Maven模型" class="headerlink" title="2.2 Maven模型"></a>2.2 Maven模型</h3><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</li></ul><p>1). 构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130142100703.png"></p><p>以上图中紫色框起来的部分，就是用来完成标准化构建流程 。当我们需要编译，Maven提供了一个编译插件供我们使用；当我们需要打包，Maven就提供了一个打包插件供我们使用等。 </p><p>2). 项目对象模型 (Project Object Model)</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130142643255.png"></p><p>以上图中紫色框起来的部分属于项目对象模型，就是将我们自己的项目抽象成一个对象模型，有自己专属的坐标，如下图所示是一个Maven项目：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616094113852.png"></p><blockquote><p>坐标，就是资源(jar包)的唯一标识，通过坐标可以定位到所需资源(jar包)位置</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130230134757.png"></p></blockquote><p>3). 依赖管理模型(Dependency)</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130143139644.png"></p><p>以上图中紫色框起来的部分属于依赖管理模型，是使用坐标来描述当前项目依赖哪些第三方jar包</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130174805973.png"></p><p>之前我们项目中需要jar包时，直接就把jar包复制到项目下的lib目录，而现在书写在pom.xml文件中的坐标又是怎么能找到所要的jar包文件的呢？</p><blockquote><p>答案：Maven仓库</p></blockquote><h3 id="2-3-Maven仓库"><a href="#2-3-Maven仓库" class="headerlink" title="2.3 Maven仓库"></a>2.3 Maven仓库</h3><p>仓库：用于存储资源，管理各种jar包</p><blockquote><p>仓库的本质就是一个目录(文件夹)，这个目录被用来存储开发中所有依赖(就是jar包)和插件</p></blockquote><p>Maven仓库分为：</p><ul><li>本地仓库：自己计算机上的一个目录(用来存储jar包)</li><li>中央仓库：由Maven团队维护的全球唯一的。仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库(私服)：一般由公司团队搭建的私有仓库</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616095633552.png"></p><p>当项目中使用坐标引入对应依赖jar包后，首先会查找本地仓库中是否有对应的jar包</p><ul><li><p>如果有，则在项目直接引用</p></li><li><p>如果没有，则去中央仓库中下载对应的jar包到本地仓库</p></li></ul><p>如果还可以搭建远程仓库(私服)，将来jar包的查找顺序则变为： 本地仓库 –&gt; 远程仓库–&gt; 中央仓库</p><h3 id="2-4-Maven安装"><a href="#2-4-Maven安装" class="headerlink" title="2.4 Maven安装"></a>2.4 Maven安装</h3><p>认识了Maven后，我们就要开始使用Maven了，那么首先我们要进行Maven的下载与安装。</p><h4 id="2-4-1-下载"><a href="#2-4-1-下载" class="headerlink" title="2.4.1 下载"></a>2.4.1 下载</h4><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><h4 id="2-4-2-安装步骤"><a href="#2-4-2-安装步骤" class="headerlink" title="2.4.2 安装步骤"></a>2.4.2 安装步骤</h4><p>Maven安装配置步骤：</p><ol><li>解压安装</li><li>配置仓库</li><li>配置Maven环境变量</li></ol><p><strong>1、解压 apache-maven-3.6.1-bin.zip（解压即安装）</strong></p><blockquote><p>建议解压到没有中文、特殊字符的路径下。如课程中解压到 <code>E:\develop</code> 下。</p></blockquote><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1-1669821012006.gif"> </p><p>解压缩后的目录结构如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616100529868-1669794069698.png"> </p><ul><li>bin目录 ： 存放的是可执行命令。（mvn 命令重点关注）</li><li>conf目录 ：存放Maven的配置文件。（settings.xml配置文件后期需要修改）</li><li>lib目录 ：存放Maven依赖的jar包。（Maven也是使用java开发的，所以它也依赖其他的jar包）</li></ul><p><strong>2、配置本地仓库</strong></p><p>2.1、在自己计算机上新一个目录（本地仓库，用来存储jar包）</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130231857537.png"> </p><p>2.2、进入到conf目录下修改settings.xml配置文件 </p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到53行</p><p>2). 复制<localRepository>标签，粘贴到注释的外面（55行）</p><p>3). 复制之前新建的用来存储jar包的路径，替换掉<localRepository>标签体内容</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/2.gif" style="zoom:80%;" /><p><strong>3、配置阿里云私服</strong></p><p>由于中央仓库在国外，所以下载jar包速度可能比较慢，而阿里公司提供了一个远程仓库，里面基本也都有开源项目的jar包。</p><p>进入到conf目录下修改settings.xml配置文件：</p><p>1). 使用超级记事本软件，打开settings.xml文件，定位到160行左右</p><p>2). 在<mirrors>标签下为其添加子标签<mirror>，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/3.gif"></p><p>注意配置的位置，在<mirrors> … </mirrors> 中间添加配置。如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130161346565.png"></p><p>&#x3D;&#x3D;注:  只可配置一个<mirror>(另一个要注释!) ，不然两个可能发生冲突，导致jar包无法下载!!!!!!!&#x3D;&#x3D;</p><p><strong>4、配置环境变量</strong></p><blockquote><p>Maven环境变量的配置类似于JDK环境变量配置一样</p></blockquote><p>1). 在系统变量处新建一个变量MAVEN_HOME</p><ul><li>MAVEN_HOME环境变量的值，设置为maven的解压安装目录</li></ul><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616102344350.png" style="zoom:80%;" /><p>2). 在Path中进行配置</p><ul><li>PATH环境变量的值，设置为：%MAVEN_HOME%\bin</li></ul><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616102435856.png" style="zoom:80%;" /> <p>3). 打开DOS命令提示符进行验证，出现如图所示表示安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616102554143.png"> </p><h2 id="03-IDEA集成Maven"><a href="#03-IDEA集成Maven" class="headerlink" title="03. IDEA集成Maven"></a>03. IDEA集成Maven</h2><p>我们要想在IDEA中使用Maven进行项目构建，就需要在IDEA中集成Maven</p><h3 id="3-1-配置Maven环境"><a href="#3-1-配置Maven环境" class="headerlink" title="3.1 配置Maven环境"></a>3.1 配置Maven环境</h3><h4 id="3-1-1-当前工程设置"><a href="#3-1-1-当前工程设置" class="headerlink" title="3.1.1 当前工程设置"></a>3.1.1 当前工程设置</h4><p>1、选择 IDEA中 File  &#x3D;&gt;  Settings  &#x3D;&gt;  Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616103219646.png"> </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130234731629.png"></p><p>2、设置IDEA使用本地安装的Maven，并修改配置文件及本地仓库路径</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616103302386.png"></p><blockquote><p>Maven home path ：指定当前Maven的安装目录</p><p>User settings file ：指定当前Maven的settings.xml配置文件的存放路径</p><p>Local repository ：指定Maven的本地仓库的路径 (如果指定了settings.xml, 这个目录会自动读取出来, 可以不用手动指定)</p></blockquote><p>3、配置工程的编译版本为11</p><ul><li>Maven默认使用的编译版本为5（版本过低）</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201093737128.png"> </p><p>上述配置的maven环境，只是针对于当前工程的，如果我们再创建一个project，又恢复成默认的配置了。 要解决这个问题， 我们就需要配置全局的maven环境。</p><h4 id="3-1-2-全局设置"><a href="#3-1-2-全局设置" class="headerlink" title="3.1.2 全局设置"></a>3.1.2 全局设置</h4><p>1、进入到IDEA欢迎页面</p><ul><li>选择 IDEA中 File  &#x3D;&gt;  close project</li></ul><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/4.gif" style="zoom:80%;" /><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616104338612.png" style="zoom:80%;" /><p>2、打开 All settings , 选择 Build,Execution,Deployment  &#x3D;&gt;  Build Tools  &#x3D;&gt;  Maven</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616104517726.png" style="zoom:80%;" /><p>3、配置工程的编译版本为11</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201093737128.png" alt="" style="zoom:80%;" /><p>这里所设置的maven的环境信息，并未指定任何一个project，此时设置的信息就属于全局配置信息。 以后，我们再创建project，默认就是使用我们全局配置的信息。</p><h3 id="3-2-Maven项目"><a href="#3-2-Maven项目" class="headerlink" title="3.2 Maven项目"></a>3.2 Maven项目</h3><h4 id="3-2-1-创建Maven项目"><a href="#3-2-1-创建Maven项目" class="headerlink" title="3.2.1 创建Maven项目"></a>3.2.1 创建Maven项目</h4><p>1、创建一个空项目 </p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201095621738.png" alt="" style="zoom:80%;" /><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201095600057.png" alt="" style="zoom:80%;" /><p>2、创建模块，选择Maven，点击Next</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201095831320.png" alt="" style="zoom:80%;" /><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201100011799.png" alt="" style="zoom:80%;" /><p>3、填写模块名称，坐标信息，点击finish，创建完成</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201100502234.png" alt="" style="zoom:80%;" /> <p>4、在Maven工程下，创建HelloWorld类</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201101603397.png" alt="" style="zoom:80%;" /><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201101643427.png" alt="" style="zoom:80%;" /><blockquote><ul><li><p>Maven项目的目录结构:</p><p>maven-project01<br>|—  src  (源代码目录和测试代码目录)<br>        |—  main (源代码目录)<br>                   |— java (源代码java文件目录)<br>                   |— resources (源代码配置文件目录)<br>        |—  test (测试代码目录)<br>                   |— java (测试代码java目录)<br>                   |— resources (测试代码配置文件目录)<br>|— target (编译、打包生成文件存放目录)</p></li></ul></blockquote><p>5、编写 HelloWorld，并运行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello Maven ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-2-POM配置详解"><a href="#3-2-2-POM配置详解" class="headerlink" title="3.2.2 POM配置详解"></a>3.2.2 POM配置详解</h4><p>POM (Project Object Model) ：指的是项目对象模型，用来描述当前的maven项目。</p><ul><li>使用pom.xml文件来实现</li></ul><p>pom.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- POM模型版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 当前项目坐标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven_project1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 打包方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom文件详解：</p><ul><li><project> ：pom文件的根标签，表示当前maven项目</li><li><modelVersion> ：声明项目描述遵循哪一个POM模型版本<ul><li>虽然模型本身的版本很少改变，但它仍然是必不可少的。目前POM模型版本是4.0.0</li></ul></li><li>坐标 ：<groupId>、<artifactId>、<version><ul><li>定位项目在本地仓库中的位置，由以上三个标签组成一个坐标</li></ul></li><li><packaging> ：maven项目的打包方式，通常设置为jar或war（默认值：jar）</li></ul><h4 id="3-2-3-Maven坐标详解"><a href="#3-2-3-Maven坐标详解" class="headerlink" title="3.2.3 Maven坐标详解"></a>3.2.3 Maven坐标详解</h4><p>什么是坐标？</p><ul><li>Maven中的坐标是&#x3D;&#x3D;资源的唯一标识&#x3D;&#x3D; , 通过该坐标可以唯一定位资源位置</li><li>使用坐标来定义项目或引入项目中需要的依赖</li></ul><p>Maven坐标主要组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号</li></ul><p>如下图就是使用坐标表示一个项目：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616111031057.png"> </p><blockquote><p><strong>注意：</strong></p><ul><li>上面所说的资源可以是插件、依赖、当前项目。</li><li>我们的项目如果被其他的项目依赖时，也是需要坐标来引入的。</li></ul></blockquote><h3 id="3-3-导入Maven项目"><a href="#3-3-导入Maven项目" class="headerlink" title="3.3 导入Maven项目"></a>3.3 导入Maven项目</h3><ul><li><strong>方式1：使用Maven面板，快速导入项目</strong></li></ul><p>打开IDEA，选择右侧Maven面板，点击 + 号，选中对应项目的pom.xml文件，双击即可</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201104320521.png"></p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201104906754.png" alt="" style="zoom:80%;" /> <blockquote><p>说明：如果没有Maven面板，选择 View  &#x3D;&gt;  Appearance  &#x3D;&gt;  Tool Window Bars</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616111937679.png"> </p></blockquote><ul><li><strong>方式2：使用idea导入模块项目</strong></li></ul><p>File  &#x3D;&gt;  Project Structure  &#x3D;&gt;  Modules  &#x3D;&gt;  +  &#x3D;&gt;  Import Module</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220823161727718.png" style="zoom:80%;" /><p>找到要导入工程的pom.xml</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201105532909.png"></p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201105845872.png" alt="" style="zoom:80%;" /><h2 id="04-依赖管理"><a href="#04-依赖管理" class="headerlink" title="04. 依赖管理"></a>04. 依赖管理</h2><h3 id="4-1-依赖配置"><a href="#4-1-依赖配置" class="headerlink" title="4.1 依赖配置"></a>4.1 依赖配置</h3><p>依赖：指当前项目运行所需要的jar包。一个项目中可以引入多个依赖：</p><p>例如：在当前工程中，我们需要用到logback来记录日志，此时就可以在maven工程的pom.xml文件中，引入logback的依赖。具体步骤如下：</p><ol><li><p>在pom.xml中编写<dependencies>标签</p></li><li><p>在<dependencies>标签中使用<dependency>引入坐标</p></li><li><p>定义坐标的 groupId、artifactId、version</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第1个依赖 : logback --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第2个依赖 : junit --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>点击刷新按钮，引入最新加入的坐标<ul><li>刷新依赖：保证每一次引入新的依赖，或者修改现有的依赖配置，都可以加入最新的坐标</li></ul></li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130184402805.png">  </p><blockquote><p>注意事项：</p><ol><li>如果引入的依赖，在本地仓库中不存在，将会连接远程仓库 &#x2F; 中央仓库，然后下载依赖（这个过程会比较耗时，耐心等待）</li><li>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></li></ol></blockquote><p><strong>添加依赖的几种方式：</strong></p><ol><li><p>利用中央仓库搜索的依赖坐标</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/5.gif" style="zoom:80%;" /></li><li><p>利用IDEA工具搜索依赖</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/6.gif" style="zoom:80%;" /></li><li><p>熟练上手maven后，快速导入依赖</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/7.gif" style="zoom:80%;" /></li></ol><h3 id="4-2-依赖传递"><a href="#4-2-依赖传递" class="headerlink" title="4.2 依赖传递"></a>4.2 依赖传递</h3><h4 id="4-2-1-依赖具有传递性"><a href="#4-2-1-依赖具有传递性" class="headerlink" title="4.2.1 依赖具有传递性"></a>4.2.1 依赖具有传递性</h4><p>早期我们没有使用maven时，向项目中添加依赖的jar包，需要把所有的jar包都复制到项目工程下。如下图所示，需要logback-classic时，由于logback-classic又依赖了logback-core和slf4j，所以必须把这3个jar包全部复制到项目工程下</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201120514644.png"></p><p>我们现在使用了maven，当项目中需要使用logback-classic时，只需要在pom.xml配置文件中，添加logback-classic的依赖坐标即可。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201113659400.png"></p><p>在pom.xml文件中只添加了logback-classic依赖，但由于maven的依赖具有传递性，所以会自动把所依赖的其他jar包也一起导入。</p><p>依赖传递可以分为：</p><ol><li><p>直接依赖：在当前项目中通过依赖配置建立的依赖关系</p></li><li><p>间接依赖：被依赖的资源如果依赖其他资源，当前项目间接依赖其他资源</p></li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616115445812.png"> </p><p>比如以上图中：</p><ul><li>projectA依赖了projectB。对于projectA 来说，projectB 就是直接依赖。</li><li>而projectB依赖了projectC及其他jar包。 那么此时，在projectA中也会将projectC的依赖传递下来。对于projectA 来说，projectC就是间接依赖。</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201115801806.png"></p><h4 id="4-2-2-排除依赖"><a href="#4-2-2-排除依赖" class="headerlink" title="4.2.2 排除依赖"></a>4.2.2 排除依赖</h4><p>问题：之前我们讲了依赖具有传递性。那么A依赖B，B依赖C，如果A不想将C依赖进来，是否可以做到？ </p><p>答案：在maven项目中，我们可以通过排除依赖来实现。</p><p>什么是排除依赖？</p><ul><li>排除依赖：指主动断开依赖的资源。（被排除的资源无需指定版本）</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-projectB<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>依赖排除示例：</p><ul><li>maven-projectA依赖了maven-projectB，maven-projectB依赖了Junit。基于依赖的传递性，所以maven-projectA也依赖了Junit</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201141929240.png"></p><ul><li>使用排除依赖后</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201142501556.png"></p><h3 id="4-3-依赖范围"><a href="#4-3-依赖范围" class="headerlink" title="4.3 依赖范围"></a>4.3 依赖范围</h3><p>在项目中导入依赖的jar包后，默认情况下，可以在任何地方使用。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201135142706.png"></p><p>如果希望限制依赖的使用范围，可以通过<scope>标签设置其作用范围。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616123806894.png"> </p><p>作用范围：</p><ol><li><p>主程序范围有效（main文件夹范围内）</p></li><li><p>测试程序范围有效（test文件夹范围内）</p></li><li><p>是否参与打包运行（package指令范围内）</p></li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201140140947.png"></p><p>如上图所示，给junit依赖通过scope标签指定依赖的作用范围。 那么这个依赖就只能作用在测试环境，其他环境下不能使用。</p><p>scope标签的取值范围：</p><table><thead><tr><th><strong>scope</strong>值</th><th><strong>主程序</strong></th><th><strong>测试程序</strong></th><th><strong>打包（运行）</strong></th><th><strong>范例</strong></th></tr></thead><tbody><tr><td>compile（默认）</td><td>Y</td><td>Y</td><td>Y</td><td>log4j</td></tr><tr><td>test</td><td>-</td><td>Y</td><td>-</td><td>junit</td></tr><tr><td>provided</td><td>Y</td><td>Y</td><td>-</td><td>servlet-api</td></tr><tr><td>runtime</td><td>-</td><td>Y</td><td>Y</td><td>jdbc驱动</td></tr></tbody></table><h3 id="4-4-生命周期"><a href="#4-4-生命周期" class="headerlink" title="4.4 生命周期"></a>4.4 生命周期</h3><h4 id="4-4-1-介绍"><a href="#4-4-1-介绍" class="headerlink" title="4.4.1 介绍"></a>4.4.1 介绍</h4><p>Maven的生命周期就是为了对所有的构建过程进行抽象和统一。 描述了一次项目构建，经历哪些阶段。</p><p>在Maven出现之前，项目构建的生命周期就已经存在，软件开发人员每天都在对项目进行清理，编译，测试及部署。虽然大家都在不停地做构建工作，但公司和公司间、项目和项目间，往往使用不同的方式做类似的工作。</p><p>Maven从大量项目和构建工具中学习和反思，然后总结了一套高度完美的，易扩展的项目构建生命周期。这个生命周期包含了项目的清理，初始化，编译，测试，打包，集成测试，验证，部署和站点生成等几乎所有构建步骤。</p><p>Maven对项目构建的生命周期划分为3套（相互独立）：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616124015567.png"></p><ul><li><p>clean：清理工作。</p></li><li><p>default：核心工作。如：编译、测试、打包、安装、部署等。</p></li><li><p>site：生成报告、发布站点等。</p></li></ul><p>三套生命周期又包含哪些具体的阶段呢, 我们来看下面这幅图:</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20220616124348972.png"> </p><p>我们看到这三套生命周期，里面有很多很多的阶段，这么多生命周期阶段，其实我们常用的并不多，主要关注以下几个：</p><p>• clean：移除上一次构建生成的文件</p><p>• compile：编译项目源代码</p><p>• test：使用合适的单元测试框架运行测试(junit)</p><p>• package：将编译后的文件打包，如：jar、war等</p><p>• install：安装项目到本地仓库</p><p>Maven的生命周期是抽象的，这意味着生命周期本身不做任何实际工作。<strong>在Maven的设计中，实际任务（如源代码编译）都交由插件来完成。</strong></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221130142100703.png"></p><p>IDEA工具为了方便程序员使用maven生命周期，在右侧的maven工具栏中，已给出快速访问通道</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201151340340.png"></p><p>生命周期的顺序是：clean –&gt; validate –&gt; compile –&gt; test –&gt; package –&gt; verify –&gt; install –&gt; site –&gt; deploy </p><p>我们需要关注的就是：clean –&gt;  compile –&gt; test –&gt; package  –&gt; install </p><blockquote><p>说明：在同一套生命周期中，我们在执行后面的生命周期时，前面的生命周期都会执行。</p></blockquote><blockquote><p> 思考：当运行package生命周期时，clean、compile生命周期会不会运行？</p><p>​clean不会运行，compile会运行。  因为compile与package属于同一套生命周期，而clean与package不属于同一套生命周期。</p></blockquote><h4 id="4-4-2-执行"><a href="#4-4-2-执行" class="headerlink" title="4.4.2 执行"></a>4.4.2 执行</h4><p>在日常开发中，当我们要执行指定的生命周期时，有两种执行方式：</p><ol><li>在idea工具右侧的maven工具栏中，选择对应的生命周期，双击执行</li><li>在DOS命令行中，通过maven命令执行</li></ol><p><strong>方式一：在idea中执行生命周期</strong></p><ul><li>选择对应的生命周期，双击执行</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201161957301.png"> </p><p>compile：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201163711835.png"></p><p>test：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201164627403.png"></p><p>package：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201165801341.png"></p><p>install：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201170830837.png"></p><p>clean：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201171529382.png"></p><p><strong>方式二：在命令行中执行生命周期</strong></p><ol><li>进入到DOS命令行</li></ol><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201172210253.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221201172914648.png"> </p><h2 id="05-附录"><a href="#05-附录" class="headerlink" title="05. 附录"></a>05. 附录</h2><h3 id="5-1-更新依赖索引"><a href="#5-1-更新依赖索引" class="headerlink" title="5.1 更新依赖索引"></a>5.1 更新依赖索引</h3><p>有时候给idea配置完maven仓库信息后，在idea中依然搜索不到仓库中的jar包。这是因为仓库中的jar包索引尚未更新到idea中。这个时候我们就需要更新idea中maven的索引了，具体做法如下：</p><p> 打开设置—-搜索maven—-Repositories—-选中本地仓库—–点击Update</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1537786634456-1582625518984.png"></p><h3 id="5-2-清理maven仓库"><a href="#5-2-清理maven仓库" class="headerlink" title="5.2 清理maven仓库"></a>5.2 清理maven仓库</h3><p>初始情况下，我们的本地仓库是没有任何jar包的，此时会从私服去下载（如果没有配置，就直接从中央仓库去下载），可能由于网络的原因，jar包下载不完全，这些不完整的jar包都是以lastUpdated结尾。此时，maven不会再重新帮你下载，需要你删除这些以lastUpdated结尾的文件，然后maven才会再次自动下载这些jar包。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/lastUpdated-1582625518983.png"></p><p>如果本地仓库中有很多这样的以lastUpadted结尾的文件，可以定义一个批处理文件，在其中编写如下脚本来删除： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">set REPOSITORY_PATH=E:\develop\apache-maven-3.6.1\mvn_repo</span><br><span class="line">rem 正在搜索...</span><br><span class="line"></span><br><span class="line">del /s /q %REPOSITORY_PATH%\*.lastUpdated</span><br><span class="line"></span><br><span class="line">rem 搜索完毕</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>操作步骤如下：</p><p>1). 定义批处理文件del_lastUpdated.bat  (直接创建一个文本文件，命名为del_lastUpdated，后缀名直接改为bat即可 )</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221214154949482.png"> </p><p>2). 在上面的bat文件上<strong>右键—》编辑</strong> 。修改文件：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20221214154559817.png"> </p><p>修改完毕后，双击运行即可删除maven仓库中的残留文件。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-03</title>
      <link href="/2023/07/24/day03_Vue_Element/"/>
      <url>/2023/07/24/day03_Vue_Element/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Ajax"><a href="#1-Ajax" class="headerlink" title="1 Ajax"></a>1 Ajax</h1><h2 id="1-1-Ajax介绍"><a href="#1-1-Ajax介绍" class="headerlink" title="1.1 Ajax介绍"></a>1.1 Ajax介绍</h2><h3 id="1-1-1-Ajax概述"><a href="#1-1-1-Ajax概述" class="headerlink" title="1.1.1 Ajax概述"></a>1.1.1 Ajax概述</h3><p>我们前端页面中的数据，如下图所示的表格中的学生信息，应该来自于后台，那么我们的后台和前端是互不影响的2个程序，那么我们前端应该如何从后台获取数据呢？因为是2个程序，所以必须涉及到2个程序的交互，所以这就需要用到我们接下来学习的Ajax技术。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669103527446.png"> </p><p>Ajax: 全称Asynchronous JavaScript And XML，异步的JavaScript和XML。其作用有如下2点：</p><ul><li>与服务器进行数据交换：通过Ajax可以给服务器发送请求，并获取服务器响应的数据。</li><li>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术，如：搜索联想、用户名是否可用的校验等等。</li></ul><h3 id="1-1-2-Ajax作用"><a href="#1-1-2-Ajax作用" class="headerlink" title="1.1.2 Ajax作用"></a>1.1.2 Ajax作用</h3><p>我们详细的解释一下Ajax技术的2个作用</p><ul><li><p>与服务器进行数据交互</p><p>如下图所示前端资源被浏览器解析，但是前端页面上缺少数据，前端可以通过Ajax技术，向后台服务器发起请求，后台服务器接受到前端的请求，从数据库中获取前端需要的资源，然后响应给前端，前端在通过我们学习的vue技术，可以将数据展示到页面上，这样用户就能看到完整的页面了。此处可以对比JavaSE中的网络编程技术来理解。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669104661340.png"></p></li><li><p>异步交互：可以在<strong>不重新加载整个页面</strong>的情况下，与服务器交换数据并<strong>更新部分网页</strong>的技术。</p><p>如下图所示，当我们再百度搜索java时，下面的联想数据是通过Ajax请求从后台服务器得到的，在整个过程中，我们的Ajax请求不会导致整个百度页面的重新加载，并且只针对搜索栏这局部模块的数据进行了数据的更新，不会对整个页面的其他地方进行数据的更新，这样就大大提升了页面的加载速度，用户体验高。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669105041533.png"></p></li></ul><h3 id="1-1-3-同步异步"><a href="#1-1-3-同步异步" class="headerlink" title="1.1.3 同步异步"></a>1.1.3 同步异步</h3><p>针对于上述Ajax的局部刷新功能是因为Ajax请求是异步的，与之对应的有同步请求。接下来我们介绍一下异步请求和同步请求的区别。</p><ul><li><p>同步请求发送过程如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669105385944.png"></p><p>浏览器页面在发送请求给服务器，在服务器处理请求的过程中，浏览器页面不能做其他的操作。只能等到服务器响应结束后才能，浏览器页面才能继续做其他的操作。 </p></li><li><p>异步请求发送过程如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669105479350.png"> </p><p>浏览器页面发送请求给服务器，在服务器处理请求的过程中，浏览器页面还可以做其他的操作。</p></li></ul><h2 id="1-2-原生Ajax"><a href="#1-2-原生Ajax" class="headerlink" title="1.2 原生Ajax"></a>1.2 原生Ajax</h2><p>对于Ajax技术有了充分的认知了，我们接下来通过代码来演示Ajax的效果。此处我们先采用原生的Ajax代码来演示。因为Ajax请求是基于客户端发送请求，服务器响应数据的技术。所以为了完成快速入门案例，我们需要提供服服务器端和编写客户端。</p><ul><li><p>服务器端</p><p>因为我们暂时还没学过服务器端的代码，所以此处已经直接提供好了服务器端的请求地址，我们前端直接通过Ajax请求访问该地址即可。<strong>后台服务器地址</strong>：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p><p>上述地址我们也可以直接通过浏览器来访问，访问结果如图所示：只截取部分数据</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669105963948.png"></p></li><li><p>客户端</p><p>客户端的Ajax请求代码如下有如下4步，接下来我们跟着步骤一起操作一下。</p><p>第一步：首先我们再VS Code中创建AJAX的文件夹，并且创建名为01. Ajax-原生方式.html的文件，提供如下代码，主要是按钮绑定单击事件，我们希望点击按钮，来发送ajax请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>原生Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getData()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">     </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：创建XMLHttpRequest对象，用于和服务器交换数据，也是原生Ajax请求的核心对象，提供了各种方法。代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建XMLHttpRequest </span></span><br><span class="line"><span class="keyword">var</span> xmlHttpRequest  = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><p>第三步：调用对象的open()方法设置请求的参数信息，例如请求地址，请求方式。然后调用send()方法向服务器发送请求，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 发送异步请求</span></span><br><span class="line">xmlHttpRequest.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;http://yapi.smart-xwork.cn/mock/169327/emp/list&#x27;</span>);</span><br><span class="line">xmlHttpRequest.<span class="title function_">send</span>();<span class="comment">//发送请求</span></span><br></pre></td></tr></table></figure><p>第四步：我们通过绑定事件的方式，来获取服务器响应的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3. 获取服务响应数据</span></span><br><span class="line">xmlHttpRequest.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//此处判断 4表示浏览器已经完全接受到Ajax请求得到的响应， 200表示这是一个正确的Http请求，没有错误</span></span><br><span class="line">    <span class="keyword">if</span>(xmlHttpRequest.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xmlHttpRequest.<span class="property">status</span> == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div1&#x27;</span>).<span class="property">innerHTML</span> = xmlHttpRequest.<span class="property">responseText</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们通过浏览器打开页面，请求点击按钮，发送Ajax请求，最终显示结果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669106850383.png"> </p><p>并且通过浏览器的f12抓包，我们点击网络中的XHR请求，发现可以抓包到我们发送的Ajax请求。XHR代表的就是异步请求</p></li></ul><h2 id="1-3-Axios"><a href="#1-3-Axios" class="headerlink" title="1.3 Axios"></a>1.3 Axios</h2><p>上述原生的Ajax请求的代码编写起来还是比较繁琐的，所以接下来我们学习一门更加简单的发送Ajax请求的技术Axios 。Axios是对原生的AJAX进行封装，简化书写。Axios官网是：<code>https://www.axios-http.cn</code></p><h3 id="1-3-1-Axios的基本使用"><a href="#1-3-1-Axios的基本使用" class="headerlink" title="1.3.1 Axios的基本使用"></a>1.3.1 Axios的基本使用</h3><p>Axios的使用比较简单，主要分为2步：</p><ul><li><p>引入Axios文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用Axios发送请求，并获取响应结果，官方提供的api很多，此处给出2种，如下</p><ul><li><p>发送 get 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1?username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>发送 post 请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&quot;http://localhost:8080/ajax-demo1/aJAXDemo1&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">&quot;username=zhangsan&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">resp</span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(resp.<span class="property">data</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p>axios()是用来发送异步请求的，小括号中使用 js的JSON对象传递请求相关的参数：</p><ul><li>method属性：用来设置请求方式的。取值为 get 或者 post。</li><li>url属性：用来书写请求的资源路径。如果是 get 请求，需要将请求参数拼接到路径的后面，格式为： url?参数名&#x3D;参数值&amp;参数名2&#x3D;参数值2。</li><li>data属性：作为请求体被发送的数据。也就是说如果是 post 请求的话，数据需要作为 data 属性的值。</li></ul><p>then() 需要传递一个匿名函数。我们将 then()中传递的匿名函数称为 <strong>回调函数</strong>，意思是该匿名函数在发送请求时不会被调用，而是在成功响应后调用的函数。而该回调函数中的 resp 参数是对响应的数据进行封装的对象，通过 resp.data 可以获取到响应的数据。</p></li></ul><h3 id="1-3-2-Axios快速入门"><a href="#1-3-2-Axios快速入门" class="headerlink" title="1.3.2 Axios快速入门"></a>1.3.2 Axios快速入门</h3><ul><li><p>后端实现</p><p>查询所有员工信息服务器地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a> </p><p>根据员工id删除员工信息服务器地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/deleteById">http://yapi.smart-xwork.cn/mock/169327/emp/deleteById</a></p></li><li><p>前端实现</p><p>首先在VS Code中创建js文件夹，与html同级，然后将<strong>资料&#x2F;axios-0.18.0.js</strong> 文件拷贝到js目录下，然后创建名为02. Ajax-Axios.html的文件，工程结果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669108792555.png"> </p><p>然后在html中引入axios所依赖的js文件，并且提供2个按钮，绑定单击事件，分别用于点击时发送ajax请求，完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax-Axios<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据GET&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;get()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除数据POST&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;post()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过axios发送异步请求-get</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过axios发送异步请求-post</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后分别使用Axios的方法，完整get请求和post请求的发送</p><p>get请求代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios发送异步请求-get</span></span><br><span class="line"> <span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span></span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>post请求代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过axios发送异步请求-post</span></span><br><span class="line"> <span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,</span><br><span class="line">     <span class="attr">data</span>: <span class="string">&quot;id=1&quot;</span></span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>浏览器打开，f12抓包，然后分别点击2个按钮，查看控制台效果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669109382408.png"> </p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax-Axios<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取数据GET&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;get()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;删除数据POST&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;post()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//通过axios发送异步请求-get</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 通过axios发送异步请求-post</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">url</span>: <span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: <span class="string">&quot;id=1&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-3-请求方法的别名"><a href="#1-3-3-请求方法的别名" class="headerlink" title="1.3.3 请求方法的别名"></a>1.3.3 请求方法的别名</h3><p>Axios还针对不同的请求，提供了别名方式的api,具体如下：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>axios.get(url [, config])</td><td>发送get请求</td></tr><tr><td>axios.delete(url [, config])</td><td>发送delete请求</td></tr><tr><td>axios.post(url [, data[, config]])</td><td>发送post请求</td></tr><tr><td>axios.put(url [, data[, config]])</td><td>发送put请求</td></tr></tbody></table><p>我们目前只关注get和post请求，所以在上述的入门案例中，我们可以将get请求代码改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>post请求改写成如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/deleteById&quot;</span>,<span class="string">&quot;id=1&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-3-4-案例"><a href="#1-3-4-案例" class="headerlink" title="1.3.4 案例"></a>1.3.4 案例</h3><ul><li><p>需求：基于Vue及Axios完成数据的动态加载展示，如下图所示</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669139756551.png"> </p><p>其中数据是来自于后台程序的，地址是：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p></li><li><p>分析：</p><p>前端首先是一张表格，我们缺少数据，而提供数据的地址已经有了，所以意味这我们需要使用Ajax请求获取后台的数据。但是Ajax请求什么时候发送呢？页面的数据应该是页面加载完成，自动发送请求，展示数据，所以我们需要借助vue的mounted钩子函数。那么拿到数据了，我们该怎么将数据显示表格中呢？这里就得借助v-for指令来遍历数据，展示数据。</p></li><li><p>步骤：</p><ol><li>首先创建文件，提前准备基础代码，包括表格以及vue.js和axios.js文件的引入</li><li>我们需要在vue的mounted钩子函数中发送ajax请求，获取数据</li><li>拿到数据，数据需要绑定给vue的data属性</li><li>在&lt;tr&gt;标签上通过v-for指令遍历数据，展示数据</li></ol></li><li><p>代码实现：</p><ol><li><p>首先创建文件，提前准备基础代码，包括表格以及vue.js和axios.js文件的引入</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669140682300.png"></p><p>提供初始代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax-Axios-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>图像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>入职日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>最后操作时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tom<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!-- &lt;span&gt;女&lt;/span&gt;--&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>班主任<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2009-08-09<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>2009-08-09 12:00:00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在vue的mounted钩子函数，编写Ajax请求，请求数据，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">    <span class="comment">//发送异步请求,加载数据</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ajax请求的数据我们应该绑定给vue的data属性，之后才能进行数据绑定到视图；并且浏览器打开后台地址，数据返回格式如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669141982809.png"> </p><p>因为服务器响应的json中的data属性才是我们需要展示的信息，所以我们应该将员工列表信息赋值给vue的data属性，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//发送异步请求,加载数据</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">emps</span> = result.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>其中，data中生命emps变量，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">emps</span>:[]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在&lt;tr&gt;标签上通过v-for指令遍历数据，展示数据，其中需要注意的是图片的值，需要使用vue的属性绑定，男女的展示需要使用条件判断，其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(emp,index) in emps&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;emp.image&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.job&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.entrydate&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.updatetime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax-Axios-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>图像<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>职位<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>入职日期<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>最后操作时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(emp,index) in emps&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;emp.image&quot;</span> <span class="attr">width</span>=<span class="string">&quot;70px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;emp.gender == 2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.job&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.entrydate&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;emp.updatetime&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">       <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">         <span class="attr">emps</span>:[]</span></span><br><span class="line"><span class="language-javascript">       &#125;,</span></span><br><span class="line"><span class="language-javascript">       mounted () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">//发送异步请求,加载数据</span></span></span><br><span class="line"><span class="language-javascript">          axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">data</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">emps</span> = result.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;)</span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-前后台分离开发"><a href="#2-前后台分离开发" class="headerlink" title="2 前后台分离开发"></a>2 前后台分离开发</h1><h2 id="2-1-前后台分离开发介绍"><a href="#2-1-前后台分离开发介绍" class="headerlink" title="2.1 前后台分离开发介绍"></a>2.1 前后台分离开发介绍</h2><p>在之前的课程中，我们介绍过，前端开发有2种方式：<strong>前后台混合开发</strong>和<strong>前后台分离开发</strong>。</p><p>前后台混合开发，顾名思义就是前台后台代码混在一起开发，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669142636044.png"> </p><p>这种开发模式有如下缺点：</p><ul><li>沟通成本高：后台人员发现前端有问题，需要找前端人员修改，前端修改成功，再交给后台人员使用</li><li>分工不明确：后台开发人员需要开发后台代码，也需要开发部分前端代码。很难培养专业人才</li><li>不便管理：所有的代码都在一个工程中</li><li>不便维护和扩展：前端代码更新，和后台无关，但是需要整个工程包括后台一起重新打包部署。</li></ul><p>所以我们目前基本都是采用的前后台分离开发方式，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669143264499.png"> </p><p>我们将原先的工程分为前端工程和后端工程这2个工程，然后前端工程交给专业的前端人员开发，后端工程交给专业的后端人员开发。前端页面需要数据，可以通过发送异步请求，从后台工程获取。但是，我们前后台是分开来开发的，那么前端人员怎么知道后台返回数据的格式呢？后端人员开发，怎么知道前端人员需要的数据格式呢？所以针对这个问题，我们前后台统一指定一套规范！我们前后台开发人员都需要遵循这套规范开发，这就是我们的<strong>接口文档</strong>。接口文档有离线版和在线版本，接口文档示可以查询今天提供<strong>资料&#x2F;接口文档示例</strong>里面的资料。那么接口文档的内容怎么来的呢？是我们后台开发者根据产品经理提供的产品原型和需求文档所撰写出来的，产品原型示例可以参考今天提供<strong>资料&#x2F;页面原型</strong>里面的资料。</p><p>那么基于前后台分离开发的模式下，我们后台开发者开发一个功能的具体流程如何呢？如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669143781533.png"> </p><ol><li>需求分析：首先我们需要阅读需求文档，分析需求，理解需求。</li><li>接口定义：查询接口文档中关于需求的接口的定义，包括地址，参数，响应数据类型等等</li><li>前后台并行开发：各自按照接口文档进行开发，实现需求</li><li>测试：前后台开发完了，各自按照接口文档进行测试</li><li>前后段联调测试：前段工程请求后端工程，测试功能</li></ol><h2 id="2-2-YAPI"><a href="#2-2-YAPI" class="headerlink" title="2.2 YAPI"></a>2.2 YAPI</h2><h3 id="2-2-1-YAPI介绍"><a href="#2-2-1-YAPI介绍" class="headerlink" title="2.2.1 YAPI介绍"></a>2.2.1 YAPI介绍</h3><p>前后台分离开发中，我们前后台开发人员都需要遵循接口文档，所以接下来我们介绍一款撰写接口文档的平台。</p><p>YApi 是高效、易用、功能强大的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。</p><p>其官网地址：<a href="http://yapi.smart-xwork.cn/">http://yapi.smart-xwork.cn/</a></p><p>YApi主要提供了2个功能：</p><ul><li>API接口管理：根据需求撰写接口，包括接口的地址，参数，响应等等信息。</li><li>Mock服务：模拟真实接口，生成接口的模拟测试数据，用于前端的测试。</li></ul><h3 id="2-2-2-接口文档管理"><a href="#2-2-2-接口文档管理" class="headerlink" title="2.2.2 接口文档管理"></a>2.2.2 接口文档管理</h3><p>接下来我们演示一下YApi是如何管理接口文档的。</p><p>首先我们登录YAPI的官网，然后使用github或者百度账号登录，没有的话去注册一个，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669198315061.png"> </p><p>登录进去后，在个人空间中，选择项目列表-&gt;添加测试项目，效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669198453566.png"> </p><p>然后点击创建的项目，进入到项目中，紧接着先添加接口的分类，如下图所示</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669198630531.png"> </p><p>然后我们选择当前创建的分类，创建接口信息，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669289187162.png"> </p><p>紧接着，我们来到接口的编辑界面，对接口做生层次的定制，例如：接口的参数，接口的返回值等等，效果图下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669289350540.png"> </p><p>添加接口的请求参数，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669289410729.png"></p><p>添加接口的返回值，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669289514661.png"> </p><p>然后保存上述设置，紧接着我们可以来到接口的预览界面，查询接口的信息，其效果如下图所示：篇幅有限，只截取部分</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669289623957.png"> </p><p>最后，我们还可以设置接口的mock信息，</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669289857670.png"> </p><p>来到接口的Mock设置窗口，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669290093854.png"> </p><p>紧接着我们来到接口的预览界面，直接点击Mock地址，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669290162900.png"></p><p>我们发现浏览器直接打开，并返回如下数据：</p><p><img src="/assets/1669290210749.png" alt="1669290210749"></p><p>如上步骤就是YAPI接口平台中对于接口的配置步骤。</p><h1 id="3-前端工程化"><a href="#3-前端工程化" class="headerlink" title="3 前端工程化"></a>3 前端工程化</h1><h2 id="3-1-前端工程化介绍"><a href="#3-1-前端工程化介绍" class="headerlink" title="3.1 前端工程化介绍"></a>3.1 前端工程化介绍</h2><p>我们目前的前端开发中，当我们需要使用一些资源时，例如：vue.js，和axios.js文件，都是直接再工程中导入的，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669291953746.png"></p><p>但是上述开发模式存在如下问题：</p><ul><li>每次开发都是从零开始，比较麻烦</li><li>多个页面中的组件共用性不好</li><li>js、图片等资源没有规范化的存储目录，没有统一的标准，不方便维护</li></ul><p>所以现在企业开发中更加讲究前端工程化方式的开发，主要包括如下4个特点</p><ul><li>模块化：将js和css等，做成一个个可复用模块</li><li>组件化：我们将UI组件，css样式，js行为封装成一个个的组件，便于管理</li><li>规范化：我们提供一套标准的规范的目录接口和编码规范，所有开发人员遵循这套规范</li><li>自动化：项目的构建，测试，部署全部都是自动完成</li></ul><p>所以对于前端工程化，说白了，就是在企业级的前端项目开发中，把前端开发所需要的工具、技术、流程、经验进行规范化和标准化。从而提升开发效率，降低开发难度等等。接下来我们就需要学习vue的官方提供的脚手架帮我们完成前端的工程化。</p><h2 id="3-2-前端工程化入门"><a href="#3-2-前端工程化入门" class="headerlink" title="3.2 前端工程化入门"></a>3.2 前端工程化入门</h2><h3 id="3-2-1-环境准备"><a href="#3-2-1-环境准备" class="headerlink" title="3.2.1 环境准备"></a>3.2.1 环境准备</h3><p>我们的前端工程化是通过vue官方提供的脚手架Vue-cli来完成的，用于快速的生成一个Vue的项目模板。Vue-cli主要提供了如下功能：</p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><p>我们需要运行Vue-cli，需要依赖NodeJS，NodeJS是前端工程化依赖的环境。所以我们需要先安装NodeJS，然后才能安装Vue-cli</p><ul><li><p>NodeJS安装和Vue-cli安装</p><p>详细安装步骤，请参考<strong>资料&#x2F;NodeJS安装文档&#x2F;NodeJS安装文档.md</strong>文件</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669293955527.png"></p></li></ul><h3 id="3-2-2-Vue项目简介"><a href="#3-2-2-Vue项目简介" class="headerlink" title="3.2.2 Vue项目简介"></a>3.2.2 Vue项目简介</h3><p>环境准备好了，接下来我们需要通过Vue-cli创建一个vue项目，然后再学习一下vue项目的目录结构。Vue-cli提供了如下2种方式创建vue项目:</p><ul><li><p>命令行：直接通过命令行方式创建vue项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-project01</span><br></pre></td></tr></table></figure></li><li><p>图形化界面：通过命令先进入到图形化界面，然后再进行vue工程的创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue ui</span><br></pre></td></tr></table></figure><p>图形化界面如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669294586147.png"></p></li></ul><h4 id="3-2-2-1-创建vue项目"><a href="#3-2-2-1-创建vue项目" class="headerlink" title="3.2.2.1 创建vue项目"></a>3.2.2.1 创建vue项目</h4><p>此处我们通过第二种图形化界面方式给大家演示。</p><p>首先，我们再桌面创建vue文件夹，然后双击进入文件夹，来到地址目录，输入cmd，然后进入到vue文件夹的cmd窗口界面，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669294790640.png"></p><p>然后进入如下界面：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669294846601.png"></p><p>然后再当前目录下，直接输入命令<code>vue ui</code>进入到vue的图形化界面，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669294939067.png"></p><p>然后我门选择创建按钮，在vue文件夹下创建项目，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669295020228.png"></p><p>然后来到如下界面，进行vue项目的创建</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669301661722.png"></p><p>然后预设模板选择手动，如下图所示：</p><p> <img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669301737491.png"> </p><p>然后再功能页面开启路由功能，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669301859936.png"> </p><p>然后再配置页面选择语言版本和语法检查规范，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669301965095.png"> </p><p>然后创建项目，进入如下界面：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669302091090.png"></p><p>最后我们只需要等待片刻，即可进入到创建创建成功的界面，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669302171975.png"> </p><p> 到此，vue项目创建结束</p><h4 id="3-2-2-2-vue项目目录结构介绍"><a href="#3-2-2-2-vue项目目录结构介绍" class="headerlink" title="3.2.2.2 vue项目目录结构介绍"></a>3.2.2.2 vue项目目录结构介绍</h4><p>我们通过VS Code打开之前创建的vue文件夹，打开之后，呈现如下图所示页面：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669302718419.png"></p><p>vue项目的标准目录结构以及目录对应的解释如下图所示:</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669302973198.png"></p><p>其中我们平时开发代码就是在<strong>src目录</strong>下</p><h4 id="3-2-2-3-运行vue项目"><a href="#3-2-2-3-运行vue项目" class="headerlink" title="3.2.2.3 运行vue项目"></a>3.2.2.3 运行vue项目</h4><p>那么vue项目开发好了，我们应该怎么运行vue项目呢？主要提供了2种方式</p><ul><li><p>第一种方式：通过VS Code提供的图形化界面 ，如下图所示：（注意：NPM脚本窗口默认不显示，可以参考本节的最后调试出来）</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669303687468.png"></p><p>点击之后，我们等待片刻，即可运行，在终端界面中，我们发现项目是运行在本地服务的8080端口，我们直接通过浏览器打开地址</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669303846100.png"> </p><p>最终浏览器打开后，呈现如下界面，表示项目运行成功</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669304009602.png"></p><p>其实此时访问的是 <strong>src&#x2F;App.vue</strong>这个根组件，此时我们打开这个组件，修改代码：添加内容Vue</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669304267724.png"></p><p>只要我们保存更新的代码，我们直接打开浏览器，不需要做任何刷新，发现页面呈现内容发生了变化，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669304385826.png"></p><p>这就是我们vue项目的热更新功能 </p><p>对于8080端口，经常被占用，所以我们可以去修改默认的8080端口。我们修改vue.config.js文件的内容，添加如下代码：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    port<span class="punctuation">:</span><span class="number">7000</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>如下图所示，然后我们关闭服务器，并且重新启动，</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669305444633.png"></p></li></ul><p>​       重新启动如下图所示：</p><p>​<img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669305570022.png"> </p><p>​端口更改成功，可以通过浏览器访问7000端口来访问我们之前的项目</p><ul><li><p>第二种方式：命令行方式</p><p>直接基于cmd命令窗口，在vue目录下，执行输入命令<code>npm run serve</code>即可，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669304694076.png"></p></li></ul><p>补充：NPM脚本窗口调试出来</p><p>第一步：通过<strong>设置&#x2F;用户设置&#x2F;扩展&#x2F;MPM</strong>更改NPM默认配置，如下图所示</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669304930336.png"></p><p>然后重启VS Code，并且<strong>双击打开package.json文件</strong>，然后点击<strong>资源管理器处的3个小点</strong>，<strong>勾选npm脚本选项</strong>，如图所示</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669305068434.png"> </p><p>然后就能都显示NPM脚本小窗口了。</p><h3 id="3-2-3-Vue项目开发流程"><a href="#3-2-3-Vue项目开发流程" class="headerlink" title="3.2.3 Vue项目开发流程"></a>3.2.3 Vue项目开发流程</h3><p>那么我们访问的首页是index.html，但是我们找到public&#x2F;index.html文件，打开之后发现，里面没有什么代码，但是能够呈现内容丰富的首页：如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669308098856.png"> </p><p>我们自习观察发现，index.html的代码很简洁，但是浏览器所呈现的index.html内容却很丰富，代码和内容不匹配，所以vue是如何做到的呢？接下来我们学习一下vue项目的开发流程。</p><p>对于vue项目，index.html文件默认是引入了入口函数main.js文件，我们找到<strong>src&#x2F;main.js</strong>文件，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中，包括如下几个关键点：</p><ul><li>import: 导入指定文件，并且重新起名。例如上述代码<code>import App from &#39;./App.vue&#39;</code>导入当前目录下得App.vue并且起名为App</li><li>new Vue(): 创建vue对象</li><li>$mount(‘#app’);将vue对象创建的dom对象挂在到id&#x3D;app的这个标签区域中，作用和之前学习的vue对象的le属性一致。</li><li>router:  路由，详细在后面的小节讲解</li><li>render: 主要使用视图的渲染的。</li></ul><p>来到<strong>public&#x2F;index.html</strong>中，我们<strong>删除div的id&#x3D;app属性</strong>，打开浏览器，发现之前访问的首页一片空白，如下图所示，这样就证明了，我们main.js中通过代码挂在到index.html的id&#x3D;app的标签区域的。</p><p>此时我们知道了vue创建的dom对象挂在到id&#x3D;app的标签区域，但是我们还是没有解决最开始的问题：首页内容如何呈现的？这就涉及到render中的App了，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669313364004.png"> </p><p>那么这个App对象怎么回事呢，我们打开App.vue,注意的是.vue结尾的都是vue组件。而vue的组件文件包含3个部分：</p><ul><li>template: 模板部分，主要是HTML代码，用来展示页面主体结构的</li><li>script: js代码区域，主要是通过js代码来控制模板的数据来源和行为的</li><li>style: css样式部分，主要通过css样式控制模板的页面效果得</li></ul><p>如下图所示就是一个vue组件的小案例：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669313699186.png"></p><p>此时我们可以打开App.vue，观察App.vue的代码，其中可以发现，App.vue组件的template部分内容，和我们浏览器访问的首页内容是一致的，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669313894258.png"></p><p>接下来我们可以简化模板部分内容，添加script部分的数据模型，删除css样式，完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>保存直接，回到浏览器，我们发现首页展示效果发生了变化，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669314115641.png"></p><h1 id="4-Vue组件库Element"><a href="#4-Vue组件库Element" class="headerlink" title="4 Vue组件库Element"></a>4 Vue组件库Element</h1><h2 id="4-1-Element介绍"><a href="#4-1-Element介绍" class="headerlink" title="4.1 Element介绍"></a>4.1 Element介绍</h2><p>不知道同学们还否记得我们之前讲解的前端开发模式MVVM，我们之前学习的vue是侧重于VM开发的，主要用于数据绑定到视图的，那么接下来我们学习的ElementUI就是一款侧重于V开发的前端框架，主要用于开发美观的页面的。</p><p>Element：是饿了么公司前端开发团队提供的一套基于 Vue 的网站组件库，用于快速构建网页。</p><p>Element 提供了很多组件（组成网页的部件）供我们使用。例如 超链接、按钮、图片、表格等等。如下图所示就是我们开发的页面和ElementUI提供的效果对比：可以发现ElementUI提供的各式各样好看的按钮</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669357961971.png"> </p><p>ElementUI的学习方式和我们之前的学习方式不太一样，对于ElementUI，我们作为一个后台开发者，只需要<strong>学会如何从ElementUI的官网拷贝组件到我们自己的页面中，并且做一些修改即可</strong>。其官网地址：<a href="https://element.eleme.cn/#/zh-CN%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B8%BB%E8%A6%81%E5%AD%A6%E4%B9%A0%E7%9A%84%E6%98%AFElementUI%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%EF%BC%8C%E8%87%B3%E4%BA%8E%E5%85%B6%E4%BB%96%E7%BB%84%E4%BB%B6%E5%90%8C%E5%AD%A6%E4%BB%AC%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E6%88%91%E4%BB%AC%E8%BF%99%E5%87%A0%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8E%8C%E6%8F%A1%E5%88%B0ElementUI%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%8A%80%E5%B7%A7%EF%BC%8C%E7%84%B6%E5%90%8E%E8%AF%BE%E5%90%8E%E8%87%AA%E8%A1%8C%E5%AD%A6%E4%B9%A0%E3%80%82">https://element.eleme.cn/#/zh-CN，我们主要学习的是ElementUI中提供的常用组件，至于其他组件同学们可以通过我们这几个组件的学习掌握到ElementUI的学习技巧，然后课后自行学习。</a></p><h2 id="4-2-快速入门"><a href="#4-2-快速入门" class="headerlink" title="4.2 快速入门"></a>4.2 快速入门</h2><p>首先我们要掌握ElementUI的快速入门，接下来同学们就一起跟着步骤来操作一下。</p><p>首先，我们先要安装ElementUI的组件库，打开VS Code，停止之前的项目，然后在命令行输入如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui@2.15.3 </span><br></pre></td></tr></table></figure><p>具体操作如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669358653297.png"> </p><p>然后我们需要在main.js这个入口js文件中引入ElementUI的组件库，其代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure><p>具体操作如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669358935188.png"></p><p>然后我们需要按照vue项目的开发规范，在<strong>src&#x2F;views</strong>目录下创建一个vue组件文件，注意组件名称后缀是.vue，并且在组件文件中编写之前介绍过的基本组件语法，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体操作如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669359450896.png"> </p><p>最后我们只需要去ElementUI的官网，找到组件库，然后找到按钮组件，抄写代码即可，具体操作如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669359839574.png"></p><p>然后找到按钮的代码，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669359904272.png"> </p><p>紧接着我们复制组件代码到我们的vue组件文件中，操作如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669360120385.png"></p><p>最后，我们需要在默认访问的根组件<strong>src&#x2F;App.vue</strong>中引入我们自定义的组件，具体操作步骤如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669360320983.png"> </p><p>然后App.vue组件中的具体代码如下，<strong>代码是我们通过上述步骤引入element-view组件时自动生成的</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">element-view</span>&gt;</span><span class="tag">&lt;/<span class="name">element-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">ElementView</span> <span class="keyword">from</span> <span class="string">&#x27;./views/Element/ElementView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; <span class="title class_">ElementView</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后运行我们的vue项目，浏览器直接访问之前的7000端口，展示效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669360502407.png"></p><p>到此，我们ElementUI的入门程序编写成功</p><h2 id="4-3-Element组件"><a href="#4-3-Element组件" class="headerlink" title="4.3 Element组件"></a>4.3 Element组件</h2><p>接下来我们来学习一下ElementUI的常用组件，对于组件的学习比较简单，我们只需要参考官方提供的代码，然后复制粘贴即可。</p><h3 id="4-3-1-Table表格"><a href="#4-3-1-Table表格" class="headerlink" title="4.3.1 Table表格"></a>4.3.1 Table表格</h3><h4 id="4-3-1-1-组件演示"><a href="#4-3-1-1-组件演示" class="headerlink" title="4.3.1.1 组件演示"></a>4.3.1.1 组件演示</h4><p>Table 表格：用于展示多条结构类似的数据，可对数据进行排序、筛选、对比或其他自定义操作。</p><p>接下来我们通过代码来演示。</p><p>首先我们需要来到ElementUI的组件库中，找到表格组件，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669361564197.png"></p><p>然后复制代码到我们之前的ElementVue.vue组件中，需要注意的是，我们组件包括了3个部分，如果官方有除了template部分之外的style和script都需要复制。具体操作如下图所示：</p><p>template模板部分：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669362225501.png"></p><p>script脚本部分</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669362382846.png"></p><p>ElementView.vue组件文件整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Button按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Table表格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时回到浏览器，我们页面呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669362451236.png"> </p><h4 id="4-3-1-2-组件属性详解"><a href="#4-3-1-2-组件属性详解" class="headerlink" title="4.3.1.2 组件属性详解"></a>4.3.1.2 组件属性详解</h4><p>那么我们的ElementUI是如何将数据模型绑定到视图的呢？主要通过如下几个属性：</p><ul><li>data: 主要定义table组件的数据模型</li><li>prop: 定义列的数据应该绑定data中定义的具体的数据模型</li><li>label: 定义列的标题</li><li>width: 定义列的宽度</li></ul><p>其具体示例含义如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669363098610.png"> </p><p><strong>PS:Element组件的所有属性都可以在组件页面的最下方找到</strong>，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669363190361.png"> </p><h3 id="4-3-2-Pagination分页"><a href="#4-3-2-Pagination分页" class="headerlink" title="4.3.2 Pagination分页"></a>4.3.2 Pagination分页</h3><h4 id="4-3-2-1-组件演示"><a href="#4-3-2-1-组件演示" class="headerlink" title="4.3.2.1 组件演示"></a>4.3.2.1 组件演示</h4><p>Pagination: 分页组件，主要提供分页工具条相关功能。其展示效果图下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669363631302.png"> </p><p>接下来我们通过代码来演示功能。</p><p>首先在官网找到分页组件，我们选择带背景色分页组件，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669363746409.png"> </p><p>然后复制代码到我们的ElementView.vue组件文件的template中，拷贝如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">    <span class="attr">background</span></span></span><br><span class="line"><span class="tag">    <span class="attr">layout</span>=<span class="string">&quot;prev, pager, next&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669363921750.png"> </p><h4 id="4-3-2-2-组件属性详解"><a href="#4-3-2-2-组件属性详解" class="headerlink" title="4.3.2.2 组件属性详解"></a>4.3.2.2 组件属性详解</h4><p>对于分页组件我们需要关注的是如下几个重要属性（可以通过查阅官网组件中最下面的组件属性详细说明得到）：</p><ul><li>background: 添加北京颜色，也就是上图蓝色背景色效果。</li><li>layout: 分页工具条的布局，其具体值包含<code>sizes</code>, <code>prev</code>, <code>pager</code>, <code>next</code>, <code>jumper</code>, <code>-&gt;</code>, <code>total</code>, <code>slot</code> 这些值</li><li>total: 数据的总数量</li></ul><p>然后根据官方分页组件提供的layout属性说明，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669364288179.png"> </p><p>我们修改layout属性如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">layout=<span class="string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span><br></pre></td></tr></table></figure><p>浏览器打开呈现如下效果：</p><p><img src="/assets/1669364403079.png" alt="1669364403079"></p><p>发现在原来的功能上，添加了一些额外的功能，其具体对应关系如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669364533849.png"> </p><h4 id="4-3-2-3-组件事件详解"><a href="#4-3-2-3-组件事件详解" class="headerlink" title="4.3.2.3 组件事件详解"></a>4.3.2.3 组件事件详解</h4><p>对于分页组件，除了上述几个属性，还有2个非常重要的事件我们需要去学习：</p><ul><li>size-change ： pageSize 改变时会触发 </li><li>current-change ：currentPage 改变时会触发</li></ul><p>其官方详细解释含义如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669364990991.png"> </p><p>对于这2个事件的参考代码，我们同样可以通过官方提供的完整案例中找到，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669365117644.png"> </p><p>然后我们找到对应的代码，首先复制事件，复制代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@size-change=<span class="string">&quot;handleSizeChange&quot;</span></span><br><span class="line">@current-change=<span class="string">&quot;handleCurrentChange&quot;</span></span><br></pre></td></tr></table></figure><p>此时Panigation组件的template完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Pagination分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">background</span></span></span><br><span class="line"><span class="tag">               <span class="attr">layout</span>=<span class="string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure><p>紧接着需要复制事件需要的2个函数，需要注意methods属性和data同级，其代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">methods<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      handleSizeChange(val) <span class="punctuation">&#123;</span></span><br><span class="line">        console.log(`每页 $<span class="punctuation">&#123;</span>val<span class="punctuation">&#125;</span> 条`);</span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      handleCurrentChange(val) <span class="punctuation">&#123;</span></span><br><span class="line">        console.log(`当前页<span class="punctuation">:</span> $<span class="punctuation">&#123;</span>val<span class="punctuation">&#125;</span>`);</span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>此时Panigation组件的script部分完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到浏览器中，我们f12打开开发者控制台，然后切换当前页码和切换每页显示的数量，呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669365585379.png"> </p><h3 id="4-3-3-Dialog对话框"><a href="#4-3-3-Dialog对话框" class="headerlink" title="4.3.3 Dialog对话框"></a>4.3.3 Dialog对话框</h3><h4 id="4-3-3-1-组件演示"><a href="#4-3-3-1-组件演示" class="headerlink" title="4.3.3.1 组件演示"></a>4.3.3.1 组件演示</h4><p>Dialog: 在保留当前页面状态的情况下，告知用户并承载相关操作。其企业开发应用场景示例如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669365791037.png"></p><p>首先我们需要在ElementUI官方找到Dialog组件，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669365950945.png"> </p><p>然后复制如下代码到我们的组件文件的template模块中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Dialog 对话框 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Table --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogTableVisible = true&quot;</span>&gt;</span>打开嵌套表格的 Dialog<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;收货地址&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogTableVisible&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;gridData&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>并且复制数据模型script模块中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">gridData: [&#123;</span><br><span class="line">         date: &#x27;2016-05-02&#x27;,</span><br><span class="line">         name: &#x27;王小虎&#x27;,</span><br><span class="line">         address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br><span class="line">       &#125;, &#123;</span><br><span class="line">         date: &#x27;2016-05-04&#x27;,</span><br><span class="line">         name: &#x27;王小虎&#x27;,</span><br><span class="line">         address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br><span class="line">       &#125;, &#123;</span><br><span class="line">         date: &#x27;2016-05-01&#x27;,</span><br><span class="line">         name: &#x27;王小虎&#x27;,</span><br><span class="line">         address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br><span class="line">       &#125;, &#123;</span><br><span class="line">         date: &#x27;2016-05-03&#x27;,</span><br><span class="line">         name: &#x27;王小虎&#x27;,</span><br><span class="line">         address: &#x27;上海市普陀区金沙江路 1518 弄&#x27;</span><br><span class="line">       &#125;],</span><br><span class="line">       dialogTableVisible: false,</span><br></pre></td></tr></table></figure><p>其完整的script部分代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gridData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dialogTableVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们打开浏览器，点击按钮，呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669366365778.png"> </p><h4 id="4-3-3-2-组件属性详解"><a href="#4-3-3-2-组件属性详解" class="headerlink" title="4.3.3.2 组件属性详解"></a>4.3.3.2 组件属性详解</h4><p>那么ElementUI是如何做到对话框的显示与隐藏的呢？是通过如下的属性：</p><ul><li>visible.sync ：是否显示 Dialog</li></ul><p>具体释意如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669366903107.png"> </p><p>visible属性绑定的dialogTableVisble属性一开始默认是false，所以对话框隐藏；然后我们点击按钮，触发事件，修改属性值为true，</p><p>然后对话框visible属性值为true，所以对话框呈现出来。</p><h3 id="4-3-4-Form表单"><a href="#4-3-4-Form表单" class="headerlink" title="4.3.4 Form表单"></a>4.3.4 Form表单</h3><h4 id="4-3-4-1-组件演示"><a href="#4-3-4-1-组件演示" class="headerlink" title="4.3.4.1 组件演示"></a>4.3.4.1 组件演示</h4><p>Form 表单：由输入框、选择器、单选框、多选框等控件组成，用以收集、校验、提交数据。 </p><p>表单在我们前端的开发中使用的还是比较多的，接下来我们学习这个组件，与之前的流程一样，我们首先需要在ElementUI的官方找到对应的组件示例：如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669369751014.png"> </p><p>我们的需求效果是：在对话框中呈现表单内容，类似如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669365791037.png"></p><p>所以，首先我们先要根据上一小结所学习的内容，制作一个新的对话框，其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Dialog对话框-Form表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = true&quot;</span>&gt;</span>打开嵌套Form的 Dialog<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;Form表单&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还需要注意的是，针对这个新的对话框，我们需要在data中声明新的变量dialogFormVisible来控制对话框的隐藏与显示，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dialogFormVisible: false,</span><br></pre></td></tr></table></figure><p>打开浏览器，此时呈现如图所示的效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669370230214.png"> </p><p>然后我们<strong>复制官网提供的template部分代码到我们的vue组件文件的Dialog组件中</strong>，但是，此处官方提供的表单项标签太多，所以我们只需要保留前面3个表单项组件，其他多余的删除，所以最终template部分代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;Form表单&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动名称&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动区域&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;form.region&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择活动区域&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;区域一&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;区域二&quot;</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动时间&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.date1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-time-picker</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择时间&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.date2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-time-picker</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure><p>观察上述代码，我们发现其中表单项标签使用了v-model双向绑定，所以我们需要在vue的数据模型中声明变量，同样可以从官方提供的代码中复制粘贴，但是我们需要去掉我们不需要的属性，通过观察上述代码，我们发现双向绑定的属性有4个，分别是form.name,form.region,form.date1,form.date2,所以最终数据模型如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669371003680.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">form: &#123;</span><br><span class="line">         name: &#x27;&#x27;,</span><br><span class="line">         region: &#x27;&#x27;,</span><br><span class="line">         date1: &#x27;&#x27;,</span><br><span class="line">         date2:&#x27;&#x27;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure><p>同样，官方的代码中，在script部分中，还提供了onSubmit函数，表单的立即创建按钮绑定了此函数，我们可以输入表单的内容，而表单的内容是双向绑定到form对象的，所以我们修改官方的onSubmit函数如下即可，而且我们还需要关闭对话框，最终函数代码如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669371163913.png"> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onSubmit() &#123;</span><br><span class="line">      console.log(this.form); //输出表单内容到控制台</span><br><span class="line">       this.dialogFormVisible=false; //关闭表案例的对话框</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p>然后打开浏览器，我们打开对话框，并且输入表单内容，点击立即创建按钮，呈现如下效果；</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669371448683.png"> </p><p>最终vue组件完整代码如下，同学们可以针对form表单案例，参考该案例对应的template部分和script部分代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Button按钮 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-row</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>默认按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>主要按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span>&gt;</span>成功按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;info&quot;</span>&gt;</span>信息按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;warning&quot;</span>&gt;</span>警告按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span>&gt;</span>危险按钮<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Table表格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Pagination分页 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">background</span></span></span><br><span class="line"><span class="tag">            <span class="attr">layout</span>=<span class="string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Dialog 对话框 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Table --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogTableVisible = true&quot;</span>&gt;</span>打开嵌套表格的 Dialog<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;收货地址&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogTableVisible&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;gridData&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">property</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Dialog对话框-Form表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;dialogFormVisible = true&quot;</span>&gt;</span>打开嵌套Form的 Dialog<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">title</span>=<span class="string">&quot;Form表单&quot;</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动名称&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动区域&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;form.region&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请选择活动区域&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;区域一&quot;</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;区域二&quot;</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;活动时间&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-date-picker</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.date1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span> <span class="attr">:span</span>=<span class="string">&quot;2&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-col</span> <span class="attr">:span</span>=<span class="string">&quot;11&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-time-picker</span> <span class="attr">placeholder</span>=<span class="string">&quot;选择时间&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.date2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-time-picker</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-col</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">                <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>立即创建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-button</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//表单案例的提交事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">onSubmit</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">form</span>); <span class="comment">//输出表单内容到控制台</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span>=<span class="literal">false</span>; <span class="comment">//关闭表案例的对话框</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//表单案例的数据双向绑定</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">form</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">region</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date1</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date2</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gridData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dialogTableVisible</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">dialogFormVisible</span>: <span class="literal">false</span>, <span class="comment">//控制form表单案例的对话框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableData</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-4-案例"><a href="#4-4-案例" class="headerlink" title="4.4 案例"></a>4.4 案例</h2><h3 id="4-4-1-案例需求"><a href="#4-4-1-案例需求" class="headerlink" title="4.4.1 案例需求"></a>4.4.1 案例需求</h3><p>参考 <strong>资料&#x2F;页面原型&#x2F;tlias智能学习辅助系统&#x2F;首页.html</strong> 文件，浏览器打开，点击页面中的左侧栏的员工管理，如下所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669373199181.png"> </p><p>需求说明：</p><ol><li><p>制作类似格式的页面</p><p>即上面是标题，左侧栏是导航，右侧是数据展示区域</p></li><li><p>右侧需要展示搜索表单</p></li><li><p>右侧表格数据是动态展示的，数据来自于后台</p></li><li><p>实际示例效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669373639681.png"></p></li></ol><p>数据Mock地址：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%EF%BC%8C%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F%E5%A6%82%E4%B8%8B%E5%9B%BE%E6%89%80%E7%A4%BA%EF%BC%9A">http://yapi.smart-xwork.cn/mock/169327/emp/list，浏览器打开，数据格式如下图所示：</a></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669373386131.png"> </p><p>通过观察数据，我们发现返回的json数据的data属性中，才是返回的人员列表信息</p><h3 id="4-4-2-案例分析"><a href="#4-4-2-案例分析" class="headerlink" title="4.4.2 案例分析"></a>4.4.2 案例分析</h3><p>整个案例相对来说功能比较复杂，需求较多，所以我们需要先整体，后局部细节。整个页面我们可以分为3个部分，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669374858620.png"></p><p>一旦这样拆分，那么我们的思路就清晰了，主要步骤如下：</p><ol><li>创建页面，完成页面的整体布局规划</li><li>然后分别针对3个部分进行各自组件的具体实现</li><li>针对于右侧核心内容展示区域，需要使用异步加载数据，以表格渲染数据</li></ol><h3 id="4-4-3-代码实现"><a href="#4-4-3-代码实现" class="headerlink" title="4.4.3 代码实现"></a>4.4.3 代码实现</h3><h4 id="4-4-3-1-环境搭建"><a href="#4-4-3-1-环境搭建" class="headerlink" title="4.4.3.1 环境搭建"></a>4.4.3.1 环境搭建</h4><p>首先我们来到VS Code中，在views目录下创建 tlias&#x2F;EmpView.vue这个vue组件，并且编写组件的基本模板代码，其效果如下图所示：其中模板代码在之前的案例中已经提供，此处不再赘述</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669375414710.png"> </p><p>并且需要注意的是，我们默认访问的是App.vue这个组件，而我们App.vue这个组件之前是引入了element-view这个组件，此时我们需要修改成引入emp-view这个组件，并且注释掉之前的element-view这个组件，此时App.vue整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;element-view&gt;&lt;/element-view&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">emp-view</span>&gt;</span><span class="tag">&lt;/<span class="name">emp-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">EmpView</span>  <span class="string">&#x27;./views/tlias/EmpView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import ElementView  &#x27;./views/Element/ElementView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;<span class="title class_">EmpView</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>打开浏览器，我们发现之前的element案例内容没了，从而呈现的是一片空白，那么接下来我们就可以继续开发了。</p><h4 id="4-4-3-2-整体布局"><a href="#4-4-3-2-整体布局" class="headerlink" title="4.4.3.2 整体布局"></a>4.4.3.2 整体布局</h4><p>此处肯定不需要我们自己去布局的，我们直接来到ElementUI的官网，找到布局组件，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669376226430.png"> </p><p>从官网提供的示例，我们发现由现成的满足我们需求的布局，所以我们只需要做一位代码搬运工即可。拷贝官方提供的如下代码直接粘贴到我们EmpView.vue组件的template模块中即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-header</span>&gt;</span>Header<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span>Aside<span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器，此时呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669376527001.png"></p><p>因为我们没有拷贝官方提供的css样式，所以和官方案例的效果不太一样，但是我们需要的布局格式已经有，具体内容我们有自己的安排。首先我们需要调整整体布局的高度，所以我们需要在&lt;el-container&gt;上添加一些样式，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到此我们布局功能就完成了</p><h4 id="4-4-3-3-顶部标题"><a href="#4-4-3-3-顶部标题" class="headerlink" title="4.4.3.3 顶部标题"></a>4.4.3.3 顶部标题</h4><p>对于顶部，我们需要实现的效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669376996028.png"></p><p>所以我们需要修改顶部的文本内容，并且提供背景色的css样式，具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时浏览器打开，呈现效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669377134623.png"> </p><p>至此，我们的顶部标题就搞定了</p><p>此时整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span>Aside<span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span>Main<span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-4-3-4-左侧导航栏"><a href="#4-4-3-4-左侧导航栏" class="headerlink" title="4.4.3.4 左侧导航栏"></a>4.4.3.4 左侧导航栏</h4><p>接下来我们来实现左侧导航栏，那么还是在上述布局组件中提供的案例，找到左侧栏的案例，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669377371518.png"> </p><p>所以我们依然只需要搬运代码，然后做简单修改即可。官方提供的导航太多，我们不需要，所以我们需要做删减，在我们的左侧导航栏中粘贴如下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>导航一<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删减前后对比图：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669377954508.png"></p><p>然后我们打开浏览器，展示如下内容：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669378005930.png"></p><p>最后我们只需要替换文字内容即可。</p><p>此时整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>系统信息管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                     </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                  </span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-4-3-5-右侧核心内容"><a href="#4-4-3-5-右侧核心内容" class="headerlink" title="4.4.3.5 右侧核心内容"></a>4.4.3.5 右侧核心内容</h4><h5 id="4-4-3-5-1-表格编写"><a href="#4-4-3-5-1-表格编写" class="headerlink" title="4.4.3.5.1 表格编写"></a>4.4.3.5.1 表格编写</h5><p>右侧显示的是表单和表格，首先我们先来完成表格的制作，我们同样在官方直接找表格组件，也可以直接通过我们上述容器组件中提供的案例中找到表格相关的案例，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669378360527.png"> </p><p>然后找到表格的代码，复制到我们布局容器的主题区域，template模块代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span> <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;120&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表格是有数据模型的绑定的，所以我们需要继续拷贝数据模型，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">tableData</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span><br><span class="line">              <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span><br><span class="line">          &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>浏览器打开，呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669378670102.png"> </p><p>但是这样的表格和数据并不是我们所需要的，所以，接下来我们需要修改表格，添加列，并且修改列名。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span> <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entrydate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updatetime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是，我们列名的prop属性值得内容并不是乱写的，因为我们将来需要绑定后台的数据的，所以如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669379153961.png"></p><p>并且此时我们data中之前的数据模型就不可用了，所以需要清空数据，设置为空数组，代码 如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">tableData</span>: [</span><br><span class="line">          </span><br><span class="line">       ]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时打开浏览器，呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669379291238.png"> </p><p>此时整体页面代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>系统信息管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                     </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>      <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span>     <span class="attr">label</span>=<span class="string">&quot;图像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span>    <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span>       <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entrydate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updatetime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> &gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableData</span>: [</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-4-3-5-2-表单编写"><a href="#4-4-3-5-2-表单编写" class="headerlink" title="4.4.3.5.2 表单编写"></a>4.4.3.5.2 表单编写</h5><p>在表格的上方，还需要如下图所示的表单：</p><p><img src="/assets/1669380411564.png" alt="1669380411564"></p><p>所以接下来我们需要去ElementUI官网，在表单组件中找到与之类似的示例，加以修改从而打成我们希望的效果，官方示例如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669380607025.png"></p><p>所以我们直接拷贝代码主体区域的table组件的上方即可，并且我们需要修改数据绑定的的变量名，最终代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;searchForm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码修改前后对比图：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669381155917.png"></p><p>既然我们表单使用v-model进行数据的双向绑定了，所以我们紧接着需要在data中定义searchForm的数据模型，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">tableData</span>: [</span><br><span class="line">         </span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">searchForm</span>:&#123;</span><br><span class="line">          <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">gender</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>而且，表单的提交按钮，绑定了onSubmit函数，所以我们还需要在methods中定义onSubmit函数，代码如下：</p><p>注意的是methods属性需要和data属性同级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> methods:&#123;</span><br><span class="line">        onSubmit:function()&#123;</span><br><span class="line">            console.log(this.searchForm);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器打开如图所示：</p><p><img src="/1669381520004.png" alt="1669381520004"></p><p>可以发现我们还缺少一个时间，所以可以从elementUI官网找到日期组件，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669381732234.png"></p><p>参考官方代码，然后在我们之前的表单中添加一个日期表单，具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">v-model</span>=<span class="string">&quot;searchForm.entrydate&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们添加了双向绑定，所以我们需要在data的searchForm中定义出来，需要注意的是这个日期包含2个值，所以我们定义为数组，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> searchForm:&#123;</span><br><span class="line">            name:&#x27;&#x27;,</span><br><span class="line">            gender:&#x27;&#x27;,</span><br><span class="line">            entrydate:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们打开浏览器，填写表单，并且点击查询按钮，查看浏览器控制台，可以看到表单的内容，效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669382161813.png"></p><p>此时完整代码如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>系统信息管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                     </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;searchForm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">v-model</span>=<span class="string">&quot;searchForm.entrydate&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>      <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span>     <span class="attr">label</span>=<span class="string">&quot;图像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span>    <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span>       <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entrydate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updatetime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> &gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableData</span>: [</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">searchForm</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">entrydate</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">onSubmit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">searchForm</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4-4-3-5-3-分页工具栏"><a href="#4-4-3-5-3-分页工具栏" class="headerlink" title="4.4.3.5.3 分页工具栏"></a>4.4.3.5.3 分页工具栏</h5><p>分页条我们之前做过，所以我们直接找到之前的案例，复制即可，代码如下：</p><p>其中template模块代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- Pagination分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">               @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">background</span></span></span><br><span class="line"><span class="tag">               <span class="attr">layout</span>=<span class="string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同时methods中需要声明2个函数，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>此时打开浏览器，效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669382952832.png"></p><p>此时整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>系统信息管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                     </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;searchForm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">v-model</span>=<span class="string">&quot;searchForm.entrydate&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>      <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span>     <span class="attr">label</span>=<span class="string">&quot;图像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span>    <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span>       <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entrydate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updatetime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> &gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- Pagination分页 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">background</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">layout</span>=<span class="string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableData</span>: [</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">searchForm</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">entrydate</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">onSubmit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">searchForm</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-4-3-6-异步数据加载"><a href="#4-4-3-6-异步数据加载" class="headerlink" title="4.4.3.6 异步数据加载"></a>4.4.3.6 异步数据加载</h4><h5 id="4-4-3-6-1-异步加载数据"><a href="#4-4-3-6-1-异步加载数据" class="headerlink" title="4.4.3.6.1 异步加载数据"></a>4.4.3.6.1 异步加载数据</h5><p>对于案例，我们只差最后的数据了，而数据的mock地址已经提供：<a href="http://yapi.smart-xwork.cn/mock/169327/emp/list">http://yapi.smart-xwork.cn/mock/169327/emp/list</a></p><p>我们最后要做的就是异步加载数据，所以我们需要使用axios发送ajax请求。</p><p>在vue项目中，对于axios的使用，分为如下2步：</p><ol><li>安装axios: npm install axios</li><li>需要使用axios时，导入axios:  import axios  ‘axios’</li></ol><p>接下来我们先来到项目的执行终端，然后输入命令，安装axios，具体操作如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669383450054.png"> </p><p>然后<strong>重启项目</strong>，来到我们的EmpView.vue组件页面，通过import命令导入axios，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import axios  &#x27;axios&#x27;;</span><br></pre></td></tr></table></figure><p>那么我们什么时候发送axios请求呢？页面加载完成，自动加载，所以可以使用之前的mounted钩子函数，并且我们需要将得到的员工数据要展示到表格，所以数据需要赋值给数据模型tableData，所以我们编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">       axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>)</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="variable language_">this</span>.<span class="property">tableData</span>=resp.<span class="property">data</span>.<span class="property">data</span>; <span class="comment">//响应数据赋值给数据模型</span></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>此时浏览器打开，呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669383786402.png"> </p><p>但是很明显，性别和图片的内容显示不正确，所以我们需要修复。</p><h5 id="4-4-3-6-2-性别内容展示修复"><a href="#4-4-3-6-2-性别内容展示修复" class="headerlink" title="4.4.3.6.2 性别内容展示修复"></a>4.4.3.6.2 性别内容展示修复</h5><p>首先我们来到ElementUI提供的表格组件，找到如下示例：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669384072912.png"></p><p>我们仔细对比效果和功能实现代码，发现其中涉及2个非常重要的点：</p><ul><li>&lt;template&gt; : 用于自定义列的内容<ul><li>slot-scope: 通过属性的row获取当前行的数据</li></ul></li></ul><p>所以接下来，我们可以通过上述的标签自定义列的内容即可，修改性别列的内容代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span>    <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;scope.row.gender==1?&quot;男&quot;:&quot;女&quot;&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时打开浏览器，效果如下图所示：性别一列的值修复成功</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669384537662.png"></p><h5 id="4-4-3-6-3-图片内容展示修复"><a href="#4-4-3-6-3-图片内容展示修复" class="headerlink" title="4.4.3.6.3 图片内容展示修复"></a>4.4.3.6.3 图片内容展示修复</h5><p>图片内容的修复和上述一致，需要借助&lt;template&gt;标签自定义列的内容，需要需要展示图片，直接借助&lt;img&gt;标签即可，并且需要设置图片的宽度和高度，所以直接修改图片列的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span>     <span class="attr">label</span>=<span class="string">&quot;图像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;scope.row.image&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;70px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时回到浏览器，效果如下图所示：图片展示修复成功</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669384726550.png"> </p><p>此时整个案例完整，其完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置最外层容器高度为700px,在加上一个很细的边框 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-container</span> <span class="attr">style</span>=<span class="string">&quot;height: 700px; border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-header</span> <span class="attr">style</span>=<span class="string">&quot;font-size:40px;background-color: rgb(238, 241, 246)&quot;</span>&gt;</span>tlias 智能学习辅助系统<span class="tag">&lt;/<span class="name">el-header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;230px&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #eee&quot;</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;<span class="name">el-menu</span> <span class="attr">:default-openeds</span>=<span class="string">&quot;[&#x27;1&#x27;, &#x27;3&#x27;]&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>系统信息管理<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line">                          </span><br><span class="line">                     </span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span><br><span class="line">                     <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;searchForm&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.name&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;searchForm.gender&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;性别&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;男&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-option</span> <span class="attr">label</span>=<span class="string">&quot;女&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span>&gt;</span></span><br><span class="line">                             <span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">v-model</span>=<span class="string">&quot;searchForm.entrydate&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">type</span>=<span class="string">&quot;daterange&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">                                <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onSubmit&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>      <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;image&quot;</span>     <span class="attr">label</span>=<span class="string">&quot;图像&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;scope.row.image&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;70px&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;gender&quot;</span>    <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">                                &#123;&#123;scope.row.gender==1?&quot;男&quot;:&quot;女&quot;&#125;&#125;</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;job&quot;</span>       <span class="attr">label</span>=<span class="string">&quot;职位&quot;</span> <span class="attr">width</span>=<span class="string">&quot;140&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;entrydate&quot;</span> <span class="attr">label</span>=<span class="string">&quot;入职日期&quot;</span> <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;updatetime&quot;</span> <span class="attr">label</span>=<span class="string">&quot;最后操作时间&quot;</span> <span class="attr">width</span>=<span class="string">&quot;230&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> &gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">&lt;!-- Pagination分页 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">el-pagination</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span><br><span class="line"><span class="tag">                        @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">background</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">layout</span>=<span class="string">&quot;sizes,prev, pager, next,jumper,total&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">:total</span>=<span class="string">&quot;1000&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios  <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableData</span>: [</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        ],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">searchForm</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">gender</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">entrydate</span>:[]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">onSubmit</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">searchForm</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        axios.<span class="title function_">get</span>(<span class="string">&quot;http://yapi.smart-xwork.cn/mock/169327/emp/list&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        .<span class="title function_">then</span>(<span class="function"><span class="params">resp</span>=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">tableData</span>=resp.<span class="property">data</span>.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-Vue路由"><a href="#5-Vue路由" class="headerlink" title="5 Vue路由"></a>5 Vue路由</h1><h2 id="5-1-路由介绍"><a href="#5-1-路由介绍" class="headerlink" title="5.1 路由介绍"></a>5.1 路由介绍</h2><p>将资代码&#x2F;vue-project(路由)&#x2F;vue-project&#x2F;src&#x2F;views&#x2F;tlias&#x2F;DeptView.vue拷贝到我们当前EmpView.vue同级，其结构如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669385311576.png"> </p><p>此时我们希望基于4.4案例中的功能，实现点击侧边栏的部门管理，显示部门管理的信息，点击员工管理，显示员工管理的信息，效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669385425617.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669385446343.png"></p><p>这就需要借助我们的vue的路由功能了。</p><p>前端路由：URL中的hash(#号之后的内容）与组件之间的对应关系，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669385782145.png"></p><p>当我们点击左侧导航栏时，浏览器的地址栏会发生变化，路由自动更新显示与url所对应的vue组件。</p><p>而我们vue官方提供了路由插件Vue Router,其主要组成如下：</p><ul><li>VueRouter：路由器类，根据路由请求在路由视图中动态渲染选中的组件</li><li>&lt;router-link&gt;：请求链接组件，浏览器会解析成&lt;a&gt;</li><li>&lt;router-view&gt;：动态视图组件，用来渲染展示与路由路径对应的组件</li></ul><p>其工作原理如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669386261570.png"></p><p>首先VueRouter根据我们配置的url的hash片段和路由的组件关系去维护一张路由表;</p><p>然后我们页面提供一个&lt;router-link&gt;组件,用户点击，发出路由请求;</p><p>接着我们的VueRouter根据路由请求，在路由表中找到对应的vue组件；</p><p>最后VueRouter会切换&lt;router-view&gt;中的组件，从而进行视图的更新</p><h2 id="5-2-路由入门"><a href="#5-2-路由入门" class="headerlink" title="5.2 路由入门"></a>5.2 路由入门</h2><p>接下来我们来演示vue的路由功能。</p><p>首先我们需要先安装vue-router插件，可以通过如下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@3.5.1</span><br></pre></td></tr></table></figure><p><strong>但是我们不需要安装，因为当初我们再创建项目时，已经勾选了路由功能，已经安装好了。</strong></p><p>然后我们需要在<strong>src&#x2F;router&#x2F;index.js</strong>文件中定义路由表，根据其提供的模板代码进行修改，最终代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span>  <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span>  <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/emp&#x27;</span>,  <span class="comment">//地址hash</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;emp&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/EmpView.vue&#x27;</span>)  <span class="comment">//对应的vue组件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dept&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;dept&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/DeptView.vue&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意需要去掉没有引用的import模块。</p><p>在main.js中，我们已经引入了router功能，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669387519004.png"></p><p>路由基本信息配置好了，路由表已经被加载，此时我们还缺少2个东西，就是&lt;router-lin&gt;和&lt;router-view&gt;,所以我们需要修改2个页面（EmpView.vue和DeptView.vue）我们左侧栏的2个按钮为router-link,其代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/dept&quot;</span>&gt;</span>部门管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">index</span>=<span class="string">&quot;1-2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/emp&quot;</span>&gt;</span>员工管理<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们还需要在内容展示区域即App.vue中定义route-view，作为组件的切换，其App.vue的完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123;message&#125;&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;element-view&gt;&lt;/element-view&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;emp-view&gt;&lt;/emp-view&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import EmpView  &#x27;./views/tlias/EmpView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// import ElementView  &#x27;./views/Element/ElementView.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123; &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;message&quot;</span>:<span class="string">&quot;hello world&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>但是我们浏览器打开地址： <a href="http://localhost:7000/">http://localhost:7000/</a> ，发现一片空白，因为我们默认的路由路径是&#x2F;,但是路由配置中没有对应的关系，</p><p>所以我们需要在路由配置中&#x2F;对应的路由组件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/emp&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;emp&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:  <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/EmpView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/dept&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;dept&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../views/tlias/DeptView.vue&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/emp&#x27;</span> <span class="comment">//表示重定向到/emp即可</span></span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>此时我们打开浏览器，访问<a href="http://localhost:7000/">http://localhost:7000</a> 发现直接访问的是emp的页面，并且能够进行切换了，其具体如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669388755027.png"> </p><p>到此我们的路由实现成功。</p><h1 id="6-打包部署"><a href="#6-打包部署" class="headerlink" title="6 打包部署"></a>6 打包部署</h1><p>我们的前端工程开发好了，但是我们需要发布，那么如何发布呢？主要分为2步：</p><ol><li>前端工程打包</li><li>通过nginx服务器发布前端工程</li></ol><h2 id="6-1-前端工程打包"><a href="#6-1-前端工程打包" class="headerlink" title="6.1 前端工程打包"></a>6.1 前端工程打包</h2><p>接下来我们先来对前端工程进行打包</p><p>我们直接通过VS Code的NPM脚本中提供的build按钮来完整，如下图所示，直接点击即可：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669389052906.png"></p><p>然后会在工程目录下生成一个dist目录，用于存放需要发布的前端资源，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669389147027.png"></p><h2 id="6-2-部署前端工程"><a href="#6-2-部署前端工程" class="headerlink" title="6.2 部署前端工程"></a>6.2 部署前端工程</h2><h3 id="6-2-1-nginx介绍"><a href="#6-2-1-nginx介绍" class="headerlink" title="6.2.1 nginx介绍"></a>6.2.1 nginx介绍</h3><p>nginx: Nginx是一款轻量级的Web服务器&#x2F;反向代理服务器及电子邮件（IMAP&#x2F;POP3）代理服务器。其特点是占有内存少，并发能力强，在各大型互联网公司都有非常广泛的使用。</p><p>niginx在windows中的安装是比较方便的，直接解压即可。所以我们直接将资料中的nginx-1.22.0.zip压缩文件拷贝到<strong>无中文的目录下</strong>，直接解压即可，如下图所示就是nginx的解压目录以及目录结构说明：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669389642057.png"></p><p><strong>很明显，我们如果要发布，直接将资源放入到html目录中。</strong></p><h3 id="6-2-2-部署"><a href="#6-2-2-部署" class="headerlink" title="6.2.2 部署"></a>6.2.2 部署</h3><p>将我们之前打包的前端工程dist目录下得内容拷贝到nginx的html目录下，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669389950696.png"></p><p>然后我们通过双击nginx下得nginx.exe文件来启动nginx，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669390029156.png"></p><p>nginx服务器的端口号是80，所以启动成功之后，我们浏览器直接访问<a href="http://localhost/">http://localhost:80</a> 即可，其中80端口可以省略，其浏览器展示效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669390177896.png"></p><p>到此，我们的前端工程发布成功。</p><p>PS: 如果80端口被占用，我们需要通过<strong>conf&#x2F;nginx.conf</strong>配置文件来修改端口号。如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1669390312206.png"></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-02</title>
      <link href="/2023/07/23/day02-JavaScript-Vue/"/>
      <url>/2023/07/23/day02-JavaScript-Vue/</url>
      
        <content type="html"><![CDATA[<h1 id="1-JavaScript"><a href="#1-JavaScript" class="headerlink" title="1 JavaScript"></a>1 JavaScript</h1><p>html完成了架子，css做了美化，但是网页是死的，我们需要给他注入灵魂，所以接下来我们需要学习JavaScript，这门语言会让我们的页面能够和用户进行交互。</p><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><p>通过<strong>代码&#x2F;js效果演示</strong>提供资料进行效果演示，通过浏览器打开，我们点击主题5按钮，页面的主题发生了变化，所以js可以让我们的页面更加的智能，让页面和用户进行交互。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667964998343.png"> </p><h2 id="1-2-引入方式"><a href="#1-2-引入方式" class="headerlink" title="1.2 引入方式"></a>1.2 引入方式</h2><p>同样，js代码也是书写在html中的，那么html中如何引入js代码呢？主要通过下面的2种引入方式：</p><p><strong>第一种方式：</strong>内部脚本，将JS代码定义在HTML页面中</p><ul><li>JavaScript代码必须位于&lt;script&gt;&lt;&#x2F;script&gt;标签之间</li><li>在HTML文档中，可以在任意地方，放置任意数量的&lt;script&gt;</li><li>一般会把脚本置于&lt;body&gt;元素的底部，可改善显示速度</li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;Hello JavaScript&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第二种方式：</strong>外部脚本将， JS代码定义在外部 JS文件中，然后引入到 HTML页面中</p><ul><li>外部JS文件中，只包含JS代码，不包含&amp;ltscript&gt;标签</li><li>引入外部js的&lt;script&gt;标签，必须是双标签</li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：demo.js中只有js代码，没有&lt;script&gt;标签</p><p>接下来，我们通过VS Code来编写代码，演示html中2种引入js的方式</p><p>第一步：在VS Code中创建名为 10.JS-引入方式.html 的文件</p><p>第二步：按照上述第一种内部脚本的方式引入js，编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内部脚本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;Hello JS&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：浏览器打开效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668020985363.png"> </p><p>第四步：接下来演示外部脚本，注释掉内部脚本，然后在css目录同级创建js目录，然后创建一个名为demo.js的文件：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668021080890.png"> </p><p>第五步：在demo.js中编写如下js内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Hello JS2&#x27;</span>);</span><br></pre></td></tr></table></figure><p>第六步：注释掉之前的内部脚本代码，添加&lt;script&gt;标签来引入外部demo.js文件,具体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-引入方式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内部脚本 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script&gt;</span></span><br><span class="line"><span class="comment">        alert(&#x27;Hello JS&#x27;);</span></span><br><span class="line"><span class="comment">    &lt;/script&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 外部脚本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/demo.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第七步：浏览器刷新效果如图：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668021241174.png"> </p><h2 id="1-3-基础语法"><a href="#1-3-基础语法" class="headerlink" title="1.3 基础语法"></a>1.3 基础语法</h2><h3 id="1-3-1-书写语法"><a href="#1-3-1-书写语法" class="headerlink" title="1.3.1 书写语法"></a>1.3.1 书写语法</h3><p>掌握了js的引入方式，那么接下来我们需要学习js的书写了，首先需要掌握的是js的书写语法，语法规则如下：</p><ul><li><p>区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的</p></li><li><p>每行结尾的分号可有可无</p></li><li><p>大括号表示代码块</p></li><li><p>注释：</p><ul><li><p>单行注释：&#x2F;&#x2F; 注释内容</p></li><li><p>多行注释：&#x2F;* 注释内容 *&#x2F;</p></li></ul></li></ul><p>我们需要借助js中3钟输出语句，来演示书写语法</p><table><thead><tr><th>api</th><th>描述</th></tr></thead><tbody><tr><td>window.alert()</td><td>警告框</td></tr><tr><td>document.write()</td><td>在HTML 输出内容</td></tr><tr><td>console.log()</td><td>写入浏览器控制台</td></tr></tbody></table><p>接下来我们选用通过VS Code，接触3种输入语句，来演示js的书写语法</p><p>第一步：在VS Code中创建名为 11.JS-基础语法-输出语句.html的文件</p><p>第二步：按照基本语法规则，编写3种输出语句的代码，并且添加注释，具体代码如下；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-基本语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* alert(&quot;JS&quot;); */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式一: 弹出警告框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;hello js&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开如图所示效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668101592422.png"> </p><p>我们注释掉上述代码，添加代码 document.write(“hello js”); 来输出内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-基本语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* alert(&quot;JS&quot;); */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式一: 弹出警告框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// window.alert(&quot;hello js&quot;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式二: 写入html页面中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;hello js&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新浏览器，效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668101718354.png"> </p><p>最后我们使用console.log(“hello js”); 写入到控制台，并且注释掉之前的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-基本语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* alert(&quot;JS&quot;); */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式一: 弹出警告框</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// window.alert(&quot;hello js&quot;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// //方式二: 写入html页面中</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// document.write(&quot;hello js&quot;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式三: 控制台输出</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello js&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器f12抓包，去控制台页面，如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668101840992.png"></p><h3 id="1-3-2-变量"><a href="#1-3-2-变量" class="headerlink" title="1.3.2 变量"></a>1.3.2 变量</h3><p>书写语法会了，变量是一门编程语言比不可少的，所以接下来我们需要学习js中变量的声明，在js中，变量的声明和java中还是不同的。首先js中主要通过如下3个关键字来声明变量的：</p><table><thead><tr><th>关键字</th><th>解释</th></tr></thead><tbody><tr><td>var</td><td>早期ECMAScript5中用于变量声明的关键字</td></tr><tr><td>let</td><td>ECMAScript6中新增的用于变量声明的关键字，相比较var，let只在代码块内生效</td></tr><tr><td>const</td><td>声明常量的，常量一旦声明，不能修改</td></tr></tbody></table><p>在js中声明变量还需要注意如下几点：</p><ul><li>JavaScript 是一门弱类型语言，变量可以存放不同类型的值 。</li><li>变量名需要遵循如下规则：<ul><li>组成字符可以是任何字母、数字、下划线（_）或美元符号（$）</li><li>数字不能开头</li><li>建议使用驼峰命名</li></ul></li></ul><p>接下来我们需要通过VS Code编写代码来演示js中变量的定义</p><p>第一步：在VS Code中创建名为 12.JS-基础语法-变量.html的文件：</p><p>第二步：编写代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-基础语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//var定义变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    a = <span class="string">&quot;张三&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(a);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到浏览器弹出张三</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668101996370.png"> </p><p>在js中，我们var声明的变量可以接受任何数据类型的值。并且var声明的变量的作用于是全局的，注释掉之前的代码，添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//var定义变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var a = 10;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// a = &quot;张三&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(a);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//特点1 : 作用域比较大, 全局变量</span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> x = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(x);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器照样成功弹出：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668102183766.png"> </p><p>而且var关键字声明的变量可以重复定义，修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">var</span> x = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(x);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>浏览器弹出内容是A</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668102256305.png"> </p><p>所以在ECMAScript 6 新增了 <strong>let</strong>关键字来定义变量，它的用法类似于 var，但是所声明的变量，只在 let关键字所在的代码块内有效，且不允许重复声明。注释掉之前的代码，添加代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//var定义变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var a = 10;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// a = &quot;张三&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(a);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//特点1 : 作用域比较大, 全局变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//特点2 : 可以重复定义的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var x = 1;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var x = &quot;A&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(x);</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let : 局部变量 ; 不能重复定义 </span></span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> x = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(x);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开，f12抓包，来到控制台页面，发现报错，变量没有定义，说明let声明的变量在代码块外不生效</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668102426953.png"></p><p>接着我们使用let重复定义变量，代码修改如下：发现idea直接帮我们报错了，说明let声明的变量不能重复定义</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668102527993.png"> </p><p>在ECMAScript6中，还新增了const关键字用来声明常量，但是一旦声明，常量的值是无法更改的。注释之前的内容，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pi = <span class="number">3.14</span>;</span><br><span class="line">pi = <span class="number">3.15</span>;</span><br><span class="line"><span class="title function_">alert</span>(pi);</span><br></pre></td></tr></table></figure><p>浏览器f12抓包，来到控制台页面发现直接报错了，</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668102736759.png"> </p><p>关于变量的讲解我们就此结束，完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-基础语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//var定义变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var a = 10;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// a = &quot;张三&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(a);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//特点1 : 作用域比较大, 全局变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//特点2 : 可以重复定义的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var x = 1;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var x = &quot;A&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(x);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//let : 局部变量 ; 不能重复定义 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     let x = 1;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(x);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//const: 常量 , 不能给改变的.</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> pi = <span class="number">3.14</span>;</span></span><br><span class="line"><span class="language-javascript">    pi = <span class="number">3.15</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(pi);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3-数据类型和运算符"><a href="#1-3-3-数据类型和运算符" class="headerlink" title="1.3.3 数据类型和运算符"></a>1.3.3 数据类型和运算符</h3><p>虽然js是弱数据类型的语言，但是js中也存在数据类型，js中的数据类型分为 ：原始类型 和 引用类型，具体有如下类型</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>数字（整数、小数、NaN(Not a Number)）</td></tr><tr><td>string</td><td>字符串，单双引皆可</td></tr><tr><td>boolean</td><td>布尔。true，false</td></tr><tr><td>null</td><td>对象为空</td></tr><tr><td>undefined</td><td>当声明的变量未初始化时，该变量的默认值是 undefined</td></tr></tbody></table><p>使用typeof函数可以返回变量的数据类型，接下来我们需要通过书写代码来演示js中的数据类型</p><p>第一步：在VS Code中创建名为13. JS-基础语法-数据类型.html的文件</p><p>第二步：编写如下代码，然后直接挨个观察数据类型：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-数据类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//原始数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="number">3</span>); <span class="comment">//number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="number">3.14</span>); <span class="comment">//number</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="string">&quot;A&quot;</span>); <span class="comment">//string</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="string">&#x27;Hello&#x27;</span>);<span class="comment">//string</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">//boolean</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="literal">false</span>);<span class="comment">//boolean</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//object </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a ;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="keyword">typeof</span> a); <span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>熟悉了js的数据类型了，那么我们需要学习js中的运算法，js中的运算规则绝大多数还是和java中一致的，具体运算符如下：</p><table><thead><tr><th>运算规则</th><th>运算符</th></tr></thead><tbody><tr><td>算术运算符</td><td>+ , - , * , &#x2F; , % , ++ , –</td></tr><tr><td>赋值运算符</td><td>&#x3D; , +&#x3D; , -&#x3D; , *&#x3D; , &#x2F;&#x3D; , %&#x3D;</td></tr><tr><td>比较运算符</td><td>&gt; , &lt; , &gt;&#x3D; , &lt;&#x3D; , !&#x3D; , &#x3D;&#x3D; , &#x3D;&#x3D;&#x3D;   注意     &#x3D;&#x3D; 会进行类型转换，&#x3D;&#x3D;&#x3D; 不会进行类型转换</td></tr><tr><td>逻辑运算符</td><td>&amp;&amp; , || , !</td></tr><tr><td>三元运算符</td><td>条件表达式 ? true_value: false_value</td></tr></tbody></table><p>接下来我们通过代码来演示js中的运算法，主要记忆js中和java中不一致的地方</p><p>第一步：在VS Code中创建名为14. JS-基础语法-运算符.html的文件</p><p>第二步：编写代码</p><p>在js中，绝大多数的运算规则和java中是保持一致的，但是js中的=&#x3D;和&#x3D;&#x3D;&#x3D;是有区别的。</p><ul><li>=&#x3D;：只比较值是否相等，不区分数据类型，哪怕类型不一致，&#x3D;&#x3D;也会自动转换类型进行值得比较</li><li>&#x3D;&#x3D;&#x3D;：不光比较值，还要比较类型，如果类型不一致，直接返回false</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-运算符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> age = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> _age = <span class="string">&quot;20&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> $age = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">alert</span>(age == _age);<span class="comment">//true ，只比较值</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">alert</span>(age === _age);<span class="comment">//false ，类型不一样</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title function_">alert</span>(age === $age);<span class="comment">//true ，类型一样，值一样</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在js中，虽然不区分数据类型，但是有时候涉及到数值计算，还是需要进行类型转换的，js中可以通过parseInt()函数来进行将其他类型转换成数值类型。注释之前的代码，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型转换 - 其他类型转为数字</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;12&quot;</span>)); <span class="comment">//12</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;12A45&quot;</span>)); <span class="comment">//12</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="built_in">parseInt</span>(<span class="string">&quot;A45&quot;</span>));<span class="comment">//NaN (not a number)</span></span><br></pre></td></tr></table></figure><p>除此之外，在js中，还有非常重要的一点是：0,null,undefined,””,NaN理解成false,反之理解成true。注释掉之前的代码，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">0</span>)&#123; <span class="comment">//false</span></span><br><span class="line">   <span class="title function_">alert</span>(<span class="string">&quot;0 转换为false&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器刷新页面，发现没有任何弹框，因为0理解成false，所以条件不成立。注释掉上述代码，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123; <span class="comment">//true</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;除0和NaN其他数字都转为 true&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器刷新，因为1理解成true，条件成立，所以浏览器效果如下；</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668103531260.png"> </p><p>其他情况可以一一演示，完整演示代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if(0)&#123; //false</span></span><br><span class="line"><span class="comment">//     alert(&quot;0 转换为false&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if(NaN)&#123;//false</span></span><br><span class="line"><span class="comment">//     alert(&quot;NaN 转换为false&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123; <span class="comment">//true</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;除0和NaN其他数字都转为 true&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if(&quot;&quot;)&#123; //false</span></span><br><span class="line"><span class="comment">//     alert(&quot;空字符串为 false, 其他都是true&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// if(null)&#123; //false</span></span><br><span class="line"><span class="comment">//     alert(&quot;null 转化为false&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// if(undefined)&#123; //false</span></span><br><span class="line"><span class="comment">//     alert(&quot;undefined 转化为false&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>流程控制语句if，switch，for等和java保持一致，此处不再演示</p><p><strong>需要注意的是：</strong>在js中，0,null,undefined,””,NaN理解成false,反之理解成true</p><h2 id="1-4-函数"><a href="#1-4-函数" class="headerlink" title="1.4 函数"></a>1.4 函数</h2><p>在java中我们为了提高代码的复用性，可以使用方法。同样，在JavaScript中可以使用函数来完成相同的事情。JavaScript中的函数被设计为执行特定任务的代码块，通过关键字function来定义。接下来我们学习一下JavaScript中定义函数的2种语法</p><h3 id="1-4-1-第一种定义格式"><a href="#1-4-1-第一种定义格式" class="headerlink" title="1.4.1 第一种定义格式"></a>1.4.1 第一种定义格式</h3><p>第一种定义格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(参数<span class="number">1</span>,参数<span class="number">2.</span>.)&#123;</span><br><span class="line">    要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为JavaScript是弱数据类型的语言，所以有如下几点需要注意：</p><ul><li>形式参数不需要声明类型，并且JavaScript中不管什么类型都是let或者var去声明，加上也没有意义。</li><li>返回值也不需要声明类型，直接return即可</li></ul><p>如下示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们需要在VS Code中编写代码来演示</p><p>第一步：新建名为js的文件夹，创建名为01. JS-函数的html文件，然后在&lt;script&gt;中定义上述示例的函数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>  a + b;</span></span><br><span class="line"><span class="language-javascript">     &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是上述只是定义函数，<strong>函数需要被调用才能执行！</strong>所以接下来我们需要调用函数</p><p>第二步：因为定义的add函数有返回值，所以我们可以接受返回值，并且输出到浏览器上，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="title function_">alert</span>(result);</span><br></pre></td></tr></table></figure><p>查看浏览器运行结果：浏览器弹框内容如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668584359136.png"> </p><h3 id="1-4-2-第二种定义格式"><a href="#1-4-2-第二种定义格式" class="headerlink" title="1.4.2 第二种定义格式"></a>1.4.2 第二种定义格式</h3><p>第二种可以通过var去定义函数的名字，具体格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="keyword">function</span> (<span class="params">参数<span class="number">1</span>,参数<span class="number">2.</span>.</span>)&#123;   </span><br><span class="line"><span class="comment">//要执行的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们按照上述的格式，修改代码如下：只需要将第一种定义方式注释掉，替换成第二种定义方式即可，函数的调用不变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义函数-1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function add(a,b)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//    return  a + b;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义函数-2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> add = <span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>  a + b;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//函数调用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> result = <span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(result);</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器弹框效果和上述一致</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668584359136.png"> </p><p>我们在调用add函数时，再添加2个参数，修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure><p>浏览器打开，发现没有错误，并且依然弹出30，这是为什么呢？</p><p>因为在JavaScript中，函数的调用只需要名称正确即可，参数列表不管的。如上述案例，10传递给了变量a，20传递给了变量b,而30和40没有变量接受，但是不影响函数的正常调用。</p><h2 id="1-5-JavaScript对象"><a href="#1-5-JavaScript对象" class="headerlink" title="1.5 JavaScript对象"></a>1.5 JavaScript对象</h2><p>JavaScript中的对象有很多，主要可以分为如下3大类，我们可以打开<a href="https://www.w3school.com.cn/">W3school在线学习文档</a>，来到首页，在左侧栏找到浏览器脚本下的JavaScript，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668587524509.png"></p><p>然后进入到如下界面，点击右侧的参考书</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668587661914.png"> </p><p>然后进入到如下页面，此页面列举出了JavaScript中的所有对象</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668587855863.png"></p><p>可以大体分页3大类：</p><p>第一类：基本对象,我们主要学习Array和JSON和String</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668587953841.png"> </p><p>第二类：BOM对象,主要是和浏览器相关的几个对象</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668588039871.png"> </p><p>第三类：DOM对象，JavaScript中将html的每一个标签都封装成一个对象</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668588141399.png"> </p><p>我们先来学习基本对象种的Array对象</p><h3 id="1-5-1-基本对象"><a href="#1-5-1-基本对象" class="headerlink" title="1.5.1 基本对象"></a>1.5.1 基本对象</h3><h4 id="1-5-1-1-Array对象"><a href="#1-5-1-1-Array对象" class="headerlink" title="1.5.1.1 Array对象"></a>1.5.1.1 Array对象</h4><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><p>Array对象时用来定义数组的。常用语法格式有如下2种：</p><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">Array</span>(元素列表); </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>); <span class="comment">//1,2,3,4 是存储在数组中的数据（元素）</span></span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = [ 元素列表 ]; </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]; <span class="comment">//1,2,3,4 是存储在数组中的数据（元素）</span></span><br></pre></td></tr></table></figure><p>数组定义好了，那么我们该如何获取数组中的值呢？和java中一样，需要通过索引来获取数组中的值。语法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr[索引] = 值;</span><br></pre></td></tr></table></figure><p>接下来，我们在VS Code中创建名为02. JS-对象-Array.html的文件，按照上述的语法定义数组，并且通过索引来获取数组中的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义数组</span></span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//获取数组中的值，索引从0开始计数</span></span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">     <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器控制台观察的效果如下：输出1和2</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668590655291.png"> </p><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><p>与java中不一样的是，JavaScript中数组相当于java中的集合，数组的长度是可以变化的。而且JavaScript是弱数据类型的语言，所以数组中可以存储任意数据类型的值。接下来我们通过代码来演示上述特点。</p><p>注释掉之前的代码，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//特点: 长度可变 类型可变</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">9</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">8</span>]);</span><br></pre></td></tr></table></figure><p>上述代码定义的arr变量中，数组的长度是4，但是我们直接再索引10的位置直接添加了数据10，并且输出索引为10的位置的元素，浏览器控制台数据结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668590614787.png"> </p><p>因为索引8和9的位置没有值，所以输出内容undefined,当然，我们也可以给数组添加其他类型的值，添加代码如下：注释掉之前控制台输出的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//特点: 长度可变 类型可变</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(arr[10]);</span></span><br><span class="line"><span class="comment">// console.log(arr[9]);</span></span><br><span class="line"><span class="comment">// console.log(arr[8]);</span></span><br><span class="line"></span><br><span class="line">arr[<span class="number">9</span>] = <span class="string">&quot;A&quot;</span>;</span><br><span class="line">arr[<span class="number">8</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><p>浏览器控制台输出结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668590895662.png"> </p><h5 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h5><p>Array作为一个对象，那么对象是有属性和方法的，所以接下来我们介绍一下Array对象的属性和方法</p><p>官方文档中提供了Array的很多属性和方法，但是我们只学习常用的属性和方法，如下图所示：</p><p>属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">length</td><td align="left">设置或返回数组中元素的数量。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th align="left">方法方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">forEach()</td><td align="left">遍历数组中的每个有值得元素，并调用一次传入的函数</td></tr><tr><td align="left">push()</td><td align="left">将新元素添加到数组的末尾，并返回新的长度</td></tr><tr><td align="left">splice()</td><td align="left">从数组中删除元素</td></tr></tbody></table><ul><li><p>length属性：</p><p>length属性可以用来获取数组的长度，所以我们可以借助这个属性，来遍历数组中的元素，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">arr[<span class="number">10</span>] = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器控制台输出结果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668591566013.png"> </p></li><li><p>forEach()函数</p><p>首先我们学习forEach()方法，顾名思义，这是用来遍历的，那么遍历做什么事呢？所以这个方法的参数，需要传递一个函数，而且这个函数接受一个参数，就是遍历时数组的值。修改之前的遍历代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e是形参，接受的是数组遍历时的值</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然了，在ES6中，引入箭头函数的写法，语法类似java中lambda表达式，修改上述代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>浏览器输出结果如下：注意的是，没有元素的内容是不会输出的，因为forEach只会遍历有值的元素 </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668592407223.png">  </p></li><li><p>push()函数</p><p>push()函数是用于向数组的末尾添加元素的，其中函数的参数就是需要添加的元素，编写如下代码：向数组的末尾添加3个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//push: 添加元素到数组末尾</span></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><p>浏览器输出结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668593799333.png"> </p></li><li><p>splice()函数</p><p>splice()函数用来数组中的元素，函数中填入2个参数。</p><p>参数1：表示从哪个索引位置删除</p><p>参数2：表示删除元素的个数</p><p>如下代码表示：从索引2的位置开始删，删除2个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//splice: 删除元素</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure><p>浏览器执行效果如下：元素3和4被删除了，元素3是索引2</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668594075039.png"></p></li></ul><p>Array数组的完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-Array<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var arr = new Array(1,2,3,4);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var arr = [1,2,3,4];</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr[0]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr[1]);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//特点: 长度可变 类型可变</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var arr = [1,2,3,4];</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arr[10] = 50;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr[10]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr[9]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr[8]);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arr[9] = &quot;A&quot;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arr[8] = true;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span></span><br><span class="line"><span class="language-javascript">    arr[<span class="number">10</span>] = <span class="number">50</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (let i = 0; i &lt; arr.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(arr[i]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&quot;==================&quot;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//forEach: 遍历数组中有值的元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arr.forEach(function(e)&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// //ES6 箭头函数: (...) =&gt; &#123;...&#125; -- 简化函数定义</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arr.forEach((e) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(e);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;) </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//push: 添加元素到数组末尾</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// arr.push(7,8,9);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(arr);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//splice: 删除元素</span></span></span><br><span class="line"><span class="language-javascript">    arr.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-5-1-2-String对象"><a href="#1-5-1-2-String对象" class="headerlink" title="1.5.1.2 String对象"></a>1.5.1.2 String对象</h4><h5 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h5><p>String对象的创建方式有2种：</p><p>方式1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;…&quot;</span>) ; <span class="comment">//方式一</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Hello String&quot;</span>);</span><br></pre></td></tr></table></figure><p>方式2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="string">&quot;…&quot;</span> ; <span class="comment">//方式二</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;Hello String&#x27;</span>;</span><br></pre></td></tr></table></figure><p>按照上述的格式，在VS Code中创建为名03. JS-对象-String.html的文件，编写代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建字符串对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//var str = new String(&quot;Hello String&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str = <span class="string">&quot;  Hello String    &quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器控制台输出结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668595022160.png"> </p><h5 id="属性和方法-1"><a href="#属性和方法-1" class="headerlink" title="属性和方法"></a>属性和方法</h5><p>String对象也提供了一些常用的属性和方法，如下表格所示：</p><p>属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>length</td><td>字符串的长度。</td></tr></tbody></table><p>方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>charAt()</td><td>返回在指定位置的字符。</td></tr><tr><td>indexOf()</td><td>检索字符串。</td></tr><tr><td>trim()</td><td>去除字符串两边的空格</td></tr><tr><td>substring()</td><td>提取字符串中两个指定的索引号之间的字符。</td></tr></tbody></table><ul><li><p>length属性：</p><p>length属性可以用于返回字符串的长度，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//length</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span><br></pre></td></tr></table></figure></li><li><p>charAt()函数：</p><p>charAt()函数用于返回在指定索引位置的字符，函数的参数就是索引。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">4</span>));</span><br></pre></td></tr></table></figure></li><li><p>indexOf()函数</p><p>indexOf()函数用于检索指定内容在字符串中的索引位置的，返回值是索引，参数是指定的内容。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;lo&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p>trim()函数</p><p>trim()函数用于去除字符串两边的空格的。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = str.<span class="title function_">trim</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">length</span>);</span><br></pre></td></tr></table></figure></li><li><p>substring()函数</p><p>substring()函数用于截取字符串的，函数有2个参数。</p><p>参数1：表示从那个索引位置开始截取。包含</p><p>参数2：表示到那个索引位置结束。不包含</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">5</span>));</span><br></pre></td></tr></table></figure></li></ul><p>整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-String<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//创建字符串对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//var str = new String(&quot;Hello String&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> str = <span class="string">&quot;  Hello String    &quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//length</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//charAt</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">4</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//indexOf</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;lo&quot;</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//trim</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> s = str.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">length</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//substring(start,end) --- 开始索引, 结束索引 (含头不含尾)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">5</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器执行效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668595450181.png"> </p><h4 id="1-5-1-3-JSON对象"><a href="#1-5-1-3-JSON对象" class="headerlink" title="1.5.1.3 JSON对象"></a>1.5.1.3 JSON对象</h4><h5 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h5><p>在 JavaScript 中自定义对象特别简单，其语法格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名 = &#123;</span><br><span class="line">    属性名<span class="number">1</span>: 属性值<span class="number">1</span>, </span><br><span class="line">    属性名<span class="number">2</span>: 属性值<span class="number">2</span>,</span><br><span class="line">    属性名<span class="number">3</span>: 属性值<span class="number">3</span>,</span><br><span class="line">    函数名称: <span class="keyword">function</span>(<span class="params">形参列表</span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们可以通过如下语法调用属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名</span><br></pre></td></tr></table></figure><p>通过如下语法调用函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.函数名()</span><br></pre></td></tr></table></figure><p>接下来，我们再VS Code中创建名为04. JS-对象-JSON.html的文件演示自定义对象</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> user = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">eat</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用膳~&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>);</span></span><br><span class="line"><span class="language-javascript">    user.<span class="title function_">eat</span>();</span></span><br><span class="line"><span class="language-javascript">&lt;script&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器控制台结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668596039535.png"></p><p>其中上述函数定义的语法可以简化成如下格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="attr">gender</span>: <span class="string">&quot;male&quot;</span>,</span><br><span class="line">    <span class="comment">// eat: function()&#123;</span></span><br><span class="line">    <span class="comment">//      console.log(&quot;用膳~&quot;);</span></span><br><span class="line">    <span class="comment">//  &#125;</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;用膳~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="json对象"><a href="#json对象" class="headerlink" title="json对象"></a>json对象</h5><p>JSON对象：<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript对象标记法。是通过JavaScript标记法书写的文本。其格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;key&quot;</span>:value,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>:value,</span><br><span class="line">    <span class="string">&quot;key&quot;</span>:value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<strong>key必须使用引号并且是双引号标记，value可以是任意数据类型。</strong></p><p>例如我们可以直接百度搜索“json在线解析”，随便挑一个进入，然后编写内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;name&quot;</span>: <span class="string">&quot;李传播&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668596701343.png"> </p><p>但是当我们将双引号切换成单引号，再次校验，则报错，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668596798551.png"></p><p>那么json这种数据格式的文本到底应用在企业开发的什么地方呢？– 经常用来作为前后台交互的数据载体</p><p>如下图所示：前后台交互时，我们需要传输数据，但是java中的对象我们该怎么去描述呢？我们可以使用如图所示的xml格式，可以清晰的描述java中需要传递给前端的java对象。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668597000013.png"> </p><p>但是xml格式存在如下问题：</p><ul><li>标签需要编写双份，占用带宽，浪费资源</li><li>解析繁琐</li></ul><p>所以我们可以使用json来替代，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668597176685.png"> </p><p>接下来我们通过代码来演示json对象：注释掉之前的代码，编写代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonstr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:18, &quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(jsonstr.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>浏览器输出结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668597352197.png"> </p><p>为什么呢？<strong>因为上述是一个json字符串，不是json对象，所以我们需要借助如下函数来进行json字符串和json对象的转换。</strong>添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonstr);</span><br><span class="line"><span class="title function_">alert</span>(obj.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><p>此时浏览器输出结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668597489911.png"> </p><p>当然了，我们也可以通过如下函数将json对象再次转换成json字符串。添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br></pre></td></tr></table></figure><p>浏览器输出结果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668597624263.png"> </p><p>整体全部代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-JSON<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var user = &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     name: &quot;Tom&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     age: 10,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     gender: &quot;male&quot;,</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     // eat: function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     //      console.log(&quot;用膳~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     //  &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     eat()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//         console.log(&quot;用膳~&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(user.name);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// user.eat();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// //定义json</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> jsonstr = <span class="string">&#x27;&#123;&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:18, &quot;addr&quot;:[&quot;北京&quot;,&quot;上海&quot;,&quot;西安&quot;]&#125;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//alert(jsonstr.name);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// //json字符串--js对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonstr);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//alert(obj.name);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// //js对象--json字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-2-BOM对象"><a href="#1-5-2-BOM对象" class="headerlink" title="1.5.2 BOM对象"></a>1.5.2 BOM对象</h3><p>接下来我们学习BOM对象，BOM的全称是Browser Object Model,翻译过来是浏览器对象模型。也就是JavaScript将浏览器的各个组成部分封装成了对象。我们要操作浏览器的部分功能，可以通过操作BOM对象的相关属性或者函数来完成。例如：我们想要将浏览器的地址改为<code>http://www.baidu.com</code>,我们就可以通过BOM中提供的location对象的href属性来完成，代码如下：<code>location.href=&#39;http://www.baidu.com&#39;</code></p><p>BOM中提供了如下5个对象：</p><table><thead><tr><th align="left">对象名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">Window</td><td align="left">浏览器窗口对象</td></tr><tr><td align="left">Navigator</td><td align="left">浏览器对象</td></tr><tr><td align="left">Screen</td><td align="left">屏幕对象</td></tr><tr><td align="left">History</td><td align="left">历史记录对象</td></tr><tr><td align="left">Location</td><td align="left">d地址栏对象</td></tr></tbody></table><p>上述5个对象与浏览器各组成对应的关系如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20210815194911914.png"> </p><p>对于上述5个对象，我们重点学习的是Window对象、Location对象这2个。</p><h4 id="1-5-2-1-Window对象"><a href="#1-5-2-1-Window对象" class="headerlink" title="1.5.2.1 Window对象"></a>1.5.2.1 Window对象</h4><p>window对象指的是浏览器窗口对象，是JavaScript的全部对象，所以对于window对象，我们可以直接使用，并且对于window对象的方法和属性，我们可以省略window.例如：我们之前学习的alert()函数其实是属于window对象的,其完整的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.alert(&#x27;hello&#x27;);</span><br></pre></td></tr></table></figure><p>其可以省略window.  所以可以简写成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure><p>所以对于window对象的属性和方法，我们都是采用简写的方式。window提供了很多属性和方法，下表列出了常用属性和方法</p><p>window对象提供了获取其他BOM对象的属性：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>history</td><td>用于获取history对象</td></tr><tr><td>location</td><td>用于获取location对象</td></tr><tr><td>Navigator</td><td>用于获取Navigator对象</td></tr><tr><td>Screen</td><td>用于获取Screen对象</td></tr></tbody></table><p>也就是说我们要使用location对象，只需要通过代码<code>window.location</code>或者简写<code>location</code>即可使用</p><p>window也提供了一些常用的函数，如下表格所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>alert()</td><td>显示带有一段消息和一个确认按钮的警告框。</td></tr><tr><td>comfirm()</td><td>显示带有一段消息以及确认按钮和取消按钮的对话框。</td></tr><tr><td>setInterval()</td><td>按照指定的周期（以毫秒计）来调用函数或计算表达式。</td></tr><tr><td>setTimeout()</td><td>在指定的毫秒数后调用函数或计算表达式。</td></tr></tbody></table><p>接下来，我们通过VS Code中创建名为05. JS-对象-BOM.html文件来编写代码来演示上述函数：</p><ul><li><p>alert()函数：弹出警告框，函数的内容就是警告框的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//window对象是全局对象，window对象的属性和方法在调用时可以省略window.</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&quot;Hello BOM&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(<span class="string">&quot;Hello BOM Window&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开，依次弹框，此处只截图一张</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668794735581.png"> </p></li><li><p>confirm()函数：弹出确认框，并且提供用户2个按钮，分别是确认和取消。</p><p>添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">confirm</span>(<span class="string">&quot;您确认删除该记录吗?&quot;</span>);</span><br></pre></td></tr></table></figure><p>浏览器打开效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668794898891.png"> </p><p>但是我们怎么知道用户点击了确认还是取消呢？所以这个函数有一个返回值，当用户点击确认时，返回true，点击取消时，返回false。我们根据返回值来决定是否执行后续操作。修改代码如下：再次运行，可以查看返回值true或者false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flag = <span class="title function_">confirm</span>(<span class="string">&quot;您确认删除该记录吗?&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(flag);</span><br></pre></td></tr></table></figure></li><li><p>setInterval(fn,毫秒值)：定时器，用于周期性的执行某个功能，并且是<strong>循环执行</strong>。该函数需要传递2个参数：</p><p>fn:函数，需要周期性执行的功能代码</p><p>毫秒值：间隔时间</p><p>注释掉之前的代码，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定时器 - setInterval -- 周期性的执行某一个函数</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     i++;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器执行了&quot;</span>+i+<span class="string">&quot;次&quot;</span>);</span><br><span class="line">&#125;,<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>刷新页面，浏览器每个一段时间都会在控制台输出，结果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668795435780.png"> </p></li><li><p>setTimeout(fn,毫秒值) ：定时器，只会在一段时间后<strong>执行一次功能</strong>。参数和上述setInterval一致</p><p>注释掉之前的代码，添加代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定时器 - setTimeout -- 延迟指定时间执行一次 </span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&quot;JS&quot;</span>);</span><br><span class="line">&#125;,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p>浏览器打开，3s后弹框，关闭弹框，发现再也不会弹框了。</p></li></ul><h4 id="1-5-2-2-Location对象"><a href="#1-5-2-2-Location对象" class="headerlink" title="1.5.2.2 Location对象"></a>1.5.2.2 Location对象</h4><p>location是指代浏览器的地址栏对象，对于这个对象，我们常用的是href属性，用于获取或者设置浏览器的地址信息，添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取浏览器地址栏信息</span></span><br><span class="line"><span class="title function_">alert</span>(location.<span class="property">href</span>);</span><br><span class="line"><span class="comment">//设置浏览器地址栏信息</span></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&quot;https://www.itcast.cn&quot;</span>;</span><br></pre></td></tr></table></figure><p>浏览器效果如下：首先弹框展示浏览器地址栏信息，</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668796236628.png"> </p><p>然后点击确定后，因为我们设置了地址栏信息，所以浏览器跳转到传智首页</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-BOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// window.alert(&quot;Hello BOM&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(&quot;Hello BOM Window&quot;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//confirm - 对话框 -- 确认: true , 取消: false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var flag = confirm(&quot;您确认删除该记录吗?&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(flag);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定时器 - setInterval -- 周期性的执行某一个函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var i = 0;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// setInterval(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     i++;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     console.log(&quot;定时器执行了&quot;+i+&quot;次&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,2000);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定时器 - setTimeout -- 延迟指定时间执行一次 </span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(&quot;JS&quot;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;,3000);</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//location</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">alert</span>(location.<span class="property">href</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    location.<span class="property">href</span> = <span class="string">&quot;https://www.itcast.cn&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-3-DOM对象"><a href="#1-5-3-DOM对象" class="headerlink" title="1.5.3 DOM对象"></a>1.5.3 DOM对象</h3><h4 id="1-5-3-1-DOM介绍"><a href="#1-5-3-1-DOM介绍" class="headerlink" title="1.5.3.1 DOM介绍"></a>1.5.3.1 DOM介绍</h4><p>DOM：Document Object Model 文档对象模型。也就是 JavaScript 将 HTML 文档的各个组成部分封装为对象。</p><p>DOM 其实我们并不陌生，之前在学习 XML 就接触过，只不过 XML 文档中的标签需要我们写代码解析，而 HTML 文档是浏览器解析。封装的对象分为</p><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>如下图，左边是 HTML 文档内容，右边是 DOM 树</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668796698067.png"> </p><p>那么我们学习DOM技术有什么用呢？主要作用如下：</p><ul><li>改变 HTML 元素的内容</li><li>改变 HTML 元素的样式（CSS）</li><li>对 HTML DOM 事件作出反应</li><li>添加和删除 HTML 元素</li></ul><p>总而达到动态改变页面效果目的，具体我们可以查看代码中提供的06. JS-对象-DOM-演示.html来体会DOM的效果。</p><h4 id="1-5-3-2-获取DOM对象"><a href="#1-5-3-2-获取DOM对象" class="headerlink" title="1.5.3.2 获取DOM对象"></a>1.5.3.2 获取DOM对象</h4><p>我们知道DOM的作用是通过修改HTML元素的内容和样式等来实现页面的各种动态效果，但是我们要操作DOM对象的前提是先获取元素对象，然后才能操作。所以学习DOM,主要的核心就是学习如下2点：</p><ul><li>如何获取DOM中的元素对象（Element对象 ，也就是标签）</li><li>如何操作Element对象的属性,也就是标签的属性。</li></ul><p>接下来我们先来学习如何获取DOM中的元素对象。</p><p>HTML中的Element对象可以通过Document对象获取，而Document对象是通过window对象获取的。document对象提供的用于获取Element元素对象的api如下表所示：</p><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>document.getElementById()</td><td>根据id属性值获取，返回单个Element对象</td></tr><tr><td>document.getElementsByTagName()</td><td>根据标签名称获取，返回Element对象数组</td></tr><tr><td>document.getElementsByName()</td><td>根据name属性值获取，返回Element对象数组</td></tr><tr><td>document.getElementsByClassName()</td><td>根据class属性值获取，返回Element对象数组</td></tr></tbody></table><p>接下来我们通过VS Code中创建名为07. JS-对象-DOM-获取元素.html的文件来演示上述api，首先在准备如下页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>document.getElementById()： 根据标签的id属性获取标签对象，id是唯一的，所以获取到是单个标签对象。</p><p>添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1. 获取Element元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.1 获取元素-根据ID获取</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"> <span class="title function_">alert</span>(img);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开，效果如图所示：从弹出的结果能够看出，这是一个图片标签对象</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668798266255.png"> </p></li><li><p>document.getElementsByTagName() :  根据标签的名字获取标签对象，同名的标签有很多，所以返回值是数组。</p><p>添加如下代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.2 获取元素-根据标签获取 - div</span></span><br><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(divs[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器输出2次如下所示的弹框</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668799227223.png"> </p></li><li><p>document.getElementsByName() ：根据标签的name的属性值获取标签对象，name属性值可以重复，所以返回值是一个数组。</p><p>添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.3 获取元素-根据name属性获取</span></span><br><span class="line"><span class="keyword">var</span> ins = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hobby&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ins.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(ins[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器会有3次如下图所示的弹框：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668799393592.png">  </p></li><li><p>document.getElementsByClassName() : 根据标签的class属性值获取标签对象，class属性值也可以重复，返回值是数组。</p><p>添加如下图所示的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.4 获取元素-根据class属性获取</span></span><br><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">     <span class="title function_">alert</span>(divs[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器会弹框2次，都是div标签对象</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668799564602.png"> </p></li><li><p>操作属性</p><p>那么获取到标签了，我们如何操作标签的属性呢？通过查询文档资料，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668800047162.png"> </p><p>得出我们可以通过div标签对象的innerHTML属性来修改标签的内容。此时我们想把页面中的<strong>传智教育替换成传智教育666</strong>，所以要获取2个div中的第一个，所以可以通过下标0获取数组中的第一个div，注释之前的代码，编写如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> div1 = divs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">div1.<span class="property">innerHTML</span> = <span class="string">&quot;传智教育666&quot;</span>;</span><br></pre></td></tr></table></figure><p>浏览器刷新页面，展示效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668800387791.png"> </p><p>发现页面内容变成了传智教育666</p></li></ul><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-DOM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 获取Element元素</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.1 获取元素-根据ID获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var img = document.getElementById(&#x27;h1&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// alert(img);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.2 获取元素-根据标签获取 - div</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var divs = document.getElementsByTagName(&#x27;div&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (let i = 0; i &lt; divs.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(divs[i]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.3 获取元素-根据name属性获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var ins = document.getElementsByName(&#x27;hobby&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (let i = 0; i &lt; ins.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(ins[i]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.4 获取元素-根据class属性获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var divs = document.getElementsByClassName(&#x27;cls&#x27;);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (let i = 0; i &lt; divs.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     alert(divs[i]);</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 查询参考手册, 属性、方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cls&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div1 = divs[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    div1.<span class="property">innerHTML</span> = <span class="string">&quot;传智教育666&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-4-案例"><a href="#1-5-4-案例" class="headerlink" title="1.5.4 案例"></a>1.5.4 案例</h3><h4 id="1-5-4-1-需求说明"><a href="#1-5-4-1-需求说明" class="headerlink" title="1.5.4.1 需求说明"></a>1.5.4.1 需求说明</h4><p>鲁迅说的好，光说不练假把式,光练不说傻把式。所以接下来我们需要通过案例来加强对于上述DOM知识的掌握。需求如下3个：</p><ul><li>点亮灯泡</li><li>将所有的div标签的标签体内容后面加上：very good</li><li>使所有的复选框呈现被选中的状态</li></ul><p>效果如下所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668800646200.png"> </p><h4 id="1-5-4-2-资料准备"><a href="#1-5-4-2-资料准备" class="headerlink" title="1.5.4.2 资料准备"></a>1.5.4.2 资料准备</h4><p>在JS目录下，也就是用于存放html文件的同级创建img文件下，然后将<code>资料/图片素材</code>中提供的2张图片拷贝到img文件夹中，最终整体结果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668801302139.png"> </p><p>在VS Code中创建名为08. JS-对象-DOM-案例.html的文件，然后准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-DOM-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开此时效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668800839720.png"> </p><h4 id="1-5-4-3-需求1"><a href="#1-5-4-3-需求1" class="headerlink" title="1.5.4.3 需求1"></a>1.5.4.3 需求1</h4><ul><li><p>需求</p><p>点亮灯泡</p></li><li><p>分析</p><p>此时我们需要把灯泡点亮，其实就是换一张图片。那么我们需要切换图片，就需要操作图片的src属性。要操作图片的src属性，就需要先来获取img标签对象。</p></li><li><p>步骤</p><ul><li>首先获取img标签对象</li><li>然后修改img标签对象的src属性值，进行图片的切换</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 点亮灯泡 : src 属性值</span></span><br><span class="line"><span class="comment">//首先获取img标签对象</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span><br><span class="line"><span class="comment">//然后修改img标签对象的src属性值，进行图片的切换</span></span><br><span class="line">img.<span class="property">src</span> = <span class="string">&quot;img/on.gif&quot;</span>;</span><br></pre></td></tr></table></figure></li></ul><p>浏览器打开，效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668801541168.png"> </p><h4 id="1-5-4-4-需求2"><a href="#1-5-4-4-需求2" class="headerlink" title="1.5.4.4 需求2"></a>1.5.4.4 需求2</h4><ul><li><p>需求</p><p>将所有的div标签的标签体内容后面加上：very good  </p><p>并且very good是红色字体</p></li><li><p>分析</p><p>我们需要在原有内容后面追加红色的very good.所以我们首先需要获取原有内容，然后再进行内容的追加。但是如何保证very good是红色的呢？所以我们可以通过之前html中学过的&lt;font&gt;标签和属性来完整。如何进行内容的替换呢？之前我们学习过innerHTML属性。需要替换2个div的内容，所以我们需要获取2个div，并且遍历进行替换。</p></li><li><p>步骤</p><ul><li>通过标签的名字div获取所有的div标签</li><li>遍历所有的div标签</li><li>获取div标签的原有内容，然后追加&lt;font color&#x3D;’red’&gt;very good&lt;&#x2F;font&gt;,并且替原内容</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 将所有div标签的内容后面加上: very good (红色字体) -- &lt;font color=&#x27;red&#x27;&gt;&lt;/font&gt;</span></span><br><span class="line"><span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> div = divs[i];</span><br><span class="line">    div.<span class="property">innerHTML</span> += <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;very good&lt;/font&gt;&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>浏览器打开效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668801991368.png"> </p><h4 id="1-5-4-5-需求3"><a href="#1-5-4-5-需求3" class="headerlink" title="1.5.4.5 需求3"></a>1.5.4.5 需求3</h4><ul><li><p>需求</p><p>使所有的复选框呈现被选中的状态</p></li><li><p>分析</p><p>要让复选框处于选中状态，那么什么属性或者方法可以使复选框选中？可以查询资料得出checkbox标签对象的checked属性设置为true，可以改变checkbox为选中状态。那么需要设置所有的checkbox，那么我们需要获取所有的checkbox并且遍历</p></li><li><p>步骤</p><ul><li>可以通过name属性值获取所有的checkbox标签</li><li>遍历所有的checkbox标签，</li><li>设置每个checkbox标签的</li></ul></li><li><p>代码实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// //3. 使所有的复选框呈现选中状态</span></span><br><span class="line"><span class="keyword">var</span> ins = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hobby&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ins.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">const</span> check = ins[i];</span><br><span class="line">check.<span class="property">checked</span> = <span class="literal">true</span>;<span class="comment">//选中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>浏览器刷新，效果如图所示:</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668802645347.png"> </p><h4 id="1-5-4-6-完整代码"><a href="#1-5-4-6-完整代码" class="headerlink" title="1.5.4.6 完整代码"></a>1.5.4.6 完整代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-对象-DOM-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>传智教育<span class="tag">&lt;/<span class="name">div</span>&gt;</span>   <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>黑马程序员<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 点亮灯泡 : src 属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    img.<span class="property">src</span> = <span class="string">&quot;img/on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 将所有div标签的内容后面加上: very good (红色字体) -- &lt;font color=&#x27;red&#x27;&gt;&lt;/font&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; divs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> div = divs[i];</span></span><br><span class="line"><span class="language-javascript">        div.<span class="property">innerHTML</span> += <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;very good&lt;/font&gt;&quot;</span>; </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// //3. 使所有的复选框呈现选中状态</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ins = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;hobby&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ins.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> check = ins[i];</span></span><br><span class="line"><span class="language-javascript">        check.<span class="property">checked</span> = <span class="literal">true</span>;<span class="comment">//选中</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-6-JavaScript事件"><a href="#1-6-JavaScript事件" class="headerlink" title="1.6 JavaScript事件"></a>1.6 JavaScript事件</h2><h3 id="1-6-1-事件介绍"><a href="#1-6-1-事件介绍" class="headerlink" title="1.6.1 事件介绍"></a>1.6.1 事件介绍</h3><p>如下图所示的百度注册页面，当我们用户输入完内容，百度可以自动的提示我们用户名已经存在还是可以使用。那么百度是怎么知道我们用户名输入完了呢？这就需要用到JavaScript中的事件了。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668802830796.png"> </p><p>什么是事件呢？HTML事件是发生在HTML元素上的 “事情”，例如：</p><ul><li>按钮被点击</li><li>鼠标移到元素上</li><li>输入框失去焦点</li><li>……..</li></ul><p>而我们可以给这些事件绑定函数，当事件触发时，可以自动的完成对应的功能。这就是事件监听。例如：对于我们所说的百度注册页面，我们给用户名输入框的失去焦点事件绑定函数，当我们用户输入完内容，在标签外点击了鼠标，对于用户名输入框来说，失去焦点，然后执行绑定的函数，函数进行用户名内容的校验等操作。JavaScript事件是js非常重要的一部分，接下来我们进行事件的学习。那么我们对于JavaScript事件需要学习哪些内容呢？我们得知道有哪些常用事件，然后我们得学会如何给事件绑定函数。所以主要围绕2点来学习：</p><ul><li>事件绑定</li><li>常用事件</li></ul><h3 id="1-6-2-事件绑定"><a href="#1-6-2-事件绑定" class="headerlink" title="1.6.2 事件绑定"></a>1.6.2 事件绑定</h3><p>JavaScript对于事件的绑定提供了2种方式：</p><ul><li><p>方式1：通过html标签中的事件属性进行绑定</p><p>例如一个按钮，我们对于按钮可以绑定单机事件，可以借助标签的onclick属性，属性值指向一个函数。</p><p>在VS Code中创建名为09. JS-事件-事件绑定.html，添加如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>很明显没有on函数，所以我们需要创建该函数，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开，然后点击按钮，弹框如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668804375833.png"></p></li><li><p>方式2：通过DOM中Element元素的事件属性进行绑定</p><p>依据我们学习过得DOM的知识点，我们知道html中的标签被加载成element对象，所以我们也可以通过element对象的属性来操作标签的属性。此时我们再次添加一个按钮，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们可以先通过id属性获取按钮对象，然后操作对象的onclick属性来绑定事件，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;按钮2被点击了...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器刷新页面，点击第二个按钮，弹框如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668804696373.png"> </p><p><strong>需要注意的是：事件绑定的函数，只有在事件被触发时，函数才会被调用。</strong></p><p>整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-事件-事件绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;事件绑定2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;按钮1被点击了...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&quot;按钮2被点击了...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-6-3-常见事件"><a href="#1-6-3-常见事件" class="headerlink" title="1.6.3 常见事件"></a>1.6.3 常见事件</h3><p>上面案例中使用到了 <code>onclick</code> 事件属性，那都有哪些事件属性供我们使用呢？下面就给大家列举一些比较常用的事件属性</p><table><thead><tr><th>事件属性名</th><th>说明</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标单击事件</td></tr><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onfocus</td><td>元素获得焦点</td></tr><tr><td>onload</td><td>某个页面或图像被完成加载</td></tr><tr><td>onsubmit</td><td>当表单提交时触发该事件</td></tr><tr><td>onmouseover</td><td>鼠标被移到某元素之上</td></tr><tr><td>onmouseout</td><td>鼠标从某元素移开</td></tr></tbody></table><p>在代码中提供了10. JS-事件-常见事件.html的文件，我们可以通过浏览器打开来观察几个常用事件的具体效果：</p><ul><li><p>onfocus:获取焦点事件，鼠标点击输入框，输入框中光标一闪一闪的，就是输入框获取焦点了</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668805346551.png"> </p></li><li><p>onblur:失去焦点事件，前提是输入框获取焦点的状态下，在输入框之外的地方点击，光标从输入框中消失了，这就是失去焦点。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668805498416.png"></p></li></ul><p>其他事件的效果，同学们可以通过提供好的代码去演示，亲身体会事件在什么时候触发。</p><h3 id="1-6-4-案例"><a href="#1-6-4-案例" class="headerlink" title="1.6.4 案例"></a>1.6.4 案例</h3><h4 id="1-6-4-1-需求说明"><a href="#1-6-4-1-需求说明" class="headerlink" title="1.6.4.1 需求说明"></a>1.6.4.1 需求说明</h4><p>接下来我们通过案例来加强所学js知识点的掌握。</p><p>需求如下3个：</p><ol><li>点击 “点亮”按钮 点亮灯泡，点击“熄灭”按钮 熄灭灯泡</li><li>输入框鼠标聚焦后，展示小写；鼠标离焦后，展示大写。</li><li>点击 “全选”按钮使所有的复选框呈现被选中的状态，点击 “反选”按钮使所有的复选框呈现取消勾选的状态。</li></ol><p>效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668806049390.png"> </p><h4 id="1-6-4-2-资料准备"><a href="#1-6-4-2-资料准备" class="headerlink" title="1.6.4.2 资料准备"></a>1.6.4.2 资料准备</h4><p>在VS  Code中创建名为11. JS-事件-案例.html的文件，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-事件-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点亮&quot;</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;熄灭&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ITCAST&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> &gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668806362090.png"> </p><h4 id="1-6-4-3-需求1"><a href="#1-6-4-3-需求1" class="headerlink" title="1.6.4.3 需求1"></a>1.6.4.3 需求1</h4><ul><li><p>需求：</p><p>点击 “点亮”按钮 点亮灯泡，点击“熄灭”按钮 熄灭灯泡</p></li><li><p>分析：</p><p>点击按钮的时候触发，所以我们需要绑定单击事件。不管是点亮还是熄灭，都是图片的变化，所以我们需要修改图片。但是修改图片我们还需要先获取标签图片标签对象。</p></li><li><p>步骤：</p><ul><li>首先给点亮按钮和熄灭按钮都绑定单击事件。分别绑定函数on()和off（）</li><li>然后在js中定义on()和off()函数</li><li>on()函数中，通过id获取img标签对象，然后通过img标签对象的src属性切换点亮的图片</li><li>off()函数中，通过id获取img标签对象，然后通过img标签对象的src属性切换熄灭的图片</li></ul></li><li><p>代码实现：</p><p>事件绑定</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点亮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;熄灭&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;off()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>on()和off()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 点击 &quot;点亮&quot; 按钮, 点亮灯泡; 点击 &quot;熄灭&quot; 按钮, 熄灭灯泡; -- onclick</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//a. 获取img元素对象</span></span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span><br><span class="line">    <span class="comment">//b. 设置src属性</span></span><br><span class="line">    img.<span class="property">src</span> = <span class="string">&quot;img/on.gif&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">off</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//a. 获取img元素对象</span></span><br><span class="line">    <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span><br><span class="line">    <span class="comment">//b. 设置src属性</span></span><br><span class="line">    img.<span class="property">src</span> = <span class="string">&quot;img/off.gif&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-6-4-4-需求2"><a href="#1-6-4-4-需求2" class="headerlink" title="1.6.4.4 需求2"></a>1.6.4.4 需求2</h4><ul><li><p>需求：</p><p>输入框鼠标聚焦后，展示小写；鼠标离焦后，展示大写。</p></li><li><p>分析：</p><p>聚焦和失焦的时候完成功能，所以我们需要给input标签绑定onfocus和onblur事件；我们要切换大小写，那么我们可定要获取原本输入框的内容，通过查询资料，需要使用input标签对象的value属性，然后进行大小写切换；切换完成我们需要重新填入，所以还是通过value属性来设置input标签输入框的内容</p></li><li><p>步骤:</p><ul><li>给input标签的onfocus和onblur事件分别绑定lower()和upper()函数</li><li>然后在js中定义lower()和upper()函数</li><li>对于lower()函数，先通过id获取输入框对象，然后通过输入框的value属性来设置内容，内容的话可以通过字符串的toLowerCase()函数来进行小写转换</li><li>对于upper()函数，先通过id获取输入框对象，然后通过输入框的value属性来设置内容，内容的话可以通过字符串的toupperCase()函数来进行大写转换</li></ul></li><li><p>代码实现：、</p><p>事件绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;lower()&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;upper()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>lower()和upper()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2. 输入框聚焦后, 展示小写; 输入框离焦后, 展示大写; -- onfocus , onblur</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">lower</span>(<span class="params"></span>)&#123;<span class="comment">//小写</span></span><br><span class="line">    <span class="comment">//a. 获取输入框元素对象</span></span><br><span class="line">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//b. 将值转为小写</span></span><br><span class="line">    input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">upper</span>(<span class="params"></span>)&#123;<span class="comment">//大写</span></span><br><span class="line">    <span class="comment">//a. 获取输入框元素对象</span></span><br><span class="line">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//b. 将值转为大写</span></span><br><span class="line">    input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-6-4-5-需求3"><a href="#1-6-4-5-需求3" class="headerlink" title="1.6.4.5 需求3"></a>1.6.4.5 需求3</h4><ul><li><p>需求：</p><p>点击 “全选”按钮使所有的复选框呈现被选中的状态，点击 “反选”按钮使所有的复选框呈现取消勾选的状态。</p></li><li><p>分析：</p><p>点击按钮完成功能，所以我们需要给2个按钮绑定单击事件；我们需要设置所有复选框的状态，通过我们之前的案例，我们知道，我们需要获取所有的复选框，然后遍历，可以通过设置checked属性为true，来设置复选框为选中；那么反之，设置checked属性为false，来设置复选框为未选中。</p></li><li><p>步骤：</p><ul><li>给全选和反选按钮绑定单击事件，分别绑定函数checkAll()和reverse()</li><li>在js中定义checkAll()和reverse()函数</li><li>对于checkAll()函数，首先通过name属性值为hobby来获取所有的复选框，然后遍历复选框，设置每个复选框的checked属性为true即可</li><li>对于reverse()函数，首先通过name属性值为hobby来获取所有的复选框，然后遍历复选框，设置每个复选框的checked属性为false即可</li></ul></li><li><p>代码实现：</p><p>事件绑定：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll()&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reverse()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>checkAll()和reverse()函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//3. 点击 &quot;全选&quot; 按钮使所有的复选框呈现选中状态 ; 点击 &quot;反选&quot; 按钮使所有的复选框呈现取消勾选的状态 ; </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//a. 获取所有复选框元素对象</span></span><br><span class="line">    <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//b. 设置选中状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = hobbys[i];</span><br><span class="line">        element.<span class="property">checked</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//a. 获取所有复选框元素对象</span></span><br><span class="line">    <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//b. 设置未选中状态</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> element = hobbys[i];</span><br><span class="line">        element.<span class="property">checked</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="1-6-4-6-完整代码"><a href="#1-6-4-6-完整代码" class="headerlink" title="1.6.4.6 完整代码"></a>1.6.4.6 完整代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS-事件-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;light&quot;</span> <span class="attr">src</span>=<span class="string">&quot;img/off.gif&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点亮&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;on()&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;熄灭&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;off()&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ITCAST&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;lower()&quot;</span> <span class="attr">onblur</span>=<span class="string">&quot;upper()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 电影</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 旅游</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span> 游戏</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;全选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;checkAll()&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;反选&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;reverse()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 点击 &quot;点亮&quot; 按钮, 点亮灯泡; 点击 &quot;熄灭&quot; 按钮, 熄灭灯泡; -- onclick</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">on</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//a. 获取img元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//b. 设置src属性</span></span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">src</span> = <span class="string">&quot;img/on.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">off</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//a. 获取img元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;light&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//b. 设置src属性</span></span></span><br><span class="line"><span class="language-javascript">        img.<span class="property">src</span> = <span class="string">&quot;img/off.gif&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2. 输入框聚焦后, 展示小写; 输入框离焦后, 展示大写; -- onfocus , onblur</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">lower</span>(<span class="params"></span>)&#123;<span class="comment">//小写</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//a. 获取输入框元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//b. 将值转为小写</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toLowerCase</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">upper</span>(<span class="params"></span>)&#123;<span class="comment">//大写</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//a. 获取输入框元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;name&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//b. 将值转为大写</span></span></span><br><span class="line"><span class="language-javascript">        input.<span class="property">value</span> = input.<span class="property">value</span>.<span class="title function_">toUpperCase</span>();</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//3. 点击 &quot;全选&quot; 按钮使所有的复选框呈现选中状态 ; 点击 &quot;反选&quot; 按钮使所有的复选框呈现取消勾选的状态 ; -- onclick</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">checkAll</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//a. 获取所有复选框元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//b. 设置选中状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> element = hobbys[i];</span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">reverse</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//a. 获取所有复选框元素对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> hobbys = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;hobby&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//b. 设置未选中状态</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; hobbys.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> element = hobbys[i];</span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">checked</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="2-Vue"><a href="#2-Vue" class="headerlink" title="2 Vue"></a>2 Vue</h1><h2 id="2-1-Vue概述"><a href="#2-1-Vue概述" class="headerlink" title="2.1 Vue概述"></a>2.1 Vue概述</h2><p>通过我们学习的html+css+js已经能够开发美观的页面了，但是开发的效率还有待提高，那么如何提高呢？我们先来分析下页面的组成。一个完整的html页面包括了视图和数据，数据是通过请求 从后台获取的，那么意味着我们需要将后台获取到的数据呈现到页面上，很明显， 这就需要我们使用DOM操作。正因为这种开发流程，所以我们引入了一种叫做<strong>MVVM(Model-View-ViewModel)的前端开发思想</strong>，即让我们开发者更加关注数据，而非数据绑定到视图这种机械化的操作。那么具体什么是MVVM思想呢？</p><p>MVVM:其实是Model-View-ViewModel的缩写，有3个单词，具体释义如下：</p><ul><li>Model: 数据模型，特指前端中通过请求从后台获取的数据</li><li>View: 视图，用于展示数据的页面，可以理解成我们的html+css搭建的页面，但是没有数据</li><li>ViewModel: 数据绑定到视图，负责将数据（Model）通过JavaScript的DOM技术，将数据展示到视图（View）上</li></ul><p>如图所示就是MVVM开发思想的含义：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668857055058.png"> </p><p>基于上述的MVVM思想，其中的Model我们可以通过Ajax来发起请求从后台获取;对于View部分，我们将来会学习一款ElementUI框架来替代HTML+CSS来更加方便的搭建View;而今天我们要学习的就是侧重于ViewModel部分开发的vue前端框架，用来替代JavaScript的DOM操作，让数据展示到视图的代码开发变得更加的简单。可以简单到什么程度呢？可以参考下图对比：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668858213508.png"> </p><p>在更加复杂的dom操作中，vue只会变得更加的简单！在上述的代码中，我们看不到之前的DOM操作，因为vue全部帮我们封装好了。</p><p>接下来我们来介绍一下vue。</p><p>Vue.js（读音 &#x2F;vjuː&#x2F;, 类似于 <strong>view</strong>） 是一套构建用户界面的 <strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong>。</p><p>框架即是一个半成品软件，是一套可重用的、通用的、软件基础代码模型。基于框架进行开发，更加快捷、更加高效。</p><h2 id="2-2-快速入门"><a href="#2-2-快速入门" class="headerlink" title="2.2 快速入门"></a>2.2 快速入门</h2><p>接下来我们通过一个vue的快速入门案例，来体验一下vue。</p><p>第一步：在VS Code中创建名为12. Vue-快速入门.html的文件，并且在html文件同级创建js目录，将<strong>资料&#x2F;vue.js文件</strong>目录下得vue.js拷贝到js目录，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668858952627.png"> </p><p>第二步：然后编写&lt;script&gt;标签来引入vue.js文件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第三步：在js代码区域定义vue对象,代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在创建vue对象时，有几个常用的属性：</p><ul><li>el: 用来指定哪儿些标签受 Vue 管理。 该属性取值 <code>#app</code> 中的 <code>app</code> 需要是受管理的标签的id属性值</li><li>data: 用来定义数据模型</li><li>methods: 用来定义函数。这个我们在后面就会用到</li></ul><p>第四步：在html区域编写视图，其中&lt;!–swig￼126–&gt;是插值表达式，用来将vue对象中定义的model展示到页面上的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        \\&#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668859214102.png"> </p><p>整体代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Vue指令"><a href="#2-3-Vue指令" class="headerlink" title="2.3 Vue指令"></a>2.3 Vue指令</h2><p>在上述的快速入门中，我们发现了html中输入了一个没有学过的属性<code>v-model</code>，这个就是vue的<strong>指令</strong>。</p><p><strong>指令：</strong>HTML 标签上带有 v- 前缀的特殊属性，不同指令具有不同含义。例如：v-if，v-for…</p><p>在vue中，通过大量的指令来实现数据绑定到视图的，所以接下来我们需要学习vue的常用指令，如下表所示：</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr><tr><td>v-on</td><td>为HTML标签绑定事件</td></tr><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-else-if</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr><tr><td>v-for</td><td>列表渲染，遍历容器的元素或者对象的属性</td></tr></tbody></table><h3 id="2-3-1-v-bind和v-model"><a href="#2-3-1-v-bind和v-model" class="headerlink" title="2.3.1 v-bind和v-model"></a>2.3.1 v-bind和v-model</h3><p>我们首先来学习v-bind指令和v-model指令。</p><table><thead><tr><th><strong>指令</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>v-bind</td><td>为HTML标签绑定属性值，如设置  href , css样式等</td></tr><tr><td>v-model</td><td>在表单元素上创建双向数据绑定</td></tr></tbody></table><ul><li><p>v-bind:  为HTML标签绑定属性值，如设置  href , css样式等。当vue对象中的数据模型发生变化时，标签的属性值会随之发生变化。</p><p>接下来我们通过代码来演示。</p><p>首先我们在VS Code中创建名为13. Vue-指令-v-bind和v-model.html的文件，然后准备好如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-bind<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> &gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> &gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上述的代码中，我们需要给&lt;a&gt;标签的href属性赋值，并且值应该来自于vue对象的数据模型中的url变量。所以编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上述的代码中，v-bind指令是可以省略的，但是:不能省略，所以第二个超链接的代码编写如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开，2个超链接都可以点击，然后跳转到百度去！效果如图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668860425429.png"> </p><p><strong>注意：html属性前面有:表示采用的vue的属性绑定！</strong></p></li><li><p>v-model： 在表单元素上创建双向数据绑定。什么是双向？</p><ul><li>vue对象的data属性中的数据变化，视图展示会一起变化</li><li>视图数据发生变化，vue对象的data属性中的数据也会随着变化。</li></ul><p>data属性中数据变化，我们知道可以通过赋值来改变，但是视图数据为什么会发生变化呢？<strong>只有表单项标签！所以双向绑定一定是使用在表单项标签上的</strong>。编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器，我们修改表单项标签，发现vue对象data中的数据也发生了变化，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668861009068.png"> </p><p>通过上图我们发现，我们只是改变了表单数据，那么我们之前超链接的绑定的数据值也发生了变化，为什么？</p><p>就是因为我们双向绑定，在视图发生变化时，同时vue的data中的数据模型也会随着变化。那么这个在企业开发的应用场景是什么？</p><p><strong>双向绑定的作用：可以获取表单的数据的值，然后提交给服务器</strong></p><p>整体代码如下:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-bind<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">url</span>: <span class="string">&quot;https://www.baidu.com&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-3-2-v-on"><a href="#2-3-2-v-on" class="headerlink" title="2.3.2 v-on"></a>2.3.2 v-on</h3><p>接下来我们学习一下v-on指令。</p><p>v-on: 用来给html标签绑定事件的。<strong>需要注意的是如下2点</strong>：</p><ul><li><p>v-on语法给标签的事件绑定的函数，必须是vue对象种声明的函数</p></li><li><p>v-on语法绑定事件时，事件名相比较js中的事件名，没有on</p><p>例如：在js中，事件绑定demo函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onclick</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vue中，事件绑定demo函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:click</span>=<span class="string">&quot;demo()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>接下来我们通过代码演示。</p><p>首先在VS Code中创建名为14. Vue-指令-v-on.html的文件，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-on<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们需要在vue对象的methods属性中定义事件绑定时需要的handle()函数，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">           <span class="title function_">alert</span>(<span class="string">&quot;你点我了一下...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们给第一个按钮，通过v-on指令绑定单击事件，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样，v-on也存在简写方式，即v-on: 可以替换成@，所以第二个按钮绑定单击事件的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-on<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;点我一下&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handle()&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">handle</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;你点我了一下...&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-3-v-if和v-show"><a href="#2-3-3-v-if和v-show" class="headerlink" title="2.3.3 v-if和v-show"></a>2.3.3 v-if和v-show</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>v-if</td><td>条件性的渲染某元素，判定为true时渲染,否则不渲染</td></tr><tr><td>v-if-else</td><td></td></tr><tr><td>v-else</td><td></td></tr><tr><td>v-show</td><td>根据条件展示某元素，区别在于切换的是display属性的值</td></tr></tbody></table><p>我们直接通过代码来演示效果。在VS Code中创建名为15. Vue-指令-v-if和v-show.html的文件，提前准备好如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-if与v-show<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中采用了双向绑定到age属性，意味着我们可以通过表单输入框来改变age的值。</p><p>需求是当我们改变年龄时，需要动态判断年龄的值，呈现对应的年龄的文字描述。年轻人，我们需要使用条件判断<code>age&lt;=35</code>,中年人我们需要使用条件判断<code>age&gt;35 &amp;&amp; age&lt;60</code>,其他情况是老年人。所以通过v-if指令编写如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开测试效果如下图：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668864281939.png"> </p><p>v-show和v-if的作用效果是一样的，只是原理不一样。复制上述html代码，修改v-if指令为v-show指令，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 60&quot;</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器，展示效果如下所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668864558419.png"> </p><p>可以发现，浏览器呈现的效果是一样的，但是浏览器中html源码不一样。v-if指令，不满足条件的标签代码直接没了，而v-show指令中，不满足条件的代码依然存在，只是添加了css样式来控制标签不去显示。</p><p>完整代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-if与v-show<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;age&quot;</span>&gt;</span>经判定,为:</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &lt;= 35&quot;</span>&gt;</span>年轻人(35及以下)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt; 35 &amp;&amp; age &lt; 60&quot;</span>&gt;</span>中年人(35-60)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 60&quot;</span>&gt;</span>老年人(60及以上)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">age</span>: <span class="number">20</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-4-v-for"><a href="#2-3-4-v-for" class="headerlink" title="2.3.4 v-for"></a>2.3.4 v-for</h3><p>v-for: 从名字我们就能看出，这个指令是用来遍历的。其语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">v-for</span>=<span class="string">&quot;变量名 in 集合模型数据&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;变量名&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要注意的是：需要循环那个标签，v-for 指令就写在那个标签上。</p><p>有时我们遍历时需要使用索引，那么v-for指令遍历的语法格式如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">标签</span> <span class="attr">v-for</span>=<span class="string">&quot;(变量名,索引变量) in 集合模型数据&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--索引变量是从0开始，所以要表示序号的话，需要手动的加1--&gt;</span></span><br><span class="line">   &#123;&#123;索引变量 + 1&#125;&#125; &#123;&#123;变量名&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">标签</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来，我们再VS Code中创建名为16. Vue-指令-v-for.html的文件编写代码演示，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-for<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="attr">addrs</span>:[<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;西安&quot;</span>, <span class="string">&quot;成都&quot;</span>, <span class="string">&quot;深圳&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后分别编写2种遍历语法，来遍历数组，展示数据，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;addr in addrs&quot;</span>&gt;</span>&#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;(addr,index) in addrs&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125; : &#123;&#123;addr&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开，呈现如下效果：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668866805981.png"> </p><h3 id="2-3-5-案例"><a href="#2-3-5-案例" class="headerlink" title="2.3.5 案例"></a>2.3.5 案例</h3><ul><li><p>需求：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668868100828.png"> </p><p>如上图所示，我们提供好了数据模型，users是数组集合，提供了多个用户信息。然后我们需要将数据以表格的形式，展示到页面上，其中，性别需要转换成中文男女，等级需要将分数数值转换成对应的等级。</p><ul><li><p>分析：</p><ul><li>首先我们肯定需要遍历数组的，所以需要使用<code>v-for</code>标签；然后我们每一条数据对应一行，所以<code>v-for</code>需要添加在<code>&lt;tr&gt;</code>标签上；其次我们需要将编号，所以需要使用索引的遍历语法；然后我们要将数据展示到表格的单元格中，所以我们需要使用插值表达式 <code>&#123;&#123; &#125;&#125;</code>；最后，我们需要转换内容，所以我们需要使用<code>v-if</code>指令，进行条件判断和内容的转换。</li></ul></li><li><p>步骤：</p><ol><li><p>使用<code>v-for</code>的带索引方式添加到表格的<code>&lt;tr&gt;</code>标签上。</p></li><li><p>使用插值表达式 <code>&#123;&#123; &#125;&#125;</code>展示内容到单元格。</p></li><li><p>使用索引+1来作为编号。</p></li><li><p>使用<code>v-if</code>来判断，改变性别和等级这2列的值。</p></li></ol></li></ul></li><li><p>代码实现：</p><p>首先创建名为17. Vue-指令-案例.html的文件，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>等级<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">78</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Rose&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">86</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">26</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Tony&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">52</span></span></span><br><span class="line"><span class="language-javascript">            &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>&lt;tr&gt;</code>上添加<code>v-for</code>进行遍历，以及通过插值表达式<code>&#123;&#123;&#125;&#125;</code>和<code>v-if</code>指令来填充内容和改变内容，其代码如下: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in users&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender == 1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender == 2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.score&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.score &gt;= 85&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;user.score &gt;= 60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>其完整代码如下: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60%&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>等级<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in users&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index + 1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender == 1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender == 2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;user.score&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-if</span>=<span class="string">&quot;user.score &gt;= 85&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-else-if</span>=<span class="string">&quot;user.score &gt;= 60&quot;</span>&gt;</span>及格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span> <span class="attr">v-else</span>&gt;</span>不及格<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">users</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Tom&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">20</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">78</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Rose&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">86</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Jerry&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">26</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">90</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;Tony&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">age</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">gender</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">52</span></span></span><br><span class="line"><span class="language-javascript">            &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-4-生命周期"><a href="#2-4-生命周期" class="headerlink" title="2.4 生命周期"></a>2.4 生命周期</h2><p>vue的生命周期：指的是vue对象从创建到销毁的过程。vue的生命周期包含8个阶段：每触发一个生命周期事件，会自动执行一个生命周期方法，这些生命周期方法也被称为钩子方法。其完整的生命周期如下图所示：</p><table><thead><tr><th>状态</th><th>阶段周期</th></tr></thead><tbody><tr><td>beforeCreate</td><td>创建前</td></tr><tr><td>created</td><td>创建后</td></tr><tr><td>beforeMount</td><td>挂载前</td></tr><tr><td>mounted</td><td>挂载完成</td></tr><tr><td>beforeUpdate</td><td>更新前</td></tr><tr><td>updated</td><td>更新后</td></tr><tr><td>beforeDestroy</td><td>销毁前</td></tr><tr><td>destroyed</td><td>销毁后</td></tr></tbody></table><p>下图是 Vue 官网提供的从创建 Vue 到效果 Vue 对象的整个过程及各个阶段对应的钩子函数：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668867134683.png"></p><p>其中我们需要重点关注的是**mounted,**其他的我们了解即可。</p><p>mounted：挂载完成，Vue初始化成功，HTML页面渲染成功。<strong>以后我们一般用于页面初始化自动的ajax请求后台数据</strong></p><p>我们在VS Code中创建名为18. Vue-生命周期.html的文件编写代码来演示效果，提前准备如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-指令-v-for<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们编写mounted声明周期的钩子函数，与methods同级，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//定义Vue对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>, <span class="comment">//vue接管区域</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">           </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        mounted () &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;vue挂载完成,发送请求到服务端&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开，运行结果如下：我们发现，自动打印了这句话，因为页面加载完成，vue对象创建并且完成了挂在，此时自动触发mounted所绑定的钩子函数，然后自动执行，弹框。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668867458156.png"> </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javaweb-01</title>
      <link href="/2023/07/22/day01-HTML-CSS/"/>
      <url>/2023/07/22/day01-HTML-CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="1-前端开发介绍"><a href="#1-前端开发介绍" class="headerlink" title="1. 前端开发介绍"></a>1. 前端开发介绍</h1><p>我们介绍Web网站工作流程的时候提到，前端开发，主要的职责就是将数据以好看的样式呈现出来。说白了，就是开发网页程序，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309163858689.png">  </p><p>那在讲解web前端开发之前，我们先需要对web前端开发有一个整体的认知。主要明确一下三个问题：</p><p>1). 网页有哪些部分组成 ?</p><p>文字、图片、音频、视频、超链接、表格等等。</p><p>2). 我们看到的网页，背后的本质是什么 ?</p><p>程序员写的前端代码 (备注：在前后端分离的开发模式中，)</p><p>3). 前端的代码是如何转换成用户眼中的网页的 ?</p><p>通过浏览器转化（解析和渲染）成用户看到的网页</p><p>浏览器中对代码进行解析和渲染的部分，称为 <strong>浏览器内核</strong></p><p>而市面上的浏览器非常多，比如：IE、火狐Firefox、苹果safari、欧朋、谷歌Chrome、QQ浏览器、360浏览器等等。 而且我们电脑上安装的浏览器可能都不止一个，有很多。 </p><p>但是呢，需要大家注意的是，不同的浏览器，内核不同，对于相同的前端代码解析的效果也会存在差异。 那这就会造成一个问题，同一段前端程序，不同浏览器展示出来的效果是不一样的，这个用户体验就很差了。而我们想达到的效果则是，即使用户使用的是不同的浏览器，解析同一段前端代码，最终展示出来的效果都是相同的。</p><p>要想达成这样一个目标，我们就需要定义一个统一的标准，然后让各大浏览器厂商都参照这个标准来实现即可。 而这套标准呢，其实早都已经定义好了，那就是我们接下来，要介绍的web标准。</p><p><strong>Web标准</strong>也称为<strong>网页标准</strong>，由一系列的标准组成，大部分由W3C（ World Wide Web Consortium，万维网联盟）负责制定。由三个组成部分：</p><ul><li><p>HTML：负责网页的结构（页面元素和内容）。</p></li><li><p>CSS：负责网页的表现（页面元素的外观、位置等页面样式，如：颜色、大小等）。</p></li><li><p>JavaScript：负责网页的行为（交互效果）。</p></li></ul><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309170412197.png" alt="" style="zoom:67%;" /> <p>当然了，随着技术的发展，我们为了更加快速的开发，现在也出现了很多前端开发的高级技术。例如：vue、elementui、Axios等等。</p><p>那这些内容呢，也是我们前端三天课程中要讲解的内容。 前端的3天课程安排如下：</p><ul><li>HTML &amp; CSS</li><li>JavaScript &amp; Vue</li><li>Ajax &amp; Axios &amp; ElementUI &amp; Nginx</li></ul><h1 id="2-HTML-CSS"><a href="#2-HTML-CSS" class="headerlink" title="2. HTML &amp; CSS"></a>2. HTML &amp; CSS</h1><p>1). 什么是HTML ?</p><blockquote><p>**HTML: **HyperText Markup Language，超文本标记语言。</p><ul><li><p>超文本：超越了文本的限制，比普通文本更强大。除了文字信息，还可以定义图片、音频、视频等内容。</p></li><li><p>标记语言：由标签构成的语言</p><ul><li>HTML标签都是预定义好的。例如：使用 <h1> 标签展示标题，使用<a>展示超链接，使用<img>展示图片，<video>展示视频。</li><li>HTML代码直接在浏览器中运行，HTML标签由浏览器解析。</li></ul></li></ul></blockquote><p>下面展示的是一段html代码经过浏览器解析，呈现的效果如右图所示：</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309172534138.png" alt="" style="zoom:80%;" />   <p>​</p><p>2). 什么是CSS ?</p><blockquote><p><strong>CSS:</strong> Cascading Style Sheet，层叠样式表，用于控制页面的样式（表现）。</p></blockquote><p>下面展示的是一段 html代码 及 CSS样式 经过浏览器解析，呈现的效果如右图所示：</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309172634388.png" alt="" style="zoom: 80%;" /> <p>​</p><h2 id="2-1-HTML快速入门"><a href="#2-1-HTML快速入门" class="headerlink" title="2.1 HTML快速入门"></a>2.1 HTML快速入门</h2><h3 id="2-1-1-操作"><a href="#2-1-1-操作" class="headerlink" title="2.1.1 操作"></a>2.1.1 操作</h3><p>第一步:创建一个名为HTML的文件夹，然后找到课程资料中的 1.jpg 文件放到该目录下，此时HTML文件夹中内容如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668011569718.png"> </p><p>第二步：创建一个文本文件，然后修改文件名为hello.html,注意文件的后缀是.html,如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668012052140.png"> </p><p>第三步：选中文件，鼠标右击，选择使用记事本打开文件，并且编写前端代码</p><p>首先html有固定的基本结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 快速入门<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello HTML<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中&lt;html&gt;是根标签，&lt;head&gt;和&lt;body&gt;是子标签，&lt;head&gt;中的字标签&lt;title&gt;是用来定义网页的标题的，里面定义的内容会显示在浏览器网页的标题位置。</p><p>而 &lt;body&gt; 中编写的内容，就网页中显示的核心内容。</p><p>第四步：然后选中文件，鼠标右击，选择使用浏览器打开文件，浏览器呈现效果如下:</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309173355794.png" alt="image-20230309173355794" style="zoom:67%;" />  <h3 id="2-1-2-总结"><a href="#2-1-2-总结" class="headerlink" title="2.1.2 总结"></a>2.1.2 总结</h3><p>1). HTML页面的基础结构标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span> <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>&lt;title&gt;中定义标题显示在浏览器的标题位置，&lt;body&gt;中定义的内容会呈现在浏览器的内容区域</p><p>2). HTML中的标签特点</p><ul><li>HTML标签不区分大小写</li><li>HTML标签的属性值，采用单引号、双引号都可以</li><li>HTML语法相对比较松散 (建议大家编写HTML标签的时候尽量严谨一些)</li></ul><h2 id="2-2-开发工具"><a href="#2-2-开发工具" class="headerlink" title="2.2 开发工具"></a>2.2 开发工具</h2><ul><li><p>我们通过快速入门案例，发现由记事本文件开发html是非常不方便的，所以接下来我们需要学习一款前端专业的开发工具VS Code。</p></li><li><p>Visual Studio Code（简称 VS Code ）是 Microsoft 于2015年4月发布的一款代码编辑器。VS Code 对前端代码有非常强大的支持，同时也其他编程语言（例如：C++、Java、Python、PHP、Go等）。VS Code 提供了非常强大的插件库，大大提高了开发效率。</p></li><li><p>官网： <a href="https://code.visualstudio.com/">https://code.visualstudio.com</a></p></li><li><p>详细安装教程：参考 <strong>资料&#x2F;VSCode安装&#x2F;安装文档&#x2F;VS Code安装文档.md</strong></p></li></ul><blockquote><p>注意：需要注意的是，我们作为一名开发者，不应该将软件软装在包含中文名的路径中 。</p></blockquote><h2 id="2-3-基础标签-样式"><a href="#2-3-基础标签-样式" class="headerlink" title="2.3 基础标签 &amp; 样式"></a>2.3 基础标签 &amp; 样式</h2><p>那我们在讲解HTML的常见基础标签 及 CSS的基本样式时，我们就以 新浪新闻页面 为例，来进行讲解，这样大家不仅能够知道 常见标签及样式的作用，还能够知道具体的应用场景。</p><p>新浪新闻的具体页面效果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309221756293.png"></p><p>原始页面网址：<a href="https://news.sina.com.cn/gov/xlxw/2023-03-03/doc-imyipzuy7321600.shtml">https://news.sina.com.cn/gov/xlxw/2023-03-03/doc-imyipzuy7321600.shtml</a></p><p>而对于这个新浪新闻的页面来说，核心内容分为两个部分，如下：</p><ul><li>新浪新闻-标题部分</li><li>新浪新闻-正文部分</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309222608750.png"> </p><h3 id="2-3-1-新浪新闻-标题实现"><a href="#2-3-1-新浪新闻-标题实现" class="headerlink" title="2.3.1 新浪新闻-标题实现"></a>2.3.1 新浪新闻-标题实现</h3><h4 id="2-3-1-1-标题排版"><a href="#2-3-1-1-标题排版" class="headerlink" title="2.3.1.1 标题排版"></a>2.3.1.1 标题排版</h4><h5 id="2-3-1-1-1-分析"><a href="#2-3-1-1-1-分析" class="headerlink" title="2.3.1.1.1 分析"></a>2.3.1.1.1 分析</h5><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309223020809.png" alt="" style="zoom:67%;" /> <p> 1). 第一部分，是一张图片，需要用到HTML中的图片标签 <img> 来实现。</p><p> 2). 第二部分，是一个标题，需要用到HTML中的标题标签 <h1> … <h6>来实现。</p><p> 3). 第三部分，有两条水平分割线，需要用到HTML中的 <hr> 标签来定义水平分割线。</p><h5 id="2-3-1-1-2-标签"><a href="#2-3-1-1-2-标签" class="headerlink" title="2.3.1.1.2 标签"></a>2.3.1.1.2 标签</h5><p>1). 图片标签 img</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">A. 图片标签: <span class="tag">&lt;<span class="name">img</span>&gt;</span></span><br><span class="line"></span><br><span class="line">B. 常见属性: </span><br><span class="line">src: 指定图像的url (可以指定 绝对路径 , 也可以指定 相对路径)</span><br><span class="line">width: 图像的宽度 (像素 / 百分比 , 相对于父元素的百分比)</span><br><span class="line">height: 图像的高度 (像素 / 百分比 , 相对于父元素的百分比)</span><br><span class="line"></span><br><span class="line">备注: 一般width 和 height 我们只会指定一个，另外一个会自动的等比例缩放。</span><br><span class="line"></span><br><span class="line">C. 路径书写方式:</span><br><span class="line">    绝对路径:</span><br><span class="line">        1. 绝对磁盘路径: C:\Users\Administrator\Desktop\HTML\img\news_logo.png</span><br><span class="line">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;C:\Users\Administrator\Desktop\HTML\img\news_logo.png&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        2. 绝对网络路径: https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png</span><br><span class="line">           <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    相对路径:</span><br><span class="line">        ./ : 当前目录 , ./ 可以省略的</span><br><span class="line">        ../: 上一级目录</span><br></pre></td></tr></table></figure><p>2). 标题标签 h 系列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">A. 标题标签: <span class="tag">&lt;<span class="name">h1</span>&gt;</span> - <span class="tag">&lt;<span class="name">h6</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>111111111111<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line">B. 效果 : h1为一级标题，字体也是最大的 ； h6为六级标题，字体是最小的。</span><br></pre></td></tr></table></figure><p>3). 水平分页线标签 <hr></p><h5 id="2-3-1-1-2-实现"><a href="#2-3-1-1-2-实现" class="headerlink" title="2.3.1.1.2 实现"></a>2.3.1.1.2 实现</h5><p>1). 打开VsCode，选择左侧最底部的 “资源管理器”，然后选择打开文件夹，选择打开桌面的 HTML 文件夹 </p><p>2). 将资料中提供的 图片、音频、视频 文件夹的这三个文件夹（里面是图片、音视频素材），复制到 HTML 文件夹中。 </p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309224226495.png"> </p><p>3). 在VsCode中创建一个新的 html 文件，文件的后缀名设置为 .html</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309224401950.png"> </p><p>4). html 文件创建好之后，在其中输入 ！，然后直接回车，就可以生成 HTML 的基础结构标签</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309224645231.png"> </p><p>5). 编写标题排版的核心代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文档类型为HTML --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 字符集为UTF-8 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置浏览器兼容性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    img标签: </span></span><br><span class="line"><span class="comment">        src: 图片资源路径</span></span><br><span class="line"><span class="comment">        width: 宽度(px, 像素 ; % , 相对于父元素的百分比)</span></span><br><span class="line"><span class="comment">        height: 高度(px, 像素 ; % , 相对于父元素的百分比)</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        &lt;img src=&quot;img/news_logo.png&quot; width=&quot;80%&quot; &gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    路径书写方式:</span></span><br><span class="line"><span class="comment">        绝对路径:</span></span><br><span class="line"><span class="comment">            1. 绝对磁盘路径: C:\Users\Administrator\Desktop\HTML\img\news_logo.png</span></span><br><span class="line"><span class="comment">                           &lt;img src=&quot;C:\Users\Administrator\Desktop\HTML\img\news_logo.png&quot;&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            2. 绝对网络路径: https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png</span></span><br><span class="line"><span class="comment">                           &lt;img src=&quot;https://i2.sinaimg.cn/dy/deco/2012/0613/yocc20120613img01/news_logo.png&quot;&gt;</span></span><br><span class="line"><span class="comment">        相对路径:</span></span><br><span class="line"><span class="comment">            ./ : 当前目录 , ./ 可以省略的</span></span><br><span class="line"><span class="comment">            ../: 上一级目录</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    2023年03月02日 21:50 央视网</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-1-2-标题样式"><a href="#2-3-1-2-标题样式" class="headerlink" title="2.3.1.2 标题样式"></a>2.3.1.2 标题样式</h4><p>新浪新闻的标题部分的基本排版，我们已经完成了，然后大家会看到，我们编写的一级标题，默认字体颜色为纯黑色。 而原始的新浪新闻页面的新闻标题字体，并不是纯黑色，而是灰黑色， 那接下来，我们就要来设置这个字体的颜色。 而要设置这个字体的颜色，我们就需要通过CSS样式来控制 。</p><p>那在HTML的文件中，我们如何来编写CSS样式呢，此时就涉及到CSS的三种引入方式。</p><h5 id="2-3-1-2-1-CSS引入方式"><a href="#2-3-1-2-1-CSS引入方式" class="headerlink" title="2.3.1.2.1 CSS引入方式"></a>2.3.1.2.1 CSS引入方式</h5><p>具体有3种引入方式，语法如下表格所示：</p><table><thead><tr><th>名称</th><th>语法描述</th><th>示例</th></tr></thead><tbody><tr><td>行内样式</td><td>在标签内使用style属性，属性值是css属性键值对</td><td>&lt;h1 style&#x3D;”xxx:xxx;”&gt;中国新闻网&lt;&#x2F;h1&gt;</td></tr><tr><td>内嵌样式</td><td>定义&lt;style&gt;标签，在标签内部定义css样式</td><td>&lt;style&gt; h1 {…} &lt;&#x2F;style&gt;</td></tr><tr><td>外联样式</td><td>定义&lt;link&gt;标签，通过href属性引入外部css文件</td><td>&lt;link rel&#x3D;”stylesheet” href&#x3D;”css&#x2F;news.css”&gt;</td></tr></tbody></table><p>对于上述3种引入方式，企业开发的使用情况如下：</p><ol><li>内联样式会出现大量的代码冗余，不方便后期的维护，所以不常用。</li><li>内部样式，通过定义css选择器，让样式作用于当前页面的指定的标签上。</li><li>外部样式，html和css实现了完全的分离，企业开发常用方式。</li></ol><h5 id="2-3-1-2-2-颜色表示"><a href="#2-3-1-2-2-颜色表示" class="headerlink" title="2.3.1.2.2 颜色表示"></a>2.3.1.2.2 颜色表示</h5><p>在前端程序开发中，颜色的表示方式常见的有如下三种：</p><table><thead><tr><th><strong>表示方式</strong></th><th><strong>表示含义</strong></th><th><strong>取值</strong></th></tr></thead><tbody><tr><td>关键字</td><td>预定义的颜色名</td><td>red、green、blue…</td></tr><tr><td>rgb表示法</td><td>红绿蓝三原色，每项取值范围：0-255</td><td>rgb(0,0,0)、rgb(255,255,255)、rgb(255,0,0)</td></tr><tr><td>十六进制表示法</td><td>#开头，将数字转换成十六进制表示</td><td>#000000、#ff0000、#cccccc，简写：#000、#ccc</td></tr></tbody></table><h5 id="2-3-1-2-3-标题字体颜色"><a href="#2-3-1-2-3-标题字体颜色" class="headerlink" title="2.3.1.2.3 标题字体颜色"></a>2.3.1.2.3 标题字体颜色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式二: 内嵌样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* color: red; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* color: rgb(0, 0, 255); */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4D4F53</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式三: 外联样式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;css/news.css&quot;&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文</span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式一: 行内样式 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;h1 style=&quot;color: red;&quot;&gt;焦点访谈：中国底气 新思想夯实大国粮仓&lt;/h1&gt; --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    2023年03月02日 21:50 央视网</span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>备注: 要想拾取某一个网页中的颜色，我们可以借助于浏览器的拾色器插件来完成。【拾色器插件的安装，参照资料中提供的文档即可】</p><h5 id="2-3-1-2-4-CSS选择器"><a href="#2-3-1-2-4-CSS选择器" class="headerlink" title="2.3.1.2.4 CSS选择器"></a>2.3.1.2.4 CSS选择器</h5><p>顾名思义：选择器是选取需设置样式的元素（标签），但是我们根据业务场景不同，选择的标签的需求也是多种多样的，所以选择器有很多种，因为我们是做后台开发的，所以对于css选择器，我们只学习最基本的3种。</p><p><strong>选择器通用语法如下</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">选择器名   &#123;</span><br><span class="line">    css样式名：css样式值;</span><br><span class="line">    css样式名：css样式值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要学习的3种选择器是元素选择器，id选择器，class选择器，语法以及作用如下：</p><p><strong>1.元素（标签）选择器：</strong> </p><ul><li>选择器的名字必须是标签的名字</li><li>作用：选择器中的样式会作用于所有同名的标签上</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素名称 &#123;</span><br><span class="line">    css样式名:css样式值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.id选择器:</strong></p><ul><li>选择器的名字前面需要加上#</li><li>作用：选择器中的样式会作用于指定id的标签上，而且有且只有一个标签（由于id是唯一的）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#id属性值 &#123;</span><br><span class="line">    css样式名:css样式值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#did</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.类选择器：</strong></p><ul><li>选择器的名字前面需要加上 .</li><li>作用：选择器中的样式会作用于所有class的属性值和该名字一样的标签上，可以是多个</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.class属性值 &#123;</span><br><span class="line">    css样式名:css样式值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cls</span>&#123;</span><br><span class="line">     <span class="attribute">color</span>: green;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="2-3-1-2-5-发布时间字体颜色"><a href="#2-3-1-2-5-发布时间字体颜色" class="headerlink" title="2.3.1.2.5 发布时间字体颜色"></a>2.3.1.2.5 发布时间字体颜色</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4D4F53</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 元素选择器 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* span &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            color: red;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 类选择器 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* .cls &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            color: green;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; */</span></span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* ID选择器 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#time</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#968D92</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">13px</span>; <span class="comment">/* 设置字体大小 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span> 新浪政务 &gt; 正文</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>央视网<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述我们还使用了一个css的属性 font-size , 用来设置字体的大小。 但是需要注意，在设置字体的大小时，单位px不能省略，否则不生效。</p><h4 id="2-3-1-3-超链接"><a href="#2-3-1-3-超链接" class="headerlink" title="2.3.1.3 超链接"></a>2.3.1.3 超链接</h4><ul><li><p>在新浪新闻的标题部分，当我们点击顶部的 “新浪政务”，浏览器将自动在当前窗口访问新浪政务首页这个资源（<a href="http://gov.sina.com.cn/%EF%BC%89">http://gov.sina.com.cn/）</a></p></li><li><p>当我们点击新闻发布时间之后的 “央视网”，浏览器将会自动打开一个新的标签页，然后在新的标签页中访问央视网中的该新闻资源 （<a href="https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml%EF%BC%89">https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml）</a></p></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/a.gif"></p><p>那接下来，我们就来完善新闻标题部分的这个功能，那此时呢，我们就需要用到HTML中的超链接的标签 。</p><h5 id="2-3-1-3-1-介绍"><a href="#2-3-1-3-1-介绍" class="headerlink" title="2.3.1.3.1 介绍"></a>2.3.1.3.1 介绍</h5><ul><li>标签: &lt;a href&#x3D;”…” target&#x3D;”…”&gt;央视网</a></li><li>属性:<ul><li>href: 指定资源访问的url</li><li>target: 指定在何处打开资源链接<ul><li>_self: 默认值，在当前页面打开</li><li>_blank: 在空白页面打开</li></ul></li></ul></li></ul><h5 id="2-3-1-3-2-实现"><a href="#2-3-1-3-2-实现" class="headerlink" title="2.3.1.3.2 实现"></a>2.3.1.3.2 实现</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4D4F53</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#time</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#968D92</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">13px</span>; <span class="comment">/* 设置字体大小 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none; <span class="comment">/* 设置文本为一个标准的文本 , 去除掉 超链接 下面默认的下划线 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  &gt; 正文</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="tag">&lt;/<span class="name">span</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开此页面，我们可以看到最终效果（超链接的字体，以及默认的下划线，通过css样式已经调整好了）：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309233408698.png"> </p><h3 id="2-3-2-新浪新闻-正文实现"><a href="#2-3-2-新浪新闻-正文实现" class="headerlink" title="2.3.2 新浪新闻-正文实现"></a>2.3.2 新浪新闻-正文实现</h3><h4 id="2-3-2-1-正文排版"><a href="#2-3-2-1-正文排版" class="headerlink" title="2.3.2.1 正文排版"></a>2.3.2.1 正文排版</h4><h5 id="2-3-2-1-1-分析"><a href="#2-3-2-1-1-分析" class="headerlink" title="2.3.2.1.1 分析"></a>2.3.2.1.1 分析</h5><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310084859695.png" alt="" style="zoom:80%;" /> <p>整个正文部分的排版，主要分为这么四个部分：</p><p>1). 视频 (当前这种新闻页面,可能也会存在音频)</p><p>2). 文字段落</p><p>3). 字体加粗</p><p>4). 图片</p><h5 id="2-3-2-1-2-标签"><a href="#2-3-2-1-2-标签" class="headerlink" title="2.3.2.1.2 标签"></a>2.3.2.1.2 标签</h5><p><strong>1). 视频、音频标签</strong></p><ul><li><p>视频标签: &lt;video&gt;</p><ul><li>属性: <ul><li>src: 规定视频的url</li><li>controls: 显示播放控件</li><li>width: 播放器的宽度</li><li>height: 播放器的高度</li></ul></li></ul></li><li><p>音频标签: &lt;audio&gt;</p><ul><li>属性:<ul><li>src: 规定音频的url</li><li>controls: 显示播放控件</li></ul></li></ul></li></ul><p><strong>2). 段落标签</strong></p><ul><li>换行标签: &lt;br&gt;<ul><li>注意: 在HTML页面中,我们在编辑器中通过回车实现的换行, 仅仅在文本编辑器中会看到换行效果, 浏览器是不会解析的, HTML中换行需要通过br标签</li></ul></li></ul><p>​</p><ul><li>段落标签: &lt;p&gt;<ul><li>如: &lt;p&gt; 这是一个段落 &lt;&#x2F;p&gt;</li></ul></li></ul><p><strong>3). 文本格式标签</strong></p><table><thead><tr><th>效果</th><th>标签</th><th>标签(强调)</th></tr></thead><tbody><tr><td>加粗</td><td>b</td><td>strong</td></tr><tr><td>倾斜</td><td>i</td><td>em</td></tr><tr><td>下划线</td><td>u</td><td>ins</td></tr><tr><td>删除线</td><td>s</td><td>del</td></tr></tbody></table><p>前面的标签 b、i、u、s 就仅仅是实现加粗、倾斜、下划线、删除线的效果，是没有强调语义的。 而后面的strong、em、ins、del在实现加粗、倾斜、下划线、删除线的效果的同时，还带有强调语义。</p><h5 id="2-3-2-1-3-实现"><a href="#2-3-2-1-3-实现" class="headerlink" title="2.3.2.1.3 实现"></a>2.3.2.1.3 实现</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4D4F53</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#time</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#968D92</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">13px</span>; <span class="comment">/* 设置字体大小 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none; <span class="comment">/* 设置文本为一个标准的文本 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">35px</span>; <span class="comment">/* 设置首行缩进 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>; <span class="comment">/* 设置行高 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#plast</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right; <span class="comment">/* 对齐方式 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  &gt; 正文</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 正文 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视频 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video/1.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;950px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 音频 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;audio src=&quot;audio/1.mp3&quot; controls&gt;&lt;/audio&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">strong</span>&gt;</span>央视网消息<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;plast&quot;</span>&gt;</span></span><br><span class="line">        责任编辑：王树淼 SN242</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上述的正文排版实现中，还用到了几个CSS属性： </p><ul><li>text-indent: 设置段落的首行缩进 </li><li>line-height: 设置行高</li><li>text-align: 设置对齐方式, 可取值为 left &#x2F; center &#x2F; right</li></ul><blockquote><p>注意事项: </p><ul><li><p>在HTML页面中无论输入了多少个空格, 最多只会显示一个。 可以使用空格占位符（&amp;nbsp；）来生成空格，如果需要多个空格，就使用多次占位符。</p></li><li><p>那在HTML中，除了空格占位符以外，还有一些其他的占位符(了解, 只需要知道空格的占位符写法即可)，如下：</p><ul><li><table><thead><tr><th align="left">显示结果</th><th align="left">描述</th><th align="left">占位符</th></tr></thead><tbody><tr><td align="left"></td><td align="left">空格</td><td align="left">&amp;nbsp;</td></tr><tr><td align="left">&lt;</td><td align="left">小于号</td><td align="left">&amp;lt;</td></tr><tr><td align="left">&gt;</td><td align="left">大于号</td><td align="left">&amp;gt;</td></tr><tr><td align="left">&amp;</td><td align="left">和号</td><td align="left">&amp;amp;</td></tr><tr><td align="left">“</td><td align="left">引号</td><td align="left">&amp;quot;</td></tr><tr><td align="left">‘</td><td align="left">撇号</td><td align="left">&amp;apos;</td></tr></tbody></table></li></ul></li></ul></blockquote><h4 id="2-3-2-2-页面布局"><a href="#2-3-2-2-页面布局" class="headerlink" title="2.3.2.2 页面布局"></a>2.3.2.2 页面布局</h4><p>目前，新闻页面的基本排版，我们都已经完成了，但是，大家会看到，无论是标题部分，还是正文部分，都是铺满了整个浏览器。 而我们再来看看新浪新闻的原始页面，我们会看到新闻网页内容都是居中展示的，左边、右边都是一定的边距的。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310092442972.png"> </p><p>那接下来呢，我们就需要按照这个效果，来完成页面布局。 而要想完成这样一个页面布局，我们就需要介绍一下CSS中的盒子模型 。 </p><h5 id="2-3-2-2-1-盒子模型"><a href="#2-3-2-2-1-盒子模型" class="headerlink" title="2.3.2.2.1 盒子模型"></a>2.3.2.2.1 盒子模型</h5><ul><li><p>盒子：页面中所有的元素（标签），都可以看做是一个 盒子，由盒子将页面中的元素包含在一个矩形区域内，通过盒子的视角更方便的进行页面布局</p></li><li><p>盒子模型组成：内容区域（content）、内边距区域（padding）、边框区域（border）、外边距区域（margin）</p></li></ul><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310092820616.png" alt="" style="zoom:80%;" /> <p>CSS盒子模型，其实和日常生活中的包装盒是非常类似的，就比如：</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310093247265.png" alt="" style="zoom:80%;" /> <p>盒子的大小，其实就包括三个部分： border、padding、content，而margin外边距是不包括在盒子之内的。</p><h5 id="2-3-2-2-2-布局标签"><a href="#2-3-2-2-2-布局标签" class="headerlink" title="2.3.2.2.2 布局标签"></a>2.3.2.2.2 布局标签</h5><ul><li><p>布局标签：实际开发网页中，会大量频繁的使用 div 和 span 这两个没有语义的布局标签。</p></li><li><p>标签：<div> <span></p></li><li><p>特点：</p><ul><li><p>div标签：</p><ul><li><p>一行只显示一个（独占一行）</p></li><li><p>宽度默认是父元素的宽度，高度默认由内容撑开</p></li><li><p>可以设置宽高（width、height）</p></li></ul></li><li><p>span标签：</p><ul><li><p>一行可以显示多个</p></li><li><p>宽度和高度默认由内容撑开</p></li><li><p>不可以设置宽高（width、height）</p></li></ul></li></ul></li></ul><p>测试：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A </span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A </span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开后的效果:</p><p>1). div会独占一行，默认宽度为父元素 body 的宽度</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310093734941.png">  </p><p>2). span一行会显示多个，用来组合行内元素，默认宽度为内容撑开的宽度</p><p><img src="/assets/image-20230310093827748.png" alt="image-20230310093827748"> </p><h5 id="2-3-2-2-3-盒子模型代码"><a href="#2-3-2-2-3-盒子模型代码" class="headerlink" title="2.3.2.2.3 盒子模型代码"></a>2.3.2.2.3 盒子模型代码</h5><p>代码如下: </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="comment">/* 宽度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;  <span class="comment">/* 高度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-sizing</span>: border-box; <span class="comment">/* 指定width height为盒子的高宽 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: aquamarine; <span class="comment">/* 背景色 */</span></span></span><br><span class="line"><span class="language-css">            </span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>; <span class="comment">/* 内边距, 上 右 下 左 , 边距都一行, 可以简写: padding: 20px;*/</span> </span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> solid red; <span class="comment">/* 边框, 宽度 线条类型 颜色 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span>; <span class="comment">/* 外边距, 上 右 下 左 , 边距都一行, 可以简写: margin: 30px; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A A </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码编写好了, 可以通过浏览器打开该页面, 通过开发者工具,我们就可以看到盒子的大小, 以及盒子各个组成部分(内容、内边距、边框、外边距)：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310094312355.png"> </p><p>我们也可以，通过浏览器的开发者工具，清晰的看到这个盒子，以及每一个部分的大小：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310094412539.png"> </p><h5 id="2-3-2-2-3-布局实现"><a href="#2-3-2-2-3-布局实现" class="headerlink" title="2.3.2.2.3 布局实现"></a>2.3.2.2.3 布局实现</h5><p>在实现新闻页面的布局时，我们需要做两部操作：</p><ul><li>第一步：需要将body中的新闻标题部分、正文部分使用一个 div 布局标签将其包裹起来，方便通过css设置内容占用的宽度，比如：65%。</li><li>第二步：通过css为该div设置外边距，左右的外边距分别为：17.5%，上下外边距靠边展示即可，为：0%。</li></ul><p>具体的代码实现如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4D4F53</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#time</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#968D92</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">13px</span>; <span class="comment">/* 设置字体大小 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none; <span class="comment">/* 设置文本为一个标准的文本 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">35px</span>; <span class="comment">/* 设置首行缩进 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>; <span class="comment">/* 设置行高 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#plast</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right; <span class="comment">/* 对齐方式 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#center</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">65%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* margin: 0% 17.5% 0% 17.5% ; */</span> <span class="comment">/* 外边距, 上 右 下 左 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/news_logo.png&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://gov.sina.com.cn/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>新浪政务<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  &gt; 正文</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>焦点访谈：中国底气 新思想夯实大国粮仓<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2023年03月02日 21:50<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://news.cctv.com/2023/03/02/ARTIUCKFf9kE9eXgYE46ugx3230302.shtml&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>央视网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 正文 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 视频 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;video/1.mp4&quot;</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;950px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 音频 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;audio src=&quot;audio/1.mp3&quot; controls&gt;&lt;/audio&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>央视网消息<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> （焦点访谈）：党的十八大以来，以习近平同志为核心的党中央始终把解决粮食安全问题作为治国理政的头等大事，重农抓粮一系列政策举措有力有效，我国粮食产量站稳1.3万亿斤台阶，实现谷物基本自给、口粮绝对安全。我们把饭碗牢牢端在自己手中，为保障经济社会发展提供了坚实支撑，为应对各种风险挑战赢得了主动。连续八年1.3万亿斤，这个沉甸甸的数据是如何取得的呢？</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        人勤春来早，春耕农事忙。立春之后，由南到北，我国春耕春管工作陆续展开，春天的田野处处生机盎然。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            今年，我国启动了新一轮千亿斤粮食产能提升行动，这是一个新的起点。2015年以来，我国粮食产量连续8年稳定在1.3万亿斤以上，人均粮食占有量始终稳稳高于国际公认的400公斤粮食安全线。从十年前的约12200亿斤到2022年的约13700亿斤，粮食产量提高了1500亿斤。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            中国式现代化一个重要的中国特色是人口规模巨大的现代化。我们粮食生产的发展，意味着我们要立足国内，解决14亿多人吃饭的问题。仓廪实，天下安。保障粮食安全是一个永恒的课题，任何时候都不能放松。在以习近平同志为核心的党中央坚强领导下，亿万中国人民辛勤耕耘、不懈奋斗，我们就一定能够牢牢守住粮食安全这一“国之大者”，把中国人的饭碗牢牢端在自己手中，夯实中国式现代化基础。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;plast&quot;</span>&gt;</span></span><br><span class="line">            责任编辑：王树淼 SN242</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浏览器打开此页面，最终效果如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230310094732466.png"> </p><h2 id="2-4-表格标签"><a href="#2-4-表格标签" class="headerlink" title="2.4 表格标签"></a>2.4 表格标签</h2><p><strong>场景：</strong>在网页中以表格（行、列）形式整齐展示数据，我们在一些管理类的系统中，会看到数据通常都是以表格的形式呈现出来的，比如：班级表、学生表、课程表、成绩表等等。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309174438491.png"> </p><p><strong>标签：</strong></p><ul><li><p>&lt;table&gt; : 用于定义整个表格, 可以包裹多个 &lt;tr&gt;， 常用属性如下： </p><ul><li>border：规定表格边框的宽度</li><li>width：规定表格的宽度</li><li>cellspacing: 规定单元之间的空间</li></ul></li><li><p>&lt;tr&gt; : 表格的行，可以包裹多个 &lt;td&gt;  </p></li><li><p>&lt;td&gt; : 表格单元格(普通)，可以包裹内容 , 如果是表头单元格，可以替换为 &lt;th&gt;</p></li></ul><p><strong>演示：</strong></p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML-表格<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center; <span class="comment">/* 单元格内容居中展示 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;600px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌Logo<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>品牌名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>企业名称<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/huawei.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>华为<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>华为技术有限公司<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/alibaba.jpg&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;100px&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>阿里<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>阿里巴巴集团控股有限公司<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开浏览器，效果如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309175121361.png"> </p><p>整合表格使用 table 标签包裹 , 其中的每一行数据都是一个 tr , 每一行中的每一个单元格都是一个 td , 而如果是表头单元格, 可以使用 th (具有加粗居中展示的效果)。</p><h2 id="2-5-表单标签"><a href="#2-5-表单标签" class="headerlink" title="2.5 表单标签"></a>2.5 表单标签</h2><h3 id="2-5-1-表单"><a href="#2-5-1-表单" class="headerlink" title="2.5.1 表单"></a>2.5.1 表单</h3><h4 id="2-5-1-1-介绍"><a href="#2-5-1-1-介绍" class="headerlink" title="2.5.1.1 介绍"></a>2.5.1.1 介绍</h4><p>那表单呢,在我们日常的上网的过程中,基本上每天都会遇到。比如，我们经常在访问网站时，出现的登录页面、注册页面、个人信息提交页面，其实都是一个一个的表单 。 当我们在这些表单中录入数据之后，一点击 “提交”，就会将表单中我们填写的数据采集到，并提交， 那其实这个数据呢，一般会提交到服务端，最终保存在数据库中 （后面的课程中会讲到）。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1668055779440.png" alt="1668055779440" style="zoom:80%;" /> <img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309175941128.png" alt="" style="zoom:80%;" /> </p><p>那其实，上述的整个窗口是一个表单，而表单是一项一项的，这个我们称为表单项 或 表单元素。</p><ul><li><p>表单场景: 表单就是在网页中负责数据采集功能的，如：注册、登录的表单。 </p></li><li><p>表单标签: &lt;form&gt;</p></li><li><p>表单属性:</p><ul><li>action: 规定表单提交时，向何处发送表单数据，表单提交的URL。</li><li>method: 规定用于发送表单数据的方式，常见为： GET、POST。<ul><li>GET：表单数据是拼接在url后面的， 如： xxxxxxxxxxx?username&#x3D;Tom&amp;age&#x3D;12，url中能携带的表单数据大小是有限制的。</li><li>POST： 表单数据是在请求体（消息体）中携带的，大小没有限制。</li></ul></li></ul></li><li><p>表单项标签: 不同类型的input元素、下拉列表、文本域等。</p><ul><li>input: 定义表单项，通过type属性控制输入形式</li><li>select: 定义下拉列表</li><li>textarea: 定义文本域</li></ul></li></ul><h4 id="2-5-1-2-演示"><a href="#2-5-1-2-演示" class="headerlink" title="2.5.1.2 演示"></a>2.5.1.2 演示</h4><p>1). GET方式提交的表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML-表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    form表单属性: </span></span><br><span class="line"><span class="comment">        action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面</span></span><br><span class="line"><span class="comment">        method: 表单的提交方式 .</span></span><br><span class="line"><span class="comment">            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值</span></span><br><span class="line"><span class="comment">            post: 在消息体(请求体)中传递的, 参数大小无限制的.</span></span><br><span class="line"><span class="comment">    --&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单编写完毕之后，通过浏览器打开此表单，然后再表单项中录入值之后，点击提交，我们会看到表单的数据在url后面提交到服务端，格式为：?username&#x3D;Tom&amp;age&#x3D;12。</p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309191725329.png" alt="" style="zoom:80%;" /> <p>2). POST方式提交表单</p><p>将上述的表单提交方式由get，改为post</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML-表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    form表单属性: </span></span><br><span class="line"><span class="comment">        action: 表单提交的url, 往何处提交数据 . 如果不指定, 默认提交到当前页面</span></span><br><span class="line"><span class="comment">        method: 表单的提交方式 .</span></span><br><span class="line"><span class="comment">            get: 在url后面拼接表单数据, 比如: ?username=Tom&amp;age=12 , url长度有限制 . 默认值</span></span><br><span class="line"><span class="comment">            post: 在消息体(请求体)中传递的, 参数大小无限制的.</span></span><br><span class="line"><span class="comment">    --&gt;</span>   </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">        年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单编写完毕之后，通过浏览器打开此表单，然后再表单项中录入值之后，点击提交，我们会看到表单的数据在url后面提交到服务端，格式为：?username&#x3D;Tom&amp;age&#x3D;12。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309192625939.png"> </p><h4 id="2-5-1-3-注意事项"><a href="#2-5-1-3-注意事项" class="headerlink" title="2.5.1.3 注意事项"></a>2.5.1.3 注意事项</h4><p>表单中的所有表单项，要想能够正常的采集数据，在提交的时候能提交到服务端，表单项必须指定name属性。 否则，无法提交该表单项。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-表单项"><a href="#2-5-2-表单项" class="headerlink" title="2.5.2 表单项"></a>2.5.2 表单项</h3><h4 id="2-5-2-1-介绍"><a href="#2-5-2-1-介绍" class="headerlink" title="2.5.2.1 介绍"></a>2.5.2.1 介绍</h4><p>在一个表单中，可以存在很多的表单项，而虽然表单项的形式各式各样，但是表单项的标签其实就只有三个，分别是：</p><ul><li><p>&lt;input&gt;: 表单项 , 通过type属性控制输入形式。</p><table><thead><tr><th>type取值</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>text</td><td>默认值，定义单行的输入字段</td></tr><tr><td>password</td><td>定义密码字段</td></tr><tr><td>radio</td><td>定义单选按钮</td></tr><tr><td>checkbox</td><td>定义复选框</td></tr><tr><td>file</td><td>定义文件上传按钮</td></tr><tr><td>date&#x2F;time&#x2F;datetime-local</td><td>定义日期&#x2F;时间&#x2F;日期时间</td></tr><tr><td>number</td><td>定义数字输入框</td></tr><tr><td>email</td><td>定义邮件输入框</td></tr><tr><td>hidden</td><td>定义隐藏域</td></tr><tr><td>submit &#x2F; reset &#x2F; button</td><td>定义提交按钮 &#x2F; 重置按钮 &#x2F; 可点击按钮</td></tr></tbody></table></li><li><p>&lt;select&gt;: 定义下拉列表, &lt;option&gt; 定义列表项</p></li><li><p>&lt;textarea&gt;: 文本域</p></li></ul><h4 id="2-5-2-2-演示"><a href="#2-5-2-2-演示" class="headerlink" title="2.5.2.2 演示"></a>2.5.2.2 演示</h4><p>创建一个新的表单项的html文件，具体内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML-表单项标签<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- value: 表单项提交的值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">     姓名: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     密码: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">     性别: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span> 男</span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;gender&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span> 女 <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     爱好: <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java&quot;</span>&gt;</span> java <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span> game <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sing&quot;</span>&gt;</span> sing <span class="tag">&lt;/<span class="name">label</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     图像: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;image&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     生日: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span> <span class="attr">name</span>=<span class="string">&quot;birthday&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;time&quot;</span> <span class="attr">name</span>=<span class="string">&quot;time&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     日期时间: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;datetime-local&quot;</span> <span class="attr">name</span>=<span class="string">&quot;datetime&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     邮箱: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     年龄: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     学历: <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;degree&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>----------- 请选择 -----------<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>大专<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>本科<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>硕士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;4&quot;</span>&gt;</span>博士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">select</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     描述: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">     <span class="comment">&lt;!-- 表单常见按钮 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重置&quot;</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span>   </span><br><span class="line">     <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过浏览器打开上述的表单项html文件，最终展示出的表单信息如下：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309221308252.png"> </p><p>而对于input type&#x3D;”hidden”，是一个隐藏域，在表单中并不会显示出来，但是在提交表单的时候，是会提交到服务端的。 接下来，我们就点击提交按钮，来提交当前表单，看看提交的数据：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230309221530214.png"> </p><h1 id="3-文档查阅"><a href="#3-文档查阅" class="headerlink" title="3. 文档查阅"></a>3. 文档查阅</h1><p>文档地址: <a href="https://www.w3school.com.cn/index.html">https://www.w3school.com.cn/index.html</a></p><h2 id="3-1-HTML文档查阅"><a href="#3-1-HTML文档查阅" class="headerlink" title="3.1 HTML文档查阅"></a>3.1 HTML文档查阅</h2><p>以video标签为例:</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/html.gif"></p><h2 id="3-2-CSS文档查阅"><a href="#3-2-CSS文档查阅" class="headerlink" title="3.2 CSS文档查阅"></a>3.2 CSS文档查阅</h2><p>以padding属性为例:</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/css.gif"> </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库基础sql</title>
      <link href="/2023/07/10/sql%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/10/sql%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL语句笔记-SQL语句不区分大小写"><a href="#SQL语句笔记-SQL语句不区分大小写" class="headerlink" title="SQL语句笔记(SQL语句不区分大小写)"></a>SQL语句笔记(SQL语句不区分大小写)</h1><h2 id="一、数据库操作"><a href="#一、数据库操作" class="headerlink" title="一、数据库操作"></a>一、数据库操作</h2><h3 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h3><p>CREATE DATABASE database-name（此语句的路径，初始大小，容量值及增长量皆为默认）</p><p>自己设定一些值”[]”中的语句可选用或者不用</p><ul><li>代码如下</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE 数据库名称</span><br><span class="line">[<span class="keyword">ON</span></span><br><span class="line">[FILEGROUP 文件组名称]      <span class="operator">/</span><span class="operator">/</span>&quot;[]&quot;中内容均为可选设定，可不写，不写即为默认值。</span><br><span class="line">(</span><br><span class="line">NAME<span class="operator">=</span>数据库逻辑名称,</span><br><span class="line">FILENAME<span class="operator">=</span>存储路径,</span><br><span class="line">SIZE<span class="operator">=</span>数据初始大小,</span><br><span class="line">MAXSIZE<span class="operator">=</span>最大容量值,</span><br><span class="line">FILEGROWTH<span class="operator">=</span>自动增长容量值  </span><br><span class="line">)                        <span class="operator">/</span><span class="operator">/</span>用&quot;()&quot;括起来的语句除最后一句，每一句用英文逗号隔开</span><br><span class="line">]</span><br><span class="line">[LOG <span class="keyword">ON</span></span><br><span class="line">(</span><br><span class="line">NAME<span class="operator">=</span>日志逻辑名称,</span><br><span class="line">FILENAME<span class="operator">=</span>存储路径,</span><br><span class="line">SIZE<span class="operator">=</span>日志文件初始大小,</span><br><span class="line">MAXSIZE<span class="operator">=</span>日志文件最大容量值,</span><br><span class="line">FILEGROWTH<span class="operator">=</span>日志文件自动增长容量值</span><br><span class="line">)</span><br><span class="line">]</span><br><span class="line">[<span class="keyword">COLLATE</span> 数据库校验方式] <span class="operator">/</span><span class="operator">/</span>可为Windows校验也可以是<span class="keyword">SQL</span>校验</span><br><span class="line">[<span class="keyword">FOR</span> ATTACH]          <span class="operator">/</span><span class="operator">/</span>将已存在的数据库文件附加到新的数据库中</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F;“[]”中内容均为可选设定，可不写，不写即为默认值。</p><p>&#x2F;&#x2F;用”()”括起来的语句除最后一句，每一句用英文逗号隔开</p><h3 id="修改数据库"><a href="#修改数据库" class="headerlink" title="修改数据库"></a>修改数据库</h3><ul><li>ADD FILE：向数据库中添加数据文件。</li><li>ADD LOG FILE：向数据库中添加日志文件。</li><li>REMOVE FILE：从数据库中删除逻辑文件，并删除物理文件。如果文件不为空，则无法删除。</li><li>MODIFY FILE：指定要修改的文件。</li><li>ADD FILEGROUP：向数据库中添加文件组。</li><li>REMOVE FILEGROUP：从数据库中删除文件组。若文件组非空，无法将其删除，需要先从文件组中删除所有文件。</li><li>MODIFY FILEGROUP：修改文件组名称、设置文件组的只读（READ_ONLY）或者读写（READ_WRITE）属性、指定文件组为默认文件组（DEFAULT）。</li><li>ALTER DATABASE命令可以在数据库中添加或删除文件和文件组、更改数据库属性或其文件和文件组、更改<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8E%92%E5%BA%8F&spm=1001.2101.3001.7020">数据库排序</a>规则和设置数据库选项。应注意的是，只有数据库管理员（DBA）或具有CREATE DATABASE权限的数据库所有者才有权执行此命令。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE 数据库名称</span><br><span class="line"><span class="keyword">ADD</span> FILE(具体文件格式)</span><br><span class="line">[,…n]</span><br><span class="line">[<span class="keyword">TO</span> FILEGROUP 文件组名]</span><br><span class="line"><span class="operator">|</span><span class="keyword">ADD</span> LOG FILE(具体文件格式)</span><br><span class="line">[,…n]</span><br><span class="line"><span class="operator">|</span>REMOVE FILE 文件逻辑名称</span><br><span class="line"><span class="operator">|</span>MODIFY FILE(具体文件格式)</span><br><span class="line"><span class="operator">|</span><span class="keyword">ADD</span> FILEGROUP 文件组名</span><br><span class="line"><span class="operator">|</span>REMOVE FILEGROUP 文件组名</span><br><span class="line"><span class="operator">|</span>MODIFY FILEGROUP 文件组名</span><br><span class="line">&#123; READ_ONLY<span class="operator">|</span>READ_WRITE,</span><br><span class="line">     <span class="operator">|</span> <span class="keyword">DEFAULT</span>,</span><br><span class="line">     <span class="operator">|</span> NAME <span class="operator">=</span> 新文件组名&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><p>其中，“具体文件格式”为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(   </span><br><span class="line">NAME <span class="operator">=</span> 文件逻辑名称</span><br><span class="line">    [ , NEWNAME <span class="operator">=</span> 新文件逻辑名称]</span><br><span class="line">    [ , SIZE <span class="operator">=</span> 初始文件大小] </span><br><span class="line">    [ , MAXSIZE <span class="operator">=</span> 文件最大容量] </span><br><span class="line">    [ , FILEGROWTH <span class="operator">=</span> 文件自动增长容量] </span><br><span class="line">) </span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h2 id="二、数据表"><a href="#二、数据表" class="headerlink" title="二、数据表"></a>二、数据表</h2><h3 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h3><h4 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h4><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>CHAR(size)</td><td>用于表示固定长度的字符串，该字符串可以包含数字、字母和特殊字符。size 的大小可以是从 0 到 255 个字符，默认值为 1。</td></tr><tr><td>VARCHAR(size)</td><td>用于表示可变长度的字符串，该字符串可以包含数字、字母和特殊字符。size 的大小可以是从 0 到 65535 个字符。</td></tr><tr><td>TINYTEXT</td><td>表示一个最大长度为 255（28-1）的字符串文本。</td></tr><tr><td>TEXT(size)</td><td>表示一个最大长度为 65,535（216-1）的字符串文本，也即 64KB。</td></tr><tr><td>MEDIUMTEXT</td><td>表示一个最大长度为 16,777,215（224-1）的字符串文本，也即 16MB。</td></tr><tr><td>LONGTEXT</td><td>表示一个最大长度为 4,294,967,295（232-1）的字符串文本，也即 4GB。</td></tr><tr><td>ENUM(val1, val2, val3,…)</td><td>字符串枚举类型，最多可以包含 65,535 个枚举值。插入的数据必须位于列表中，并且只能命中其中一个值；如果不在，将插入一个空值。</td></tr><tr><td>SET( val1,val2,val3,…)</td><td>字符串集合类型，最多可以列出 64 个值。插入的数据可以命中其中的一个或者多个值，如果没有命中，将插入一个空值。</td></tr></tbody></table><p>说明：ENUM 类型相当于单选题，SET 类型相当于多选题。</p><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><table><thead><tr><th>类型</th><th>大小（字节）</th><th>有符号数取值范围</th><th>无符号数取值范围</th><th>说明</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>(-128, 127)</td><td>(0, 255)</td><td>超小整数</td></tr><tr><td>SMALLINT</td><td>2</td><td>(-32 768, 32 767)</td><td>(0, 65 535)</td><td>小整数</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>(-8 388 608, 8 388 607)</td><td>(0, 16 777 215)</td><td>中等整数</td></tr><tr><td>INT 或 INTEGER</td><td>4</td><td>(-2 147 483 648, 2 147 483 647)</td><td>(0, 4 294 967 295)</td><td>整数</td></tr><tr><td>BIGINT</td><td>8</td><td>(-263, 263-1)</td><td>(0, 264-1)</td><td>大整数</td></tr><tr><td>BOOL</td><td>布尔类型，只有 true 和 false 两个有效值；零值被认为是 false，非零值被认为是 true。 注意，MySQL 并不真正支持 BOOL 类型，BOOL 是 TINYINT(1) 的别名。</td><td></td><td></td><td></td></tr></tbody></table><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><table><thead><tr><th>类型</th><th>分类</th><th>说明</th></tr></thead><tbody><tr><td>FLOAT(size, d)</td><td>浮点数（近似值）</td><td>单精度浮点数类型，4 个字节大小。size 参数用来指定数字的总个数，d 参数用来指定小数部分（小数点后边）的数字个数。</td></tr><tr><td>FLOAT§</td><td>单精度浮点数类型，参数 p 用来决定使用 FLOAT 类型还是 DOUBLE 类型：如果 p 的取值介于 0 和 24 之间，那么数据类型将变成 FLOAT()；如果 p 的取值介于 25 和 53 之间，那么数据类型将变成 DOUBLE()。</td><td></td></tr><tr><td>DOUBLE(size, d)</td><td>双精度浮点数类型，size 参数用来指定数字的总个数，d 参数用来指定小数部分（小数点后边）的数字个数。</td><td></td></tr><tr><td>DECIMAL(size, d)</td><td>定点数（精确值）</td><td>定点数类型，size 参数用来指定数字的总个数，d 参数用来指定小数部分（小数点后边）的数字个数。size 的最大值是 65，默认值是 10；d 的最大取值是 30，默认值是 0。</td></tr><tr><td>DEC(size, d)</td><td>等价于 DECIMAL(size, d)。</td><td></td></tr></tbody></table><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>DATE</td><td>日期类型，格式为 YYYY-MM-DD，取值范围从 ‘1000-01-01’ 到 ‘9999-12-31’。</td></tr><tr><td>DATETIME(fsp)</td><td>日期和时间类型，格式为 YYYY-MM-DD hh:mm:ss，取值范围从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’。</td></tr><tr><td>TIMESTAMP(fsp)</td><td>时间戳类型，它存储的值为从 Unix 纪元（‘1970-01-01 00:00:00’ UTC）到现在的秒数。TIMESTAMP 的格式为 YYYY-MM-DD hh:mm:ss，取值范围从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC。</td></tr><tr><td>TIME(fsp)</td><td>时间类型，格式为 hh:mm:ss，取值范围从 ‘-838:59:59’ 到 ‘838:59:59’。</td></tr><tr><td>YEAR</td><td>四位数字的年份格式，允许使用从 1901 到 2155 之间的四位数字的年份。此外，还有一个特殊的取值，就是 0000。</td></tr></tbody></table><h4 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h4><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>BIT(size)</td><td>二进制位（Bit）类型，位数由 size 参数指定；size 的大小从 1 到 64，默认值为 1。</td></tr><tr><td>BINARY(Size)</td><td>等价于 CHAR() 类型，但是存储的是二进制形式的字节串。size 参数以字节（Byte）为单位指定列的长度，默认值为1。</td></tr><tr><td>VARBINARY(Size)</td><td>等价于 VARCHAR() 类型，但是存储的是二进制形式的字节串。size 参数以字节（Byte）为单位指定列的最大长度。</td></tr><tr><td>TINYBLOB</td><td>存储较小的二进制数据，最多可容纳 255 (28-1)个字节。</td></tr><tr><td>BLOB(size)</td><td>用来储存二进制数据，最多可以容纳 65,535（216-1）个字节，也即 64KB。</td></tr><tr><td>MEDIUMBLOB</td><td>存储中等大小的二进制数据，最多可以容纳 16,777,215（224-1）字节，也即 16MB。</td></tr><tr><td>LONGBLOB</td><td>存储较大的二进制数据，最多可容纳 42,94,967,295（232-1）字节，也即 4GB。</td></tr></tbody></table><h3 id="1、创建数据表"><a href="#1、创建数据表" class="headerlink" title="1、创建数据表"></a>1、创建数据表</h3><p>CREATE TABLE 表名(col1 type1 [not null][primary key],col2 type2 [not null],…)</p><h4 id="NULL-NOTNULL-约束"><a href="#NULL-NOTNULL-约束" class="headerlink" title="NULL&#x2F;NOTNULL 约束"></a>NULL&#x2F;NOTNULL 约束</h4><ul><li>括号里分别是列的属性名，数据类型，和约束，当为NULL时表示不知道，对于主键列，不允许出现空值，否则主键列失去唯一标识性。因此加了约束</li></ul><h4 id="唯一约束-UNIQUE"><a href="#唯一约束-UNIQUE" class="headerlink" title="唯一约束 UNIQUE"></a>唯一约束 UNIQUE</h4><p> 用来指明基本表在某一列或多个列的组合列上的取值必须唯一（例如确保同一性别的同学没用重名）</p><ul><li>用于列约束格式为 [CONSTRAINT &lt;约束名&gt;] UNIQUE</li><li>用于表约束 [CONSTRAINT &lt;约束名&gt;] UNIQUE（列名，[列名]）</li></ul><h4 id="主键约束-PRIMARY-KEY"><a href="#主键约束-PRIMARY-KEY" class="headerlink" title="主键约束 PRIMARY KEY"></a>主键约束 PRIMARY KEY</h4><p> 用于定义基本表的主键，起唯一标识作用</p><p><strong>PRIMARY KEY与UNIQUE 的区别：</strong></p><ol><li>在一个基本表中只能定义一个PRIMARY KEY约束，但可定义多个UNIQUE约束。</li><li>对于指定为PRIMARY KEY的一个列或多个列的组合，其中任何一个列都不能出现NULL值，而对于UNIQUE所约束的唯一键，则允许为NULL</li><li>不能为同一个列或一组列，既定义UNIQUE约束，又定义PRIMARY KEY约束。</li></ol><ul><li>用于定义列约束 CONSTRAINT &lt;约束名&gt; PRIMARY KEY</li><li>用于定义表约束 [CONSTRAINT &lt;约束名&gt;] PRIMARY KEY (&lt;列名&gt;[{,&lt;列名&gt;}])</li></ul><h4 id="外键约束-FOREIGN-KEY-约束"><a href="#外键约束-FOREIGN-KEY-约束" class="headerlink" title="外键约束 FOREIGN KEY 约束"></a><a href="https://so.csdn.net/so/search?q=%E5%A4%96%E9%94%AE%E7%BA%A6%E6%9D%9F&spm=1001.2101.3001.7020">外键约束</a> FOREIGN KEY 约束</h4><p> 外键约束指定某一列或几列作为外部键。其中包含外部键的表称为从表，包含外部键所引用的主键或唯一键的表称为主表。</p><ul><li>[CONSTRAINT&lt;约束名&gt;] FOREIGN KEY REFERENCES &lt;主表名&gt; (&lt;列名&gt;[{,&lt;列名&gt;}])</li></ul><h4 id="CHECK-约束"><a href="#CHECK-约束" class="headerlink" title="CHECK 约束"></a>CHECK 约束</h4><p>**CHECK约束用来检查字段值所允许的范围 **</p><p> 在建立CHECK约束时，需要考虑以下几个因素：一个表中可以定义多个CHECK约束，每个字段只能定义一个CHECK约束，在多个字段上定义的CHECK约束必须为表约束，当执行INSERT、UNDATE语句时，CHECK约束将验证数据。</p><ul><li><p>CHECK既可用于列约束，也可用于表约束。</p><p>[CONSTRAINT &lt;约束名&gt;] CHECK (&lt;条件&gt;)</p></li></ul><h4 id="初始化表-table1"><a href="#初始化表-table1" class="headerlink" title="初始化表 table1"></a>初始化表 table1</h4><p>TRUNCATE TABLE table1</p><h4 id="列出数据库里所有的表名"><a href="#列出数据库里所有的表名" class="headerlink" title="列出数据库里所有的表名"></a>列出数据库里所有的表名</h4><p>SELECT NAME FROM SYSOBJECTS WHERW TYPE&#x3D;‘U’ &#x2F;&#x2F;U代表用户</p><h3 id="2、删除新表"><a href="#2、删除新表" class="headerlink" title="2、删除新表"></a>2、删除新表</h3><p>DROP TABLE 表名</p><p>只能删除自己建立的表，不能删除其他用户所建的表</p><h3 id="3、增加-修改一个列"><a href="#3、增加-修改一个列" class="headerlink" title="3、增加&#x2F;修改一个列"></a>3、增加&#x2F;修改一个列</h3><p>Alter table tabname add column col type</p><p>注：列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。</p><ul><li>ADD方式用于增加新列和完整性约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="operator">&lt;</span>列定义<span class="operator">&gt;</span> <span class="operator">|</span> <span class="operator">&lt;</span>完整性约束定义<span class="operator">&gt;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>ALTER方式用于修改某些列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [<span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>] </span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>DROP方式只用于删除完整性约束</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span><span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span> </span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="列出表里的所有的列名"><a href="#列出表里的所有的列名" class="headerlink" title="列出表里的所有的列名"></a>列出表里的所有的列名</h4><p>select name from syscolumns whereid&#x3D;object_id(‘表名’)</p><h3 id="7、主键"><a href="#7、主键" class="headerlink" title="7、主键"></a>7、主键</h3><p>添加主键： Alter table tabname add primarykey(col)</p><p>删除主键： Alter table tabname drop primary key(col)</p><h3 id="8、索引"><a href="#8、索引" class="headerlink" title="8、索引"></a>8、索引</h3><p>创建索引：create[unique] index idxname on tabname(col….)</p><p>删除索引：drop index idxname</p><p>注：索引是不可更改的，想更改必须删除重新建。</p><h3 id="9、-视图"><a href="#9、-视图" class="headerlink" title="9、 视图"></a>9、 视图</h3><p>创建视图：create view viewname as select statement</p><p>删除视图：drop view viewname</p><h3 id="10、-简单的基本sql语句"><a href="#10、-简单的基本sql语句" class="headerlink" title="10、 简单的基本sql语句"></a>10、 简单的基本sql语句</h3><p>选择：select * fromtable1 where 范围</p><p>插入：insert intotable1(field1,field2) values(value1,value2)</p><p>删除：delete from table1where 范围</p><p>更新：update table1 set field1&#x3D;value1 where 范围</p><p>查找：select* from table1 where field1 like ’%value1%’ —like的语法很精妙，查资料!</p><p>排序：select * from table1 order by field1,field2 [desc]</p><p>总数：selectcount as totalcount from table1</p><p>求和：select sum(field1) as sumvalue from table1</p><p>平均：selectavg(field1) as avgvalue from table1</p><p>最大：select max(field1) as maxvalue from table1</p><p>最小：selectmin(field1) as minvalue from table1</p><h3 id="11、-高级查询运算词"><a href="#11、-高级查询运算词" class="headerlink" title="11、 高级查询运算词"></a>11、 高级查询运算词</h3><p>A： UNION 运算符</p><p>UNION 运算符通过组合其他两个结果表(例如 TABLE1 和 TABLE2)并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION 一起使用时(即 UNION ALL)，不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。</p><p>B： EXCEPT 运算符</p><p>EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。</p><p>C： INTERSECT 运算符</p><p>INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECTALL)，不消除重复行。</p><p>注：使用运算词的几个查询结果行必须是一致的。</p><h3 id="12、分组"><a href="#12、分组" class="headerlink" title="12、分组"></a>12、分组</h3><p>Groupby：</p><p>一张表，一旦分组 完成后，查询后只能得到组相关的信息。</p><p>组相关的信息：(统计信息) count,sum,max,min,avg 分组的标准)</p><p>在SQLServer中分组时：不能以text,ntext,image类型的字段作为分组依据</p><p>在selecte统计函数中的字段，不能和普通的字段放在一起;</p><h2 id="三、查询"><a href="#三、查询" class="headerlink" title="三、查询"></a>三、查询</h2><h3 id="3-1单表查询"><a href="#3-1单表查询" class="headerlink" title="3.1单表查询"></a>3.1单表查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>][TOP N [<span class="keyword">PERCENT</span>][<span class="keyword">WITH</span> TIES]]<span class="operator">/</span><span class="operator">/</span>投影</span><br><span class="line">〈列名〉[<span class="keyword">AS</span> 别名<span class="number">1</span>] [&#123;，〈列名〉[ <span class="keyword">AS</span> 别名<span class="number">2</span>]&#125;]</span><br><span class="line"><span class="keyword">FROM</span>〈表名〉[[<span class="keyword">AS</span>] 表别名]</span><br><span class="line">[<span class="keyword">WHERE</span>〈检索条件〉]<span class="operator">/</span><span class="operator">/</span>选取</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>[<span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>[<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]]</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="3-1-1无条件查询"><a href="#3-1-1无条件查询" class="headerlink" title="3.1.1无条件查询"></a>3.1.1无条件查询</h4><ul><li>无条件查询是指只包含“SELECT…FROM”的查询，相当于只对关系（表）进行投影操作。不进行选取。</li></ul><h4 id="3-1-2条件查询"><a href="#3-1-2条件查询" class="headerlink" title="3.1.2条件查询"></a>3.1.2条件查询</h4><p><strong>当要在表中找出满足某些条件的行时，则需使用</strong> “ WHERE ” <strong>子句指定查询条件。</strong></p><ul><li>常用比较运算符</li></ul><table><thead><tr><th><strong>运算符</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>&#x3D;, &gt;, &lt;, &gt;&#x3D;, &lt;&#x3D;, !&#x3D; ,&lt; &gt;</strong></td><td><strong>比较大小</strong></td></tr><tr><td><strong>AND, OR, NOT</strong></td><td><strong>多重条件</strong></td></tr><tr><td><strong>BETWEEN AND</strong></td><td><strong>确定范围</strong></td></tr><tr><td><strong>IN</strong></td><td><strong>确定集合</strong></td></tr><tr><td><strong>LIKE</strong></td><td><strong>字符匹配</strong></td></tr><tr><td><strong>IS NULL</strong></td><td><strong>空值</strong></td></tr></tbody></table><h4 id="3-1-3多重条件查询"><a href="#3-1-3多重条件查询" class="headerlink" title="3.1.3多重条件查询"></a>3.1.3多重条件查询</h4><p>当<strong>WHERE</strong>子句需要指定一个以上的查询条件时，则需要使用逻辑运算符<strong>AND</strong>、<strong>OR</strong>、<strong>NOT</strong>。</p><p>优先级:（）&gt;NOT&gt;AND&gt;OR</p><h4 id="3-1-4确定集合"><a href="#3-1-4确定集合" class="headerlink" title="3.1.4确定集合"></a>3.1.4确定集合</h4><ul><li>利用“IN”操作可以查询属性值属于指定集合的元组。利用“NOT IN”可以查询指定集合外的元组。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WHERE</span> 表名 <span class="keyword">IN</span>(<span class="string">&#x27;C1’, &#x27;</span>C2’)</span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> 表名 <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="string">&#x27;C1&#x27;</span>，<span class="string">&#x27;C2&#x27;</span>) </span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="3-1-5模糊查询"><a href="#3-1-5模糊查询" class="headerlink" title="3.1.5模糊查询"></a>3.1.5模糊查询</h4><ul><li>当不知道完全精确的值时，用户可以使用LIKE或NOT LIKE进行部分匹配查询（也称模糊查询）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span>属性名<span class="operator">&gt;</span> <span class="keyword">LIKE</span> <span class="operator">&lt;</span>字符串常量<span class="operator">&gt;</span> <span class="operator">/</span><span class="operator">/</span>属性名为字符型，字符串常量为通配符</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>通配符</th><th>功能</th><th>实例</th></tr></thead><tbody><tr><td>%</td><td>代表0个或多个字符</td><td>‘ab%’，ab后可接任意字符串</td></tr><tr><td>_（下划线）</td><td>代表一个字符</td><td>‘a_b’,‘a’和‘b’之间有一个字符</td></tr><tr><td>[ ]</td><td>表示在某一范围的字符</td><td>[0-9]，0~9之间的字符</td></tr><tr><td>[ ^ ]</td><td>表示不在某一范围的字符</td><td>[ ^ 0-9]，不在0~9之间的字符</td></tr></tbody></table><h4 id="3-1-6空值查询"><a href="#3-1-6空值查询" class="headerlink" title="3.1.6空值查询"></a>3.1.6空值查询</h4><ul><li>某个字段没有值称为具有空值（NULL）</li><li>空值不同于零和空格，它不占任何存储空间</li></ul><p>例：查询属性名3没有值的相应的属性名1和属性名2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 属性名<span class="number">1</span>，属性名<span class="number">2</span></span><br><span class="line"><span class="keyword">FROM</span> 表名</span><br><span class="line"><span class="keyword">WHERE</span> 属性名<span class="number">3</span> <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="常用库函数"><a href="#常用库函数" class="headerlink" title="常用库函数"></a>常用库函数</h4><ul><li>使用库函数进行查询时，通常要给查询的每一项内容加上别名，否则查询结果中就不显示列名</li></ul><table><thead><tr><th><strong>函数名称</strong></th><th><strong>功 能</strong></th></tr></thead><tbody><tr><td><strong>AVG</strong></td><td><strong>按列计算平均值</strong></td></tr><tr><td><strong>SUM</strong></td><td><strong>按列计算值的总和</strong></td></tr><tr><td><strong>MAX</strong></td><td><strong>求一列中的最大值</strong></td></tr><tr><td><strong>MIN</strong></td><td><strong>求一列中的最小值</strong></td></tr><tr><td><strong>COUNT</strong></td><td><strong>按列值计个数</strong></td></tr></tbody></table><p>求选修C1号课程的最高分、最低分及之间相差的分数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(Score) <span class="keyword">AS</span> MaxScore, <span class="built_in">MIN</span>(Score) <span class="keyword">AS</span> MinScore, <span class="built_in">MAX</span>(Score)－<span class="built_in">MIN</span>(Score) <span class="keyword">AS</span> Diff</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> (CNo <span class="operator">=</span> <span class="string">&#x27;C1&#x27;</span>)</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><p>求学校中共有多少个系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> Dept) <span class="keyword">AS</span> DeptNum</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="3-1-7分组查询-GROUO-BY"><a href="#3-1-7分组查询-GROUO-BY" class="headerlink" title="3.1.7分组查询 GROUO BY"></a>3.1.7分组查询 GROUO BY</h4><ul><li>GROUP BY子句可以将查询结果按属性列或属性列组合在行的方向上进行分组，每组在属性列或属性列组合上具有相同的值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 查询结果</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>若在分组后还要按照一定的条件进行筛选，则需使用HAVING子句</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> 查询结构</span><br><span class="line"><span class="keyword">HAVING</span> (筛选条件)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h4 id="3-1-8查询结果的排序"><a href="#3-1-8查询结果的排序" class="headerlink" title="3.1.8查询结果的排序"></a>3.1.8查询结果的排序</h4><ul><li>当需要对查询结果排序时，应该使用ORDER BY子句，ORDER BY子句必须出现在其他子句之后。排序方式可以指定，DESC为降序，ASC为升序，缺省时为升序。</li></ul><p>按成绩降序排列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Score <span class="keyword">DESC</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h3 id="3-2多表的连接查询"><a href="#3-2多表的连接查询" class="headerlink" title="3.2多表的连接查询"></a>3.2多表的连接查询</h3><ul><li>···表之间满足一定条件的行进行连接时，FROM子句指明进行连接的表名，WHERE子句指明连接的列名及其连接条件。</li><li>···利用关键字JOIN进行连接：当将JOIN 关键词放于FROM子句中时，应有关键词ON与之对应，以表明连接的条件。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>][TOP N [<span class="keyword">PERCENT</span>][<span class="keyword">WITH</span> TIES]]</span><br><span class="line">〈列名〉[<span class="keyword">AS</span> 别名<span class="number">1</span>] [&#123;，〈列名〉[ <span class="keyword">AS</span> 别名<span class="number">2</span>]&#125;]</span><br><span class="line"><span class="keyword">FROM</span>〈表名<span class="number">1</span>〉[[<span class="keyword">AS</span>] 表<span class="number">1</span>别名] [&#123;,〈表名<span class="number">2</span>〉[[<span class="keyword">AS</span>] 表<span class="number">2</span>别名]&#125;]</span><br><span class="line">[<span class="keyword">WHERE</span>〈检索条件〉]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>[<span class="keyword">HAVING</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>[<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>]]</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="3-2-1JION的分类"><a href="#3-2-1JION的分类" class="headerlink" title="3.2.1JION的分类"></a>3.2.1JION的分类</h4><table><thead><tr><th>INNER JOIN</th><th>显示符合条件的记录，此为默认值</th></tr></thead><tbody><tr><td>LEFT（OUTER）JOIN</td><td>为左（外）连接，用于显示符合条件的数据行以及左边表中不符合条件的数据行，此时右边数据行会以NULL来显示</td></tr><tr><td>RIGHT（OUTER）JOIN</td><td>右（外）连接，用于显示符合条件的数据行以及右边表中不符合条件的数据行。此时左边数据行会以NULL来显示</td></tr><tr><td>FULL（OUTER）JOIN</td><td>显示符合条件的数据行以及左边表和右边表中不符合条件的数据行。此时缺乏数据的数据行会以NULL来显示</td></tr><tr><td>CROSS JOIN</td><td>将一个表的每一个记录和另一表的每个记录匹配成新的数据行</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span><span class="operator">|</span><span class="keyword">DISTINCT</span>][TOP N [<span class="keyword">PERCENT</span>][<span class="keyword">WITH</span> TIES]]</span><br><span class="line">列名<span class="number">1</span> [<span class="keyword">AS</span> 别名<span class="number">1</span>][ ，〈列名<span class="number">2</span>〉[ <span class="keyword">AS</span> 别名<span class="number">2</span>]…]</span><br><span class="line"><span class="keyword">FROM</span>〈表名<span class="number">1</span>〉[[<span class="keyword">AS</span>] 表<span class="number">1</span>别名]</span><br><span class="line">[<span class="keyword">INNER</span><span class="operator">/</span><span class="keyword">RIGHT</span><span class="operator">/</span><span class="keyword">FULL</span><span class="operator">/</span><span class="keyword">OUTER</span><span class="operator">/</span><span class="keyword">CROSS</span>] <span class="keyword">JOIN</span> </span><br><span class="line">表名<span class="number">2</span> [[<span class="keyword">AS</span>] 表<span class="number">2</span>别名]</span><br><span class="line"><span class="keyword">ON</span> 条件</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2内连接查询"><a href="#3-2-2内连接查询" class="headerlink" title="3.2.2内连接查询"></a>3.2.2内连接查询</h4><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><ul><li><p>连接条件的一般格式为：</p><p>[&lt;表名1&gt;.] &lt;列名1&gt; &lt;比较运算符&gt; [&lt;表名2&gt;.] &lt;列名2&gt;</p><p>其中的比较运算符主要有：&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、!&#x3D;。</p><p>当比较运算符为“&#x3D;”时，称为等值连接，其他情况为非等值连接</p></li></ul><h4 id="3-2-3外连接查询"><a href="#3-2-3外连接查询" class="headerlink" title="3.2.3外连接查询"></a>3.2.3外连接查询</h4><p> 在内连接操作中，不满足连接条件的元组不能作为查询结果输出。在外部连接中，参与连接的表有主从之分，以主表的每行数据去匹配从表的数据列。</p><p> 符合连接条件的数据将直接返回到结果集中，对那些不符合连接条件的列，将被填上NULL值后再返回到结果集中（对BIT类型的列，由于BIT数据类型不允许有NULL值，因此将会被填上0值再返回到结果中）。</p><ul><li>外部连接分为左外部连接和右外部连接两种。以主表所在的方向区分外部连接，主表在左边，则称为左外部连接；主表在右边，则称为右外部连接。</li></ul><h5 id="使用外连接"><a href="#使用外连接" class="headerlink" title="使用外连接"></a>使用外连接</h5><p>A、left (outer) join：</p><p>左外连接(左连接)：结果集几包括连接表的匹配行，也包括左连接表的所有行。</p><p>SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a &#x3D; b.c</p><p>B：right (outer) join:</p><p>右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。</p><p>C：full&#x2F;cross (outer) join：</p><p>全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。</p><h4 id="3-2-4交叉查询-CROSS-JOIN"><a href="#3-2-4交叉查询-CROSS-JOIN" class="headerlink" title="3.2.4交叉查询 CROSS JOIN"></a>3.2.4交叉查询 CROSS JOIN</h4><p> <strong>交叉查询</strong>（CROSS JOIN）对连接查询的表没有特殊的要求，任何表都可以进行交叉查询操作。</p><h4 id="3-2-5自连接查询"><a href="#3-2-5自连接查询" class="headerlink" title="3.2.5自连接查询"></a>3.2.5自连接查询</h4><ul><li>当一个表与其自身进行连接时，称为表的自身连接；</li><li>需要给表起别名加以区别；</li><li>由于所有属性名都是同名属性，因此必须使用表别名前缀。</li></ul><hr><h3 id="3-3子查询（嵌套查询）"><a href="#3-3子查询（嵌套查询）" class="headerlink" title="3.3子查询（嵌套查询）"></a>3.3子查询（嵌套查询）</h3><p> 一个SELECT-FROM-WHERE语句称为一个查询块，将一个查询块嵌套在另一个查询块的WHERE子句中的查询称为嵌套查询。</p><ul><li>SQL语言允许多层嵌套查询。层层嵌套方式反映了SQL语言的结构化。</li><li>&#x3D;&#x3D;子查询的限制:不能使用ORDER BY子句。&#x3D;&#x3D;有些嵌套查询可以用连接查询替代</li></ul><h4 id="3-3-1普通子查询（子查询的查询条件不依赖父查询）"><a href="#3-3-1普通子查询（子查询的查询条件不依赖父查询）" class="headerlink" title="3.3.1普通子查询（子查询的查询条件不依赖父查询）"></a>3.3.1普通子查询（子查询的查询条件不依赖父查询）</h4><ul><li><p>引出子查询的谓词</p><blockquote><ul><li>带有比较运算符的子查询 返回单值</li><li></li><li>带有ANY或ALL谓词的子查询 返回一组值</li><li>带有IN谓词的子查询 返回一组值</li><li></li><li>带有EXISTS谓词的子查询</li></ul></blockquote></li></ul><h5 id="带有ANY或ALL谓词的子查询"><a href="#带有ANY或ALL谓词的子查询" class="headerlink" title="带有ANY或ALL谓词的子查询"></a>带有<strong>ANY</strong>或<strong>ALL</strong>谓词的子查询</h5><p> 如果子查询的返回值不止一个，而是一个集合时，则不能直接使用比较运算符，可以在比较运算符和子查询之间插入ANY或ALL。</p><blockquote><p>ANY 任意一个值</p><p>ALL 所有值</p></blockquote><ul><li>配合使用比较运算符</li></ul><p>ANY</p><table><thead><tr><th><strong>&gt;ANY</strong></th><th>大于子查询结果中的任意一个值（最小值）</th></tr></thead><tbody><tr><td><strong>&lt;ANY</strong></td><td><strong>小于子查询结果中的任意一个值（最大值）</strong></td></tr><tr><td><strong>&gt;&#x3D;ANY</strong></td><td><strong>大于等于子查询结果中的任意一个值</strong></td></tr><tr><td><strong>&lt;&#x3D;ANY</strong></td><td><strong>小于等于子查询结果中的任意一个值</strong></td></tr><tr><td><strong>&#x3D;ANY</strong></td><td><strong>等于子查询结果中的任意一个值</strong></td></tr><tr><td><strong>&lt;&gt;ANY</strong></td><td><strong>不等于子查询结果中的某一个值</strong></td></tr></tbody></table><p>ALL</p><table><thead><tr><th>&gt;ALL</th><th>大于子查询结果中的所有值（最大值）</th></tr></thead><tbody><tr><td><strong>&lt;ALL</strong></td><td><strong>小于子查询结果中的所有值（最小值）</strong></td></tr><tr><td><strong>&gt;&#x3D;ALL</strong></td><td><strong>大于等于子查询结果中的所有值</strong></td></tr><tr><td><strong>&lt;&#x3D;ALL</strong></td><td><strong>小于等于子查询结果中的所有值</strong></td></tr><tr><td><strong>&#x3D;ALL</strong></td><td><strong>等于子查询结果中的所有值</strong></td></tr><tr><td><strong>&lt;&gt;ALL</strong></td><td><strong>不等于子查询结果中的任何一个值</strong></td></tr></tbody></table><h5 id="带有IN谓词的子查询"><a href="#带有IN谓词的子查询" class="headerlink" title="带有IN谓词的子查询"></a>带有IN谓词的子查询</h5><ul><li>使用 <strong>IN</strong> 代替 <strong>“&#x3D;ANY”</strong></li></ul><h4 id="3-3-2相关子查询（子查询的查询条件依赖父查询）"><a href="#3-3-2相关子查询（子查询的查询条件依赖父查询）" class="headerlink" title="3.3.2相关子查询（子查询的查询条件依赖父查询）"></a>3.3.2相关子查询（子查询的查询条件依赖父查询）</h4><p> 相关子查询的<strong>执行顺序</strong>是：首先选取父查询表中的第一行记录，内部的子查询利用此行中相关的属性值进行查询，然后父查询根据子查询返回的结果判断此行是否满足查询条件。如果满足条件，则把该行放入父查询的查询结果集合中。重复执行这一过程，直到处理完父查询表中的每一行数据。</p><h5 id="带有EXISTS谓词的子查询"><a href="#带有EXISTS谓词的子查询" class="headerlink" title="带有EXISTS谓词的子查询"></a>带有EXISTS谓词的子查询</h5><ul><li>带有EXISTS的子查询不返回任何实际数据，它只得到逻辑值“真”或“假” 。</li><li>当子查询的的查询结果集合为非空时，外层的WHERE子句返回真值，否则返回假值。</li><li>NOT EXISTS与此相反。</li><li>由EXISTS引出的子查询，其目标列表达式通常都用“*”，因为带有EXISTS的子查询只返回真值或假值，给出列名无实际意义。</li></ul><h3 id="3-3-3集合运算查询"><a href="#3-3-3集合运算查询" class="headerlink" title="3.3.3集合运算查询"></a>3.3.3集合运算查询</h3><ul><li>合并查询就是使用UNION 操作符将来自不同查询的数据组合起来，形成一个具有综合信息的查询结果，UNION操作会自动将重复的数据行剔除。</li><li>参加合并查询的各子查询的使用的表结构应该相同，即各子查询中的数据数目和对应的数据类型都必须相同。</li></ul><h4 id="存储查询结果到表中"><a href="#存储查询结果到表中" class="headerlink" title="存储查询结果到表中"></a><strong>存储查询结果到表中</strong></h4><ul><li>使用SELECT…INTO 语句可以将查询结果存储到一个新建的数据库表或临时表中 。</li></ul><h2 id="四、数据表的操纵"><a href="#四、数据表的操纵" class="headerlink" title="四、数据表的操纵"></a>四、数据表的操纵</h2><h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><h4 id="（1）添加一行新记录"><a href="#（1）添加一行新记录" class="headerlink" title="（1）添加一行新记录"></a>（1）添加一行新记录</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [(<span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>…])] <span class="keyword">VALUES</span> (<span class="operator">&lt;</span>值<span class="operator">&gt;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>列名是可选项。列名的排列顺序不一定要和表定义时的顺序一致，但当指定列名时，VALUES子句中值的排列顺序必须和列名表中的列名排列顺序一致，个数相等，数据类型一一对应。</li><li>&lt;表名&gt;是指要添加新记录的表</li><li>&lt;列名&gt;是可选项，指定待添加数据的列</li><li>VALUES子句指定待添加数据的具体值。</li><li>必须用逗号将各个数据分开，字符型数据要用单引号括起来。</li><li>如果INTO子句中没有指定列名，则新添加的记录必须在每个属性列上均有值，且VALUES子句中值的排列顺序要和表中各属性列的排列顺序一致。</li></ul><h4 id="（2）添加一行记录的部分数据值"><a href="#（2）添加一行记录的部分数据值" class="headerlink" title="（2）添加一行记录的部分数据值"></a>（2）添加一行记录的部分数据值</h4><p> 将VALUES子句中的值按照INTO子句中指定列名的顺序添加到表中，对于INTO子句中没有出现的列，则新添加的记录在这些列上将赋NULL值，如上例的Age即赋NULL值。但在表定义时有NOT NULL约束的属性列不能取NULL值，插入时必须赋值。</p><blockquote><p>添加一行记录</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [(<span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>…])] <span class="keyword">VALUES</span> (<span class="operator">&lt;</span>值<span class="operator">&gt;</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="3-添加多行记录"><a href="#3-添加多行记录" class="headerlink" title="(3)添加多行记录"></a>(3)添加多行记录</h4><ul><li>将一个表中的数据抽取数行添加到另一个表中，可以通过子查询来实现。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> [(<span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>[,<span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>…])]</span><br><span class="line">子查询 </span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="修改数据-UPDATE"><a href="#修改数据-UPDATE" class="headerlink" title="修改数据 UPDATE"></a>修改数据 UPDATE</h3><p>用 <strong>SQL</strong> 命令修改数据</p><p>修改数据与修改基本表的区别</p><ul><li><strong>update</strong> 与 <strong>alter</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">SET</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> [,<span class="operator">&lt;</span>列名<span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="operator">&gt;</span>]…</span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>] </span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>有WHERE条件，修改符合要求的对应字段。</li><li>无WHERE条件，修改表中所有对应的字段。</li></ul><h3 id="删除数据-DELETE"><a href="#删除数据-DELETE" class="headerlink" title="删除数据 DELETE"></a>删除数据 DELETE</h3><p>删除数据与删除基本表的区别</p><ul><li><strong>delete</strong> 与 <strong>drop</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> </span><br><span class="line"><span class="keyword">FROM</span><span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>]</span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li>有WHERE条件，删除满足条件的记录</li><li>无WHERE条件，系统就会自动删除该表中所有的记录</li></ul><h2 id="五、视图"><a href="#五、视图" class="headerlink" title="五、视图"></a>五、视图</h2><p> 视图是从一个或几个基本表（或视图）导出的表，它与基本表不同，是一个虚表。同基本表一样，视图包含一系列带有名称的列和行数据。</p><ul><li>数据库中只存放视图的定义，而不存放视图对应的数据，这些数据仍存放在原来的基本表中。</li><li>基表中的数据发生变化，从视图中查询出的数据也随之改变。</li></ul><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><p><strong>SQL</strong> 命令创建视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span>  view_name  [ (<span class="keyword">column</span>[, ...n]) ] </span><br><span class="line"><span class="keyword">AS</span> select_statement </span><br><span class="line">[ <span class="keyword">WITH</span> <span class="keyword">CHECK</span> OPTION ][;]</span><br><span class="line"><span class="operator">&lt;</span>view_attribute<span class="operator">&gt;</span>::<span class="operator">=</span></span><br><span class="line">&#123;</span><br><span class="line">[ENCRYPTION]</span><br><span class="line">[SCHEMBINDING]</span><br><span class="line">[VIEW_METADATA] </span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789</span></span><br></pre></td></tr></table></figure><p>( 1 ) view_name:视图的名称，必须符合SQL Server 的标识符命名规则。<br>( 2 ) column:视图的列名称。仅在下列情况下需要列名:列是从算术表达式、函数或常量派生的;两个或更多的列可能会具有相同的名称（通常是由于联接的原因);视图中的某个列的指定名称不同于其派生来源列的名称。<br>( 3 ) select_statement:定义视图的SEIFCT语句。该语句可以使用多个表和其他视图。</p><p>( 4)CHECK OPTION:设置针对视图的所有数据修改语句都必须符合select_statement 中规定的条件。</p><p>( 5）ENCRYPTION:视图是加密的，如果加上这个选项，则无法修改视图。因此，创建视图时需要将脚本保存，否则再也不能修改了。</p><p>( 6 ) SCHEMABINDING:和底层引用的表进行定义绑定。加上这个选项的话，则视图引用的表不能随便更改构架（例如列的数据类型)，如果需要更改底层表构架，则先 DROP或者ALTER在底层表之上绑定的视图。SCHEMABINDIN常用于定义索引视图。</p><p>( 7 )VIEW_METADATA:不设置该选项，返回给客户端的metadata是视图所引用表的metadatao设置了该选项，则返回视图自身的 metadata。通俗点说，VIEW_METADATA可以让视图看起来貌似表一样，视图的每一列的定义直接告诉客户端，而不是所引用的底层表列的定义。</p><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p>用<strong>SQL</strong>命令修改视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span>[(<span class="operator">&lt;</span>视图列表<span class="operator">&gt;</span>)]</span><br><span class="line"><span class="keyword">AS</span> <span class="operator">&lt;</span>子查询<span class="operator">&gt;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><p>用<strong>SQL</strong>命令删除视图</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>该语句从数据字典中删除指定的视图定义。</li><li>视图删除后，由该视图导出的其他视图定义仍在数据字典中，但已不能使用，必须使用drop view语句删除。</li><li>删除基表后，由该基表导出的所有视图定义都必须使用drop view语句删除。</li></ul><h3 id="查询视图"><a href="#查询视图" class="headerlink" title="查询视图"></a>查询视图</h3><ul><li>DBMS内部执行对视图的查询时采用的的方法：视图消解</li></ul><p>视图消解是指将用户执行的对视图的查询，在DBMS内部转换成对导出视图的基本表的查询。</p><ul><li>DBMS先进行有效性检查，检查查询的表、视图等是否存在。</li><li>如果存在，则从数据字典中取出视图的定义，把视图定义中的子查询与用户的查询结合起来，转换成等价的对基本表的查询。</li><li>DBMS最终执行转换后的查询。</li></ul><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a>更新视图</h3><ul><li>更新视图是指通过视图来添加、修改和删除数据。</li><li>由于视图是一张虚表，所以对视图的更新，最终转换成对基本表的更新。</li><li>像查询视图那样，对视图的更新操作也是通过视图消解，转换为对基本表的更新操作一样 。</li></ul><blockquote><p>添加 INSERT</p><p>修改 UPDATE</p><p>删除 DELETE</p></blockquote><h2 id="六、索引"><a href="#六、索引" class="headerlink" title="六、索引"></a>六、索引</h2><ul><li>索引是一种可以加快检索的数据库结构。</li><li>通过创建良好的索引，可以显著提高数据库查询和应用程序的性能。</li><li>索引一旦创建，将由DBMS自动管理和维护。当操作数据时，DBMS会自动更新索引。</li></ul><p>要避免在一个表中创建大量的索引，否则会影响数据操作的性能，降低系统的响应速度。</p><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><h4 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h4><ul><li><strong>在聚集索引中，表中行的物理存储顺序与索引键的逻辑顺序相同。</strong> <strong>由于真正的物理存储只有一个，因此，一个表只能包含一个聚集索引。</strong></li></ul><h4 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h4><ul><li><strong>非聚集索引与聚集索引具有相似的索引结构。</strong></li></ul><p><strong>不同的是，非聚集索引不影响数据行的物理存储顺序。</strong></p><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><ul><li><strong>唯一索引能够保证索引键中不包含重复的值，从而使表中的每一行在某种方式上具有唯一性。</strong></li></ul><h4 id="视图索引"><a href="#视图索引" class="headerlink" title="视图索引"></a>视图索引</h4><ul><li><strong>对视图而言，查询动态生成的结果集开销很大，特别是涉及对大量行进行复杂处理的视图。</strong></li></ul><p><strong>如果在查询中频繁地引用这类视图，可通过对视图创建唯一聚集索引来提升性能，这类索引称为视图索引</strong>。</p><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><ul><li>全文索引是目前搜索引擎的关键技术之一。试想在1兆大小的文件中搜索一个词，可能需要几秒，在更大的文件中搜索开销会更大。为加快此类检索速度，出现了全文。索引技术，也称倒排文档技术。</li></ul><h4 id="XML索引"><a href="#XML索引" class="headerlink" title="XML索引"></a>XML索引</h4><ul><li>可以对xml数据类型列创建XML索引。XML索引对列中xml实例的所有标记、值和路径进行索引，提 高查询性能。</li></ul><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> [ <span class="keyword">UNIQUE</span> ][ CLUSTERED <span class="operator">|</span> NONCLUSTERED]  INDEX  index_name </span><br><span class="line"><span class="keyword">ON</span> table_or_view_name  ( column_name [ <span class="keyword">ASC</span> <span class="operator">|</span> <span class="keyword">DESC</span> ] [ ,…n] )</span><br><span class="line">[ <span class="keyword">WITH</span>  <span class="operator">&lt;</span>index_option<span class="operator">&gt;</span>  [, ...n] ]</span><br><span class="line">[ <span class="keyword">ON</span>  &#123; filegroup_name <span class="operator">|</span> &quot;default” &#125; ]</span><br><span class="line"></span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> INDEX &#123; index_name <span class="operator">|</span> <span class="keyword">ALL</span> &#125;</span><br><span class="line">   <span class="keyword">ON</span> table_or_view_name</span><br><span class="line">   &#123; REBUILD </span><br><span class="line">        [ [<span class="keyword">PARTITION</span> <span class="operator">=</span> <span class="keyword">ALL</span>]</span><br><span class="line">            [ <span class="keyword">WITH</span> ( <span class="operator">&lt;</span>rebuild_index_option<span class="operator">&gt;</span> [ ,...n ] ) ] </span><br><span class="line">            <span class="operator">|</span> [ <span class="keyword">PARTITION</span> <span class="operator">=</span> partition_number </span><br><span class="line">                    [ <span class="keyword">WITH</span> ( <span class="operator">&lt;</span>single_partition_rebuild_index_option<span class="operator">&gt;</span></span><br><span class="line">                        [ ,...n ] )</span><br><span class="line">               ]   ]  ]</span><br><span class="line">    <span class="operator">|</span> DISABLE</span><br><span class="line">    <span class="operator">|</span> REORGANIZE </span><br><span class="line">         [ <span class="keyword">PARTITION</span> <span class="operator">=</span> partition_number ]</span><br><span class="line">         [ <span class="keyword">WITH</span> ( LOB_COMPACTION <span class="operator">=</span> &#123; <span class="keyword">ON</span> <span class="operator">|</span> OFF &#125; ) ]</span><br><span class="line">  <span class="operator">|</span> <span class="keyword">SET</span> ( <span class="operator">&lt;</span>set_index_option<span class="operator">&gt;</span> [ ,...n ] ) </span><br><span class="line">    &#125;[ ; ]</span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span><span class="keyword">table</span> <span class="keyword">or</span> <span class="keyword">view</span> name<span class="operator">&gt;</span>.<span class="operator">&lt;</span>index name<span class="operator">&gt;</span></span><br><span class="line"><span class="keyword">DROP</span> INDEX <span class="operator">&lt;</span>index name<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">table</span> <span class="keyword">or</span> <span class="keyword">view</span> name<span class="operator">&gt;</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Sp_helpindex [<span class="variable">@objname</span> <span class="operator">=</span>] <span class="string">&#x27;name&#x27;</span> <span class="operator">/</span><span class="operator">/</span>[<span class="variable">@objname</span> <span class="operator">=</span>] <span class="string">&#x27;name&#x27;</span>表的名称</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>如果要更改索引名称，可利用Sp_rename存储过程更改，其语法如下：<ul><li>Sp_rename ‘数据表名.原索引名’, ‘新索引名’</li></ul></li></ul><h2 id="七、TIP小技巧sql"><a href="#七、TIP小技巧sql" class="headerlink" title="七、TIP小技巧sql"></a>七、TIP小技巧sql</h2><h3 id="1、复制表"><a href="#1、复制表" class="headerlink" title="1、复制表"></a>1、复制表</h3><p>(只复制结构,源表名：a 新表名：b) (Access可用)</p><p>法一：select * into bfrom a where 1&lt;&gt;1(仅用于SQlServer)</p><p>法二：select top 0 * intob from a</p><h3 id="2、拷贝表"><a href="#2、拷贝表" class="headerlink" title="2、拷贝表"></a>2、拷贝表</h3><p>(拷贝数据,源表名：a 目标表名：b) (Access可用)</p><p>insert into b(a, b, c) select d,e,f from b;</p><h3 id="3、跨数据库之间表的拷贝"><a href="#3、跨数据库之间表的拷贝" class="headerlink" title="3、跨数据库之间表的拷贝"></a>3、跨数据库之间表的拷贝</h3><p>(具体数据使用绝对路径) (Access可用)</p><p>insert into b(a, b, c) select d,e,f from bin ‘具体数据库’ where 条件</p><p>例子：…from b in’”&amp;Server.MapPath(“.”)&amp;”\data.mdb”&amp;”’ where…</p><h3 id="4、子查询-表名1：a-表名2：b"><a href="#4、子查询-表名1：a-表名2：b" class="headerlink" title="4、子查询(表名1：a 表名2：b)"></a>4、子查询(表名1：a 表名2：b)</h3><p>select a,b,c from a where a IN (select dfrom b ) 或者: select a,b,c from a wherea IN (1,2,3)</p><h3 id="5、显示文章、提交人和最后回复时间"><a href="#5、显示文章、提交人和最后回复时间" class="headerlink" title="5、显示文章、提交人和最后回复时间"></a>5、显示文章、提交人和最后回复时间</h3><p>select a.title,a.username,b.adddate from tablea,(select max(adddate) adddate from table where table.title&#x3D;a.title) b</p><h3 id="6、外连接查询-表名1：a-表名2：b"><a href="#6、外连接查询-表名1：a-表名2：b" class="headerlink" title="6、外连接查询(表名1：a 表名2：b)"></a>6、外连接查询(表名1：a 表名2：b)</h3><p>select a.a, a.b, a.c, b.c, b.d, b.f from aLEFT OUT JOIN b ON a.a &#x3D; b.c</p><h3 id="7、在线视图查询-表名1：a"><a href="#7、在线视图查询-表名1：a" class="headerlink" title="7、在线视图查询(表名1：a )"></a>7、在线视图查询(表名1：a )</h3><p>select * from (SELECT a,b,c FROM a) T wheret.a &gt; 1;</p><h3 id="8、between的用法-between限制查询数据范围时包括了边界值-not-between不包括"><a href="#8、between的用法-between限制查询数据范围时包括了边界值-not-between不包括" class="headerlink" title="8、between的用法,between限制查询数据范围时包括了边界值,not between不包括"></a>8、between的用法,between限制查询数据范围时包括了边界值,not between不包括</h3><p>select * from table1 where time between time1and time2</p><p>select a,b,c, from table1 where a not between 数值1 and 数值2</p><h3 id="9、in-的使用方法"><a href="#9、in-的使用方法" class="headerlink" title="9、in 的使用方法"></a>9、in 的使用方法</h3><p>select * from table1 where a [not] in (‘值1’,’值2’,’值4’,’值6’)</p><h3 id="10、两张关联表，删除主表中已经在副表中没有的信息"><a href="#10、两张关联表，删除主表中已经在副表中没有的信息" class="headerlink" title="10、两张关联表，删除主表中已经在副表中没有的信息"></a>10、两张关联表，删除主表中已经在副表中没有的信息</h3><p>delete from table1 where not exists (select * from table2 where table1.field1&#x3D;table2.field1 )</p><h3 id="11、数据库分页"><a href="#11、数据库分页" class="headerlink" title="11、数据库分页"></a>11、数据库分页</h3><p>一条sql 语句搞定数据库分页：select top 10 b.*from (select top 20 主键字段,排序字段 from 表名 orderby 排序字段 desc) a,表名 b where b.主键字段 &#x3D; a.主键字段 order by a.排序字段</p><p>具体实现：</p><p>关于数据库分页：</p><p>declare @start int,@end int</p><p>@sql nvarchar(600)</p><p>set @sql&#x3D;’select top’+str(@end-@start+1)+’+from T where rid not in(select top’+str(@str-1)+’Rid from T where Rid&gt;-1)’</p><p>exec sp_executesql @sql</p><p>注意：在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致(逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引)</p><h3 id="12、选择在每一组b值相同的数据中对应的a最大的记录的所有信息"><a href="#12、选择在每一组b值相同的数据中对应的a最大的记录的所有信息" class="headerlink" title="12、选择在每一组b值相同的数据中对应的a最大的记录的所有信息"></a>12、选择在每一组b值相同的数据中对应的a最大的记录的所有信息</h3><p>(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)</p><p>select a,b,c from tablename ta where a&#x3D;(select max(a) from tablenametb where tb.b&#x3D;ta.b)</p><h3 id="13、包括所有在-TableA-中但不在-TableB和TableC-中的行并消除所有重复行而派生出一个结果表"><a href="#13、包括所有在-TableA-中但不在-TableB和TableC-中的行并消除所有重复行而派生出一个结果表" class="headerlink" title="13、包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表"></a>13、包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表</h3><p>(select a from tableA ) except (select a fromtableB) except (select a from tableC)</p><h3 id="14、随机选择记录"><a href="#14、随机选择记录" class="headerlink" title="14、随机选择记录"></a>14、随机选择记录</h3><p>select newid()</p><h3 id="15、删除重复记录"><a href="#15、删除重复记录" class="headerlink" title="15、删除重复记录"></a>15、删除重复记录</h3><p>1),delete fromtablename where id not in (select max(id) from tablename group bycol1,col2,…)</p><p>2),select distinct *into temp from tablename</p><p>delete from tablename</p><p>insert into tablename select* from temp</p><p>评价： 这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作</p><p>3),例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段</p><p>alter table tablename</p><p>–添加一个自增列</p><p>add column_b int identity(1,1)</p><p>delete from tablename where column_b not in(</p><p>select max(column_b) from tablename group by column1,column2,…)</p><p>alter table tablename drop column column_b</p><h2 id="八、练习题"><a href="#八、练习题" class="headerlink" title="八、练习题"></a>八、练习题</h2><h3 id="5张选课教师、学生、关系表"><a href="#5张选课教师、学生、关系表" class="headerlink" title="5张选课教师、学生、关系表"></a>5张选课教师、学生、关系表</h3><p><img src="https://img-blog.csdnimg.cn/948d95484fe64ae9b5e4dc876f93089a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemh1YXl1bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/cbd9e243ac29411dbce1e4a729f2910d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemh1YXl1bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h3><h4 id="练习题3-1-1"><a href="#练习题3-1-1" class="headerlink" title="练习题3.1.1"></a>练习题3.1.1</h4><ol><li><strong>查询教师的全部信息</strong>。</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> T</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><ol><li><p><strong>查询全体教师的姓名</strong>、<strong>教师号和系别</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TN,Tno,Dept</span><br><span class="line"><span class="keyword">FROM</span> T</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="练习题3-1-2"><a href="#练习题3-1-2" class="headerlink" title="练习题3.1.2"></a>练习题3.1.2</h4><ul><li><strong>查询年龄大于18岁的学生的学号、姓名和系别。</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNo,SN,Dept</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> Age<span class="operator">&gt;</span><span class="number">18</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="练习题3-1-3"><a href="#练习题3-1-3" class="headerlink" title="练习题3.1.3"></a>练习题3.1.3</h4><ul><li><strong>查询所属院系是信息系且工资大于等于1000的教师的教师号、姓名和职称。</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TNo,TN,Prof</span><br><span class="line"><span class="keyword">FROM</span> T</span><br><span class="line"><span class="keyword">WHERE</span> Dept<span class="operator">=</span><span class="string">&#x27;信息&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> Sal<span class="operator">&gt;</span><span class="number">1000</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><h4 id="练习题3-1-5"><a href="#练习题3-1-5" class="headerlink" title="练习题3.1.5"></a>练习题3.1.5</h4><ul><li><strong>1、查询所有姓吴的学生的学号和姓名</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNo,SN</span><br><span class="line">FROMS</span><br><span class="line"><span class="keyword">WHERE</span> SN <span class="keyword">LIKE</span> <span class="string">&#x27;吴%&#x27;</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><ul><li><strong>2、查询工资大于1000且年龄大于30岁的教师的教师号、姓名、系别</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TNo,TN,Dept</span><br><span class="line"><span class="keyword">FROM</span> T</span><br><span class="line"><span class="keyword">WHERE</span> Sal<span class="operator">&gt;</span><span class="number">1000</span> <span class="keyword">AND</span> Age<span class="operator">&gt;</span><span class="number">30</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="练习-题常用库函数"><a href="#练习-题常用库函数" class="headerlink" title="练习 题常用库函数"></a>练习 题常用库函数</h4><ul><li>1、统计选修C1课程的学生总数o</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(SNo)<span class="keyword">AS</span>总人数</span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> CNo<span class="operator">=</span><span class="string">&#x27;C1&#x27;</span></span><br><span class="line"><span class="number">123</span></span><br></pre></td></tr></table></figure><h4 id="练习题3-1-7"><a href="#练习题3-1-7" class="headerlink" title="练习题3.1.7"></a>练习题3.1.7</h4><ul><li>查询选修三门以上（含三门）课程的学生的学号和成绩平均分</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNo,<span class="built_in">AVG</span>(Scpre)</span><br><span class="line"><span class="keyword">AS</span> 平均分</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> SNo <span class="keyword">HAVING</span></span><br><span class="line"><span class="built_in">COUNT</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">3</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><h4 id="练习题3-1-8"><a href="#练习题3-1-8" class="headerlink" title="练习题3.1.8"></a>练习题3.1.8</h4><ul><li>查询选修C2课程的学号、课程号和成绩。查询结果按成绩升序排列，成绩相同再按学号降序排列。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SNo,Score</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> CNo<span class="operator">=</span><span class="string">&#x27;C2&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> Score,SNo</span><br><span class="line"><span class="keyword">DESC</span></span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><hr><p><img src="https://img-blog.csdnimg.cn/04451b8efeaa49f6bc469a5e0126e76b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemh1YXl1bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/fd8fc2bab68146c9aa6e7a73821e77b5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAemh1YXl1bg==,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><h4 id="练习题-3-2-2"><a href="#练习题-3-2-2" class="headerlink" title="练习题 3.2.2"></a>练习题 3.2.2</h4><ul><li>查询“赵亦”同学所选修的课程，要求列出学号、姓名、课程号</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>方法<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> S.SNo,SN,CNo</span><br><span class="line"><span class="keyword">FROM</span> S,SC</span><br><span class="line"><span class="keyword">WHERE</span>(S.SNo<span class="operator">=</span>SC.SNo)</span><br><span class="line"><span class="keyword">AND</span>(SN<span class="operator">=</span><span class="string">&#x27;赵亦&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>方法<span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> S.SNo,SN,CNo</span><br><span class="line"><span class="keyword">FROM</span> S <span class="keyword">INNER</span> <span class="keyword">JOIN</span> SC</span><br><span class="line"><span class="keyword">ON</span> S.SNo<span class="operator">=</span>SC.SNo</span><br><span class="line"><span class="keyword">WHERE</span>(SN<span class="operator">=</span><span class="string">&#x27;亦&#x27;</span></span><br><span class="line"><span class="number">1234567891011</span></span><br></pre></td></tr></table></figure><h4 id="练习题-3-2-3"><a href="#练习题-3-2-3" class="headerlink" title="练习题 3.2.3"></a>练习题 3.2.3</h4><ul><li>查询所有老师的授课信息，列出教师号、姓名、课程号及课程名。(没有授课的教师的授课信息显示为空)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> T.TNo,TN,CNo,CN</span><br><span class="line"><span class="keyword">FROM</span> T</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> TC</span><br><span class="line"><span class="keyword">ON</span> T.TNo<span class="operator">=</span>TC.TNo</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> C</span><br><span class="line"><span class="keyword">ON</span> T.CNo<span class="operator">=</span>TC.CNo</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><h4 id="练习题-3-2-4"><a href="#练习题-3-2-4" class="headerlink" title="练习题 3.2.4"></a>练习题 3.2.4</h4><ul><li>检索所有老师的姓名、年龄以及授课名称</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>方法<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> TN,Age,CN</span><br><span class="line"><span class="keyword">FROM</span> T,C,TC</span><br><span class="line"><span class="keyword">WHERE</span> T.TNo<span class="operator">=</span>TC.TNo</span><br><span class="line"><span class="keyword">AND</span> TC.CNo<span class="operator">=</span>C.CNo</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>方法<span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> R3.TN,R3.Age,R4.CN</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> CNo,CNo <span class="keyword">FROM</span> T)<span class="keyword">AS</span> R3</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> R2.TNo,R1.CN)</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">SELECT</span> CNo,CN <span class="keyword">FROM</span> C) <span class="keyword">AS</span> R1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span></span><br><span class="line">(<span class="keyword">SELECT</span> TNo,CNo <span class="keyword">FROM</span> TC) <span class="keyword">AS</span> R2</span><br><span class="line"><span class="keyword">ON</span> R1.CNo<span class="operator">=</span>R2.CNo) <span class="keyword">AS</span> R4</span><br><span class="line"><span class="keyword">ON</span> R3.TNo<span class="operator">=</span>R4.TNo</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>方法<span class="number">3</span></span><br><span class="line"><span class="keyword">SELECT</span> R3.TN,R3.Age,R1.CN</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> TNo,TN,Age <span class="keyword">FROM</span> T) <span class="keyword">AS</span> R3,(<span class="keyword">SELECT</span> CNo,CN <span class="keyword">FROM</span> C) <span class="keyword">AS</span> R1,(<span class="keyword">SELECT</span> TNo,CNo <span class="keyword">FROM</span> TC) <span class="keyword">AS</span> R2 </span><br><span class="line"><span class="keyword">WHERE</span> R1.CNo<span class="operator">=</span>R2.CNo <span class="keyword">AND</span> R3.TNo<span class="operator">=</span>R2.TNo</span><br><span class="line"><span class="number">12345678910111213141516171819202122</span></span><br></pre></td></tr></table></figure><hr><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><h4 id="练习题-3-3-1"><a href="#练习题-3-3-1" class="headerlink" title="练习题 3.3.1"></a>练习题 3.3.1</h4><p>1、查询不是计算机系的选修<strong>C1</strong>课程的学生的姓名和年龄。(<strong>使用子查询方式</strong>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SN,AGE</span><br><span class="line"><span class="keyword">FROM</span> S </span><br><span class="line"><span class="keyword">WHERE</span> SNO<span class="operator">=</span><span class="keyword">ANY</span></span><br><span class="line">(<span class="keyword">SELECT</span> SNO</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> CNO<span class="operator">=</span>‘C1’)</span><br><span class="line"><span class="keyword">AND</span> DEPT<span class="operator">&lt;&gt;</span>’计算机’</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>2、查询比计算机系某一同学年龄小的学生的姓名和年龄</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>方法<span class="number">1</span></span><br><span class="line"><span class="keyword">SELECT</span> SN,AGE</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> AGE<span class="operator">&lt;</span><span class="keyword">ANY</span></span><br><span class="line">(<span class="keyword">SELECT</span> AGE</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> DEPT<span class="operator">=</span>‘计算机’)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>方法<span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> SN,AGE</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> AGE<span class="operator">&lt;</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(AGE)</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> DEPT<span class="operator">=</span>‘计算机’)</span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure><h4 id="练习题-3-3-2"><a href="#练习题-3-3-2" class="headerlink" title="练习题 3.3.2"></a>练习题 3.3.2</h4><p> 查询选修C2课程的学生姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SN</span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span></span><br><span class="line">(<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> CNO<span class="operator">=</span>‘C2’<span class="keyword">AND</span> S.SNO<span class="operator">=</span>SC.SNO)</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><ul><li>查询选修C2课程的学生的学号、姓名（使用连接查询、普通子查询、使用exists关键字的相关子查询）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">/</span><span class="operator">/</span>连接查询:</span><br><span class="line"><span class="keyword">SELECT</span> S.SNo,SN </span><br><span class="line"><span class="keyword">FROM</span> S,SC</span><br><span class="line"><span class="keyword">WHERE</span> S.SNo<span class="operator">=</span>SC.SNo <span class="keyword">AND</span> CNo<span class="operator">=</span><span class="string">&#x27;C2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>普通子查询:</span><br><span class="line"><span class="keyword">SELECT</span> SNo,SN </span><br><span class="line"><span class="keyword">FROM</span> S</span><br><span class="line"><span class="keyword">WHERE</span> SNo<span class="operator">=</span><span class="keyword">ANY</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> SNo <span class="keyword">FROM</span> SC</span><br><span class="line">    <span class="keyword">WHERE</span> CNo<span class="operator">=</span><span class="string">&#x27;C2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>相关子查询:</span><br><span class="line"><span class="keyword">SELECT</span> SNOSN FROMS</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span><span class="operator">*</span> <span class="keyword">FROM</span> SC </span><br><span class="line">    <span class="keyword">WHERE</span> CNo<span class="operator">=</span><span class="string">&#x27;C2&#x27;</span><span class="keyword">AND</span> S.SNo<span class="operator">=</span>SC.SNo)</span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li>创建一个计算机系学生的视图，该视图的属性列由学号、姓名、课程号和任课教师号组成。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> JSJ_S</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> S.SNO,SN,SC.CNO,TNO</span><br><span class="line"><span class="keyword">FROM</span> S,SC,TC</span><br><span class="line"><span class="keyword">WHERE</span> S.SNO<span class="operator">=</span>SC.SNO <span class="keyword">AND</span> SC.CNO<span class="operator">=</span>TC.CNO</span><br><span class="line"><span class="keyword">AND</span> DEPT<span class="operator">=</span>‘计算机’</span><br><span class="line"><span class="number">123456</span></span><br></pre></td></tr></table></figure><p>文章知识点与官方知</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发介绍</title>
      <link href="/2023/06/30/Web%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/06/30/Web%E5%BC%80%E5%8F%91%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Web开发介绍"><a href="#Web开发介绍" class="headerlink" title="Web开发介绍"></a>Web开发介绍</h1><h1 id="1-什么是web开发"><a href="#1-什么是web开发" class="headerlink" title="1 什么是web开发"></a>1 什么是web开发</h1><p><strong>Web</strong>：全球广域网，也称为<strong>万维网</strong>(www <strong>W</strong>orld <strong>W</strong>ide <strong>W</strong>eb)，能够通过浏览器访问的<strong>网站</strong>。</p><p>所以<strong>Web开发</strong>说白了，就是<strong>开发网站</strong>的，例如下图所示的网站：<strong>淘宝</strong>，<strong>京东</strong>等等</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667546541068.png"></p><p>那么我们知道了web开发是开发网站的，那么我们需要学习哪些知识呢？以及这些知识在我们整个网站开发中占据什么位置呢？对于这些问题，我们就必须知道网站整体的工作流程。</p><h1 id="2-网站的工作流程"><a href="#2-网站的工作流程" class="headerlink" title="2 网站的工作流程"></a>2 网站的工作流程</h1><p>接下来我们先来看看网站的工作流程，这样才能在我们的脑海中构建初步的知识架构体系。</p><p>1.首先我们需要通过<strong>浏览器</strong>访问发布到<strong>前端服务器</strong>中的<strong>前端程序</strong>，这时候前端程序会将前端代码返回给浏览器。如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667546920773.png"></p><p>2.浏览器得到前端代码，此时浏览器会将前端代码进行解析，然后展示到浏览器的窗口中，这时候我们就看到了<strong>网站</strong>的<strong>页面</strong>，如下图所示：</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667547421140.png"></p><p>3.但是此时这个页面是没有数据的，因为数据在我们的数据库中，所以我们浏览器需要根据<strong>前端代码中指定的后台服务器的地址</strong> 向 我们的<strong>后台服务器</strong>（内部有java程序）发起<strong>请求</strong>，后台服务器再去从<strong>数据库</strong>中获取数据，然后返回给浏览器。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667547561387.png"></p><p>4.浏览器拿到后台返回的数据后，然后将数据展示在前端资源也就是<strong>网页</strong>上，然后我们就看到了如下图所示的完整的内容</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667547604517.png"></p><p><strong>整个流程如下：</strong></p><p>1.浏览器先向前端服务器请求<strong>前端资源</strong>，也就是我们所说的<strong>网页</strong></p><p>2.浏览器再向<strong>后台服务器</strong>发起请求，获取<strong>数据</strong></p><p>3.浏览器将得到的后台<strong>数据</strong>填充到<strong>网页</strong>上，然后展示给用户去看</p><h1 id="3-网站的开发模式"><a href="#3-网站的开发模式" class="headerlink" title="3 网站的开发模式"></a>3 网站的开发模式</h1><p>接下来我们来聊聊网站的开发模式，主要有2种：前端台分离和混合开发</p><p><strong>前后台分离</strong>：（<strong>目前企业开发的主流，</strong>市场占有率70%以上）这种开发模式的特点如下</p><ul><li><p>前端人员开发前端程序，前端程序单独部署到前端服务器上</p></li><li><p>后端人员开开发后端程序，后端程序单独部署到后端服务器上</p></li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667548530745.png"></p><p><strong>混合开发：</strong>（早期的开发技术，目前慢慢退出市场），这种开发模式的特点是：前端人员开发的代码和后端人员开发的代码在同一个项目中，一起打包部署。</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667548590602.png"></p><h1 id="4-网站的开发技术"><a href="#4-网站的开发技术" class="headerlink" title="4 网站的开发技术"></a>4 网站的开发技术</h1><p>最后我们来看看web阶段需要学习哪些技术呢？如下图我们列举了课程中需要学习的知识点</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/1667548969631.png"></p><p>以下是图表的方式整理了web阶段要学习的技术和其对应的作用</p><p>前端web开发：</p><table><thead><tr><th>技术</th><th>描述</th></tr></thead><tbody><tr><td>HTML</td><td>用于构建网站的基础结构的</td></tr><tr><td>css</td><td>用于美化页面的，作用和化妆或者整容作用一样</td></tr><tr><td>JavaScript</td><td>实现网页和用户的交互</td></tr><tr><td>Vue</td><td>主要用于将数据填充到html页面上的</td></tr><tr><td>Element</td><td>主要提供了一些非常美观的组件</td></tr><tr><td>Nginx</td><td>一款web服务器软件，可以用于部署我们的前端工程</td></tr></tbody></table><p>后端web开发：</p><table><thead><tr><th>技术</th><th>描述</th></tr></thead><tbody><tr><td>Maven</td><td>一款java中用于管理项目的软件</td></tr><tr><td>Mysql</td><td>最常用的一款数据库软件之一</td></tr><tr><td>SpringBoot</td><td>spring家族的产品，当前最为主流的项目开发技术。</td></tr><tr><td>Mybatis</td><td>用于操作数据库的框架</td></tr></tbody></table><p>所以只有学完上述的技术，才能开发出一个麻雀虽小，五脏俱全的网站。</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令笔记</title>
      <link href="/2023/06/30/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/06/30/Linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux基础命令"><a href="#Linux基础命令" class="headerlink" title="Linux基础命令"></a>Linux基础命令</h1><h2 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027214128.png"></p><ul><li><code>/</code>，根目录是最顶级的目录了</li><li>Linux只有一个顶级目录：<code>/</code></li><li>路径描述的层次关系同样适用<code>/</code>来表示</li><li>&#x2F;home&#x2F;itheima&#x2F;a.txt，表示根目录下的home文件夹内有itheima文件夹，内有a.txt</li></ul><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><p>功能：列出文件夹信息</p><p>语法：<code>ls [-l -h -a] [参数]</code></p><ul><li>参数：被查看的文件夹，不提供参数，表示查看当前工作目录</li><li>-l，以列表形式查看</li><li>-h，配合-l，以更加人性化的方式显示文件大小</li><li>-a，显示隐藏文件</li></ul><h3 id="隐藏文件、文件夹"><a href="#隐藏文件、文件夹" class="headerlink" title="隐藏文件、文件夹"></a>隐藏文件、文件夹</h3><p>在Linux中以<code>.</code>开头的，均是隐藏的。</p><p>默认不显示出来，需要<code>-a</code>选项才可查看到。</p><h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2><p>功能：展示当前工作目录</p><p>语法：<code>pwd</code></p><h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2><p>功能：切换工作目录</p><p>语法：<code>cd [目标目录]</code></p><p>参数：目标目录，要切换去的地方，不提供默认切换到<code>当前登录用户HOME目录</code></p><h2 id="HOME目录"><a href="#HOME目录" class="headerlink" title="HOME目录"></a>HOME目录</h2><p>每一个用户在Linux系统中都有自己的专属工作目录，称之为HOME目录。</p><ul><li><p>普通用户的HOME目录，默认在：<code>/home/用户名</code></p></li><li><p>root用户的HOME目录，在：<code>/root</code></p></li></ul><p>FinalShell登陆终端后，默认的工作目录就是用户的HOME目录</p><h2 id="相对路径、绝对路径"><a href="#相对路径、绝对路径" class="headerlink" title="相对路径、绝对路径"></a>相对路径、绝对路径</h2><ul><li><p>相对路径，&#x3D;&#x3D;非&#x3D;&#x3D;<code>/</code>开头的称之为相对路径</p><p>相对路径表示以<code>当前目录</code>作为起点，去描述路径，如<code>test/a.txt</code>，表示当前工作目录内的test文件夹内的a.txt文件</p></li><li><p>绝对路径，&#x3D;&#x3D;以&#x3D;&#x3D;<code>/</code>开头的称之为绝对路径</p><p>绝对路径从<code>根</code>开始描述路径</p></li></ul><h2 id="特殊路径符"><a href="#特殊路径符" class="headerlink" title="特殊路径符"></a>特殊路径符</h2><ul><li><code>.</code>，表示当前，比如.&#x2F;a.txt，表示当前文件夹内的<code>a.txt</code>文件</li><li><code>..</code>，表示上级目录，比如<code>../</code>表示上级目录，<code>../../</code>表示上级的上级目录</li><li><code>~</code>，表示用户的HOME目录，比如<code>cd ~</code>，即可切回用户HOME目录</li></ul><h2 id="mkdir命令"><a href="#mkdir命令" class="headerlink" title="mkdir命令"></a>mkdir命令</h2><p>功能：创建文件夹</p><p>语法：<code>mkdir [-p] 参数</code></p><ul><li>参数：被创建文件夹的路径</li><li>选项：-p，可选，表示创建前置路径</li></ul><h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>功能：创建文件</p><p>语法：<code>touch 参数</code></p><ul><li>参数：被创建的文件路径</li></ul><h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><p>功能：查看文件内容</p><p>语法：<code>cat 参数</code></p><ul><li>参数：被查看的文件路径</li></ul><h2 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h2><p>功能：查看文件，可以支持翻页查看</p><p>语法：<code>more 参数</code></p><ul><li>参数：被查看的文件路径</li><li>在查看过程中：<ul><li><code>空格</code>键翻页</li><li><code>q</code>退出查看</li></ul></li></ul><h2 id="cp命令"><a href="#cp命令" class="headerlink" title="cp命令"></a>cp命令</h2><p>功能：复制文件、文件夹</p><p>语法：<code>cp [-r] 参数1 参数2</code></p><ul><li>参数1，被复制的</li><li>参数2，要复制去的地方</li><li>选项：-r，可选，复制文件夹使用</li></ul><p>示例：</p><ul><li>cp a.txt b.txt，复制当前目录下a.txt为b.txt</li><li>cp a.txt test&#x2F;，复制当前目录a.txt到test文件夹内</li><li>cp -r test test2，复制文件夹test到当前文件夹内为test2存在</li></ul><h2 id="mv命令"><a href="#mv命令" class="headerlink" title="mv命令"></a>mv命令</h2><p>功能：移动文件、文件夹</p><p>语法：<code>mv 参数1 参数2</code></p><ul><li>参数1：被移动的</li><li>参数2：要移动去的地方，参数2如果不存在，则会进行改名</li></ul><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><p>功能：删除文件、文件夹</p><p>语法：<code>rm [-r -f] 参数...参数</code></p><ul><li>参数：支持多个，每一个表示被删除的，空格进行分隔</li><li>选项：-r，删除文件夹使用</li><li>选项：-f，强制删除，不会给出确认提示，一般root用户会用到</li></ul><blockquote><p>rm命令很危险，一定要注意，特别是切换到root用户的时候。</p></blockquote><h2 id="which命令"><a href="#which命令" class="headerlink" title="which命令"></a>which命令</h2><p>功能：查看命令的程序本体文件路径</p><p>语法：<code>which 参数</code></p><ul><li>参数：被查看的命令</li></ul><h2 id="find命令"><a href="#find命令" class="headerlink" title="find命令"></a>find命令</h2><p>功能：搜索文件</p><p>语法1按文件名搜索：<code>find 路径 -name 参数</code></p><ul><li>路径，搜索的起始路径</li><li>参数，搜索的关键字，支持通配符*， 比如：<code>*</code>test表示搜索任意以test结尾的文件</li></ul><h2 id="grep命令"><a href="#grep命令" class="headerlink" title="grep命令"></a>grep命令</h2><p>功能：过滤关键字</p><p>语法：<code>grep [-n] 关键字 文件路径</code></p><ul><li>选项-n，可选，表示在结果中显示匹配的行的行号。</li><li>参数，关键字，必填，表示过滤的关键字，带有空格或其它特殊符号，建议使用””将关键字包围起来</li><li>参数，文件路径，必填，表示要过滤内容的文件路径，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可以作为管道符的输入</p></blockquote><h2 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h2><p>功能：统计</p><p>语法：<code>wc [-c -m -l -w] 文件路径</code></p><ul><li>选项，-c，统计bytes数量</li><li>选项，-m，统计字符数量</li><li>选项，-l，统计行数</li><li>选项，-w，统计单词数量</li><li>参数，文件路径，被统计的文件，可作为内容输入端口</li></ul><blockquote><p>参数文件路径，可作为管道符的输入</p></blockquote><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符|"></a>管道符|</h2><p>写法：<code>|</code></p><p>功能：将符号左边的结果，作为符号右边的输入</p><p>示例：</p><p><code>cat a.txt | grep itheima</code>，将cat a.txt的结果，作为grep命令的输入，用来过滤<code>itheima</code>关键字</p><p>可以支持嵌套：</p><p><code>cat a.txt | grep itheima | grep itcast</code></p><h2 id="echo命令"><a href="#echo命令" class="headerlink" title="echo命令"></a>echo命令</h2><p>功能：输出内容</p><p>语法：<code>echo 参数</code></p><ul><li>参数：被输出的内容</li></ul><h2 id="反引号"><a href="#反引号" class="headerlink" title="&#96;反引号"></a>&#96;反引号</h2><p>功能：被两个反引号包围的内容，会作为命令执行</p><p>示例：</p><ul><li>echo `pwd`，会输出当前工作目录</li></ul><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><p>功能：查看文件尾部内容</p><p>语法：<code>tail [-f] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-f，持续跟踪文件修改</li></ul><h2 id="head命令"><a href="#head命令" class="headerlink" title="head命令"></a>head命令</h2><p>功能：查看文件头部内容</p><p>语法：<code>head [-n] 参数</code></p><ul><li>参数：被查看的文件</li><li>选项：-n，查看的行数</li></ul><h2 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h2><p>功能：将符号左边的结果，输出到右边指定的文件中去</p><ul><li><code>&gt;</code>，表示覆盖输出</li><li><code>&gt;&gt;</code>，表示追加输出</li></ul><h2 id="vi编辑器"><a href="#vi编辑器" class="headerlink" title="vi编辑器"></a>vi编辑器</h2><h3 id="命令模式快捷键"><a href="#命令模式快捷键" class="headerlink" title="命令模式快捷键"></a>命令模式快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215841.png"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215846.png"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215849.png"></p><h3 id="底线命令快捷键"><a href="#底线命令快捷键" class="headerlink" title="底线命令快捷键"></a>底线命令快捷键</h3><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027215858.png"></p><h2 id="命令的选项"><a href="#命令的选项" class="headerlink" title="命令的选项"></a>命令的选项</h2><p>我们学习的一系列Linux命令，它们所拥有的选项都是非常多的。</p><p>比如，简单的ls命令就有：-a -A -b -c -C -d -D -f -F -g -G -h -H -i -I -k -l -L -m -n -N -o -p -q -Q -r-R -s -S -t -T -u -U -v -w -x -X -1等选项，可以发现选项是极其多的。</p><p>课程中， 并不会将全部的选项都进行讲解，否则，一个ls命令就可能讲解2小时之久。</p><p>课程中，会对常见的选项进行讲解， 足够满足绝大多数的学习、工作场景。</p><h3 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h3><p>可以通过：<code>命令 --help</code>查看命令的帮助手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220005.png"></p><h3 id="查看命令的详细手册"><a href="#查看命令的详细手册" class="headerlink" title="查看命令的详细手册"></a>查看命令的详细手册</h3><p>可以通过：<code>man 命令</code>查看某命令的详细手册</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220010.png"></p><h1 id="Linux常用操作"><a href="#Linux常用操作" class="headerlink" title="Linux常用操作"></a>Linux常用操作</h1><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><ul><li>CentOS系统使用：<ul><li>yum [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li><li>Ubuntu系统使用<ul><li>apt [install remove search] [-y] 软件名称<ul><li>install 安装</li><li>remove 卸载</li><li>search 搜索</li><li>-y，自动确认</li></ul></li></ul></li></ul><blockquote><p>yum 和 apt 均需要root权限</p></blockquote><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><p>功能：控制系统服务的启动关闭等</p><p>语法：<code>systemctl start | stop | restart | disable | enable | status 服务名</code></p><ul><li>start，启动</li><li>stop，停止</li><li>status，查看状态</li><li>disable，关闭开机自启</li><li>enable，开启开机自启</li><li>restart，重启</li></ul><h2 id="防火墙操作"><a href="#防火墙操作" class="headerlink" title="防火墙操作"></a>防火墙操作</h2><ul><li><p>永久关闭防火墙(systemctl disable firewalld)</p></li><li><p>开启防火墙(systemctl start firewalld)</p></li><li><p>开放指定端口(firewall-cmd –zone&#x3D;public –add-port&#x3D;8080&#x2F;tcp –permanent)</p></li><li><p>关闭指定端口(firewall-cmd –zone&#x3D;public –remove-port&#x3D;8080&#x2F;tcp –permanent)</p></li><li><p>立即生效(firewall-cmd –reload)</p></li><li><p>查看开放的端口(firewall-cmd –zone&#x3D;public –list-ports)</p></li></ul><h2 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h2><p>功能：创建文件、文件夹软链接（快捷方式）</p><p>语法：<code>ln -s 参数1 参数2</code></p><ul><li>参数1：被链接的</li><li>参数2：要链接去的地方（快捷方式的名称和存放位置）</li></ul><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><p>语法：<code>date [-d] [+格式化字符串]</code></p><ul><li><p>-d 按照给定的字符串显示日期，一般用于日期计算</p></li><li><p>格式化字符串：通过特定的字符串标记，来控制显示的日期格式</p><ul><li>%Y   年%y   年份后两位数字 (00..99)</li><li>%m   月份 (01..12)</li><li>%d   日 (01..31)</li><li>%H   小时 (00..23)</li><li>%M   分钟 (00..59)</li><li>%S   秒 (00..60)</li><li>%s   自 1970-01-01 00:00:00 UTC 到现在的秒数</li></ul></li></ul><p>示例：</p><ul><li><p>按照2022-01-01的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220514.png"></p></li><li><p>按照2022-01-01 10:00:00的格式显示日期</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220525.png"></p></li><li><p>-d选项日期计算</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220429.png"></p><ul><li><p>支持的时间标记为：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220449.png"></p></li></ul></li></ul><h2 id="时区"><a href="#时区" class="headerlink" title="时区"></a>时区</h2><p>修改时区为中国时区</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027220554.png" alt="image-20221027220554654"></p><h2 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h2><p>功能：同步时间</p><p>安装：<code>yum install -y ntp</code></p><p>启动管理：<code>systemctl start | stop | restart | status | disable | enable ntpd</code></p><p>手动校准时间：<code>ntpdate -u ntp.aliyun.com</code></p><h2 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h2><p>格式：a.b.c.d</p><ul><li>abcd为0~255的数字</li></ul><p>特殊IP：</p><ul><li>127.0.0.1，表示本机</li><li>0.0.0.0<ul><li>可以表示本机</li><li>也可以表示任意IP（看使用场景）</li></ul></li></ul><p>查看ip：<code>ifconfig</code></p><h2 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h2><p>功能：Linux系统的名称</p><p>查看：<code>hostname</code></p><p>设置：<code>hostnamectl set-hostname 主机名</code></p><h2 id="配置VMware固定IP"><a href="#配置VMware固定IP" class="headerlink" title="配置VMware固定IP"></a>配置VMware固定IP</h2><ol><li><p>修改VMware网络，参阅PPT，图太多</p></li><li><p>设置Linux内部固定IP</p><p>修改文件：<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></p><p>示例文件内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;# 改为static，固定IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;1b0011cb-0d2e-4eaa-8a11-af7d50ebc876&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">IPADDR=&quot;192.168.88.131&quot;# IP地址，自己设置，要匹配网络范围</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;# 子网掩码，固定写法255.255.255.0</span><br><span class="line">GATEWAY=&quot;192.168.88.2&quot;# 网关，要和VMware中配置的一致</span><br><span class="line">DNS1=&quot;192.168.88.2&quot;# DNS1服务器，和网关一致即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h2><p>功能：查看进程信息</p><p>语法：<code>ps -ef</code>，查看全部进程信息，可以搭配grep做过滤：<code>ps -ef | grep xxx</code></p><p><img src="C:\Users\35351\AppData\Roaming\Typora\typora-user-images\image-20230315161645916.png" alt="image-20230315161645916"></p><h2 id="kill命令"><a href="#kill命令" class="headerlink" title="kill命令"></a>kill命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221303.png"></p><h2 id="nmap命令"><a href="#nmap命令" class="headerlink" title="nmap命令"></a>nmap命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221241.png"></p><h2 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h2><p>功能：查看端口占用</p><p>用法：<code>netstat -anp | grep xxx</code></p><h2 id="ping命令"><a href="#ping命令" class="headerlink" title="ping命令"></a>ping命令</h2><p>测试网络是否联通</p><p>语法：<code>ping [-c num] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221129.png"></p><h2 id="wget命令"><a href="#wget命令" class="headerlink" title="wget命令"></a>wget命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221149.png"></p><h2 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221201.png" alt="image-20221027221201079"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221210.png"></p><h2 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h2><p>功能：查看主机运行状态</p><p>语法：<code>top</code>，查看基础信息</p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230315164010462.png"></p><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230315164539857.png"></p><p>可用选项：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221340.png"></p><p>交互式模式中，可用快捷键：</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221354.png"></p><h2 id="df命令"><a href="#df命令" class="headerlink" title="df命令"></a>df命令</h2><p>查看磁盘占用（使用率）</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221413.png"></p><h2 id="iostat命令"><a href="#iostat命令" class="headerlink" title="iostat命令"></a>iostat命令</h2><p>查看CPU、磁盘的相关信息</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221440.png"></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221514.png"></p><h2 id="sar命令"><a href="#sar命令" class="headerlink" title="sar命令"></a>sar命令</h2><p>查看网络统计</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221545.png"></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>env:可查看当前系统中记录的环境变量</p><ul><li>临时设置：export 变量名&#x3D;变量值</li><li>永久设置：<ul><li>针对用户，设置用户HOME目录内：<code>.bashrc</code>文件</li><li>针对全局，设置<code>/etc/profile</code></li></ul></li></ul><h3 id="PATH变量"><a href="#PATH变量" class="headerlink" title="PATH变量"></a>PATH变量</h3><p>记录了执行程序的搜索路径</p><p>可以将自定义路径加入PATH内，实现自定义命令在任意地方均可执行的效果</p><p><img src="https://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230316173436722.png"></p><h2 id="符号"><a href="#符号" class="headerlink" title="$符号"></a>$符号</h2><p>可以取出指定的环境变量的值</p><p>语法：<code>$变量名</code></p><p>示例：</p><p><code>echo $PATH</code>，输出PATH环境变量的值</p><p><code>echo $&#123;PATH&#125;ABC</code>，输出PATH环境变量的值以及ABC</p><p>如果变量名和其它内容混淆在一起，可以使用${}</p><p><img src="https://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230315161645916.png"></p><h2 id="压缩解压"><a href="#压缩解压" class="headerlink" title="压缩解压"></a>压缩解压</h2><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p><img src="/linux%E8%AF%BE%E7%A8%8B%E7%AC%94%E8%AE%B0/1.png"></p><p><img src="https://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/2.png"></p><p><code>tar -zcvf 压缩包 被压缩1...被压缩2...被压缩N</code></p><ul><li>-z表示使用gzip，可以不写</li></ul><p><code>zip [-r] 参数1 参数2 参数N</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221906.png" alt="image-20221027221906247"></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h3><p><code>tar -zxvf 被解压的文件 -C 要解压去的地方</code></p><ul><li>-z表示使用gzip，可以省略</li><li>-C，可以省略，指定要解压去的地方，不写解压到当前目录</li></ul><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230323161846247.png"></p><p><code>unzip [-d] 参数</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027221939.png"></p><h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><p>切换用户</p><p>语法：<code>su [-] [用户]</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222021.png"></p><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222035.png"></p><p>比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itheima ALL=(ALL)       NOPASSWD: ALL</span><br></pre></td></tr></table></figure><p>在visudo内配置如上内容，可以让itheima用户，无需密码直接使用<code>sudo</code></p><h2 id="chmod命令"><a href="#chmod命令" class="headerlink" title="chmod命令"></a>chmod命令</h2><p>修改文件、文件夹权限</p><p>语法：<code>chmod [-R] 权限 参数</code></p><ul><li><p>权限，要设置的权限，比如755，表示：<code>rwxr-xr-x</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222157.png"></p></li><li><p>参数，被修改的文件、文件夹</p></li><li><p>选项-R，设置文件夹和其内部全部内容一样生效</p></li></ul><h2 id="chown命令"><a href="#chown命令" class="headerlink" title="chown命令"></a>chown命令</h2><p>修改文件、文件夹所属用户、组</p><p>语法：<code>chown [-R] [用户][:][用户组] 文件或文件夹</code></p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222326.png"></p><h2 id="用户组管理"><a href="#用户组管理" class="headerlink" title="用户组管理"></a>用户组管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222354.png"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222407.png" alt="image-20221027222407618"></p><h2 id="genenv命令"><a href="#genenv命令" class="headerlink" title="genenv命令"></a>genenv命令</h2><ul><li><p><code>getenv group</code>，查看系统全部的用户组</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222446.png"></p></li><li><p><code>getenv passwd</code>，查看系统全部的用户</p><p><img src="https://image-set.oss-cn-zhangjiakou.aliyuncs.com/img-out/2022/10/27/20221027222512.png"></p></li></ul><h2 id="env命令"><a href="#env命令" class="headerlink" title="env命令"></a>env命令</h2><p>查看系统全部的环境变量</p><p>语法：<code>env</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用sql语句笔记</title>
      <link href="/2023/06/30/sql%E8%AF%AD%E5%8F%A5/"/>
      <url>/2023/06/30/sql%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="DDL-Data-Definition-Language-数据定义语言"><a href="#DDL-Data-Definition-Language-数据定义语言" class="headerlink" title="DDL(Data Definition Language)数据定义语言"></a>DDL(Data Definition Language)数据定义语言</h1><h2 id="一、操作库"><a href="#一、操作库" class="headerlink" title="一、操作库"></a>一、操作库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建库</span></span><br><span class="line"><span class="keyword">create</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建库是否存在，不存在则创建</span></span><br><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> db1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看所有数据库</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看某个数据库的定义信息 </span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据库字符信息</span></span><br><span class="line"><span class="keyword">alter</span> database db1 <span class="type">character</span> <span class="keyword">set</span> utf8; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据库</span></span><br><span class="line"><span class="keyword">drop</span> database db1; </span><br></pre></td></tr></table></figure><h1 id="类型"><a href="#类型" class="headerlink" title="类型-"></a>类型-</h1><p>数据类型 在上述的建表语句中，我们在指定字段的数据类型时，用到了int ，varchar，那么在MySQL中除了 以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。 MySQL中的数据类型有很多，主要分为三类：数值类型、字符串类型、日期时间类型。</p><h2 id="一、数值类型"><a href="#一、数值类型" class="headerlink" title="一、数值类型"></a>一、数值类型</h2><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230316095205662.png"></p><h2 id="二、-字符串类型"><a href="#二、-字符串类型" class="headerlink" title="二、 字符串类型"></a>二、 字符串类型</h2><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230316095338742.png"></p><h2 id="三、日期时间类"><a href="#三、日期时间类" class="headerlink" title="三、日期时间类"></a>三、日期时间类</h2><p><img src="http://reggie-xiamou.oss-cn-beijing.aliyuncs.com/img/image-20230316095452346.png"></p><h2 id="四、操作表"><a href="#四、操作表" class="headerlink" title="四、操作表"></a>四、操作表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--创建表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    age <span class="type">int</span> ,</span><br><span class="line">    score <span class="keyword">double</span>(<span class="number">4</span>,<span class="number">1</span>),</span><br><span class="line">    birthday <span class="type">date</span>,</span><br><span class="line">    insert_time <span class="type">timestamp</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表结构</span></span><br><span class="line"><span class="keyword">desc</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看创建表的SQL语句</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新的表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 列名 数据类型;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除列</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> 列名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span>  if <span class="keyword">exists</span> 表名 ;</span><br></pre></td></tr></table></figure><h1 id="DML-Data-Manipulation-Language-数据操作语言"><a href="#DML-Data-Manipulation-Language-数据操作语言" class="headerlink" title="DML(Data Manipulation Language)数据操作语言"></a>DML(Data Manipulation Language)数据操作语言</h1><h2 id="一、增加-insert-into"><a href="#一、增加-insert-into" class="headerlink" title="一、增加 insert into"></a>一、增加 <a href="https://so.csdn.net/so/search?q=insert&spm=1001.2101.3001.7020">insert</a> into</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 写全所有列名</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>,...列名n) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...值n);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不写列名（所有列全部添加）</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,...值n);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入部分数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名<span class="number">1</span>,列名<span class="number">2</span>) <span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h2 id="二、删除-delete"><a href="#二、删除-delete" class="headerlink" title="二、删除 delete"></a>二、删除 delete</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表中数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名  <span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表中所有数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表中所有数据（高效 先删除表，然后再创建一张一样的表。）</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><h2 id="三、修改-update"><a href="#三、修改-update" class="headerlink" title="三、修改 update"></a>三、修改 update</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不带条件的修改(会修改所有行)</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名 <span class="operator">=</span> 值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 带条件的修改</span></span><br><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名 <span class="operator">=</span> 值 <span class="keyword">where</span> 列名<span class="operator">=</span>值;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">ADD</span> 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改数据类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型 (长度);</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改字段名和字段类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br><span class="line"></span><br><span class="line"><span class="comment">--删除字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br><span class="line"></span><br><span class="line"><span class="comment">--修改表名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 RENAME <span class="keyword">TO</span> 新表</span><br></pre></td></tr></table></figure><h1 id="DQL-Data-Query-Language-数据查询语言"><a href="#DQL-Data-Query-Language-数据查询语言" class="headerlink" title="DQL(Data Query Language)数据查询语言"></a>DQL(Data Query Language)数据查询语言</h1><p>关于查询语句有很多，这里基础的不再介绍。主要介绍排序查询、聚合函数、模糊查询、分组查询、分页查询、内连接、外连接、子查询</p><h2 id="一、基础关键字"><a href="#一、基础关键字" class="headerlink" title="一、基础关键字"></a>一、基础关键字</h2><p> <strong><em>*BETWEEN…AND*</em> （在什么之间）和 *<em>IN*</em>( 集合)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄大于等于20 小于等于30</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="operator">&amp;&amp;</span>  age <span class="operator">&lt;=</span><span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">&gt;=</span> <span class="number">20</span> <span class="keyword">AND</span>  age <span class="operator">&lt;=</span><span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">20</span> <span class="keyword">AND</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄22岁，18岁，25岁的信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">22</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">18</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">22</span>,<span class="number">18</span>,<span class="number">25</span>);</span><br></pre></td></tr></table></figure><p> ****is null(**不为null值) 与 **like**（模糊查询）、*<em>distinct*<em>（去除重复值）</em></em></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询英语成绩不为null</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> english  <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line"></span><br><span class="line"> _:单个任意字符</span><br><span class="line"></span><br><span class="line"> <span class="operator">%</span>：多个任意字符</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓马的有哪些？ like</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;马%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名第二个字是化的人</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> &quot;_化%&quot;;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名是3个字的人</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;___&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名中包含德的人</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%德%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 关键词 DISTINCT 用于返回唯一不同的值。</span></span><br><span class="line"><span class="comment">-- 语法：SELECT DISTINCT 列名称 FROM 表名称</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> NAME <span class="keyword">FROM</span>  student ;</span><br></pre></td></tr></table></figure><h2 id="二、排序查询-order-by"><a href="#二、排序查询-order-by" class="headerlink" title="二、排序查询 order by"></a>二、排序查询 order by</h2><p><strong>语法</strong>：order by 子句</p><p>​     order by 排序字段1 排序方式1 ， 排序字段2 排序方式2…</p><p><strong>注意：</strong><br>      如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 例子</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">ORDER</span> <span class="keyword">BY</span> math; <span class="comment">--默认升序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> person <span class="keyword">ORDER</span> <span class="keyword">BY</span> math <span class="keyword">desc</span>; <span class="comment">--降序</span></span><br></pre></td></tr></table></figure><hr><h2 id="三、-聚合函数：将一列数据作为一个整体，进行纵向的计算。"><a href="#三、-聚合函数：将一列数据作为一个整体，进行纵向的计算。" class="headerlink" title="三、 聚合函数：将一列数据作为一个整体，进行纵向的计算。"></a>三、 聚合函数：将一列数据作为一个整体，进行纵向的计算。</h2><blockquote><p>1.count：计算个数</p><p>2.max：计算最大值</p><p>3.min：计算最小值</p><p>4.sum：计算和</p><p>5.avg：计算平均数</p></blockquote><h2 id="四、-分组查询-group-by"><a href="#四、-分组查询-group-by" class="headerlink" title="四、 分组查询 group by"></a>四、 分组查询 group by</h2><p>​    <strong>语法</strong>：group by 分组字段;</p><p>   <strong>注意</strong>：分组之后查询的字段：分组字段、聚合函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分组。分别查询男、女同学的平均分</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="built_in">AVG</span>(math) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组。分别查询男、女同学的平均分,人数</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="built_in">AVG</span>(math),<span class="built_in">COUNT</span>(id) <span class="keyword">FROM</span> student <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="built_in">AVG</span>(math),<span class="built_in">COUNT</span>(id) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line"></span><br><span class="line"><span class="comment">--  按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人</span></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="built_in">AVG</span>(math),<span class="built_in">COUNT</span>(id) <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(id) <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> sex , <span class="built_in">AVG</span>(math),<span class="built_in">COUNT</span>(id) 人数 <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> math <span class="operator">&gt;</span> <span class="number">70</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex <span class="keyword">HAVING</span> 人数 <span class="operator">&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><hr><h2 id="五、-分页查询"><a href="#五、-分页查询" class="headerlink" title="五、 分页查询"></a>五、 分页查询</h2><p>  \1. <strong>语法</strong>：limit 开始的索引,每页查询的条数;<br>  \2. <strong>公式</strong>：开始的索引 &#x3D; （当前的页码 - 1） * 每页显示的条数<br>  \3. limit 是一个MySQL”方言” </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 每页显示3条记录 </span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">0</span>,<span class="number">3</span>; <span class="comment">-- 第1页</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">3</span>,<span class="number">3</span>; <span class="comment">-- 第2页</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student LIMIT <span class="number">6</span>,<span class="number">3</span>; <span class="comment">-- 第3页</span></span><br></pre></td></tr></table></figure><hr><h2 id="六、内连接查询："><a href="#六、内连接查询：" class="headerlink" title="六、内连接查询："></a>六、内连接查询：</h2><blockquote><p>  <strong>1. 从哪些表中查询数据</strong></p><p>  <strong>2.条件是什么</strong></p><p>  <strong>3. 查询哪些字段</strong></p></blockquote><h3 id="1-隐式内连接：使用where条件消除无用数据"><a href="#1-隐式内连接：使用where条件消除无用数据" class="headerlink" title="1.隐式内连接：使用where条件消除无用数据"></a>1.隐式内连接：使用where条件消除无用数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工表的名称，性别。部门表的名称</span></span><br><span class="line"><span class="keyword">SELECT</span> emp.name,emp.gender,dept.name <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t1.name, <span class="comment">-- 员工表的姓名</span></span><br><span class="line">    t1.gender,<span class="comment">-- 员工表的性别</span></span><br><span class="line">    t2.name <span class="comment">-- 部门表的名称</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    emp t1,</span><br><span class="line">    dept t2</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    t1.`dept_id` <span class="operator">=</span> t2.`id`;</span><br></pre></td></tr></table></figure><h3 id="2-显式内连接"><a href="#2-显式内连接" class="headerlink" title="2.显式内连接"></a>2.显式内连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法： </span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表名<span class="number">1</span> [<span class="keyword">inner</span>] <span class="keyword">join</span> 表名<span class="number">2</span> <span class="keyword">on</span> 条件</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例如：</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.`dept_id` <span class="operator">=</span> dept.`id`;   </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> emp.`dept_id` <span class="operator">=</span> dept.`id`; </span><br></pre></td></tr></table></figure><h2 id="七、外连接查询"><a href="#七、外连接查询" class="headerlink" title="七、外连接查询"></a>七、外连接查询</h2><h3 id="1-左外连接-–-查询的是左表所有数据以及其交集部分。"><a href="#1-左外连接-–-查询的是左表所有数据以及其交集部分。" class="headerlink" title="1.左外连接 – 查询的是左表所有数据以及其交集部分。"></a>1.左外连接 – 查询的是左表所有数据以及其交集部分。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例子：</span></span><br><span class="line"><span class="comment">-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称</span></span><br><span class="line"><span class="keyword">SELECT</span>  t1.<span class="operator">*</span>,t2.`name` <span class="keyword">FROM</span> emp t1 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept t2 <span class="keyword">ON</span> t1.`dept_id` <span class="operator">=</span> t2.`id`;</span><br></pre></td></tr></table></figure><h3 id="2-右外连接-–-查询的是右表所有数据以及其交集部分。"><a href="#2-右外连接-–-查询的是右表所有数据以及其交集部分。" class="headerlink" title="2.右外连接 – 查询的是右表所有数据以及其交集部分。"></a>2.右外连接 – 查询的是右表所有数据以及其交集部分。</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 语法：</span></span><br><span class="line"><span class="keyword">select</span> 字段列表 <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">right</span> [<span class="keyword">outer</span>] <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 条件；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 例子：</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="operator">*</span> <span class="keyword">FROM</span> dept t2 <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> emp t1 <span class="keyword">ON</span> t1.`dept_id` <span class="operator">=</span> t2.`id`;</span><br></pre></td></tr></table></figure><h2 id="八、子查询：查询中嵌套查询"><a href="#八、子查询：查询中嵌套查询" class="headerlink" title="八、子查询：查询中嵌套查询"></a>八、子查询：查询中嵌套查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询工资最高的员工信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 1 查询最高的工资是多少 9000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2 查询员工信息，并且工资等于9000的</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.`salary` <span class="operator">=</span> <span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line"> <span class="comment">-- 一条sql就完成这个操作。这就是子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.`salary` <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure><h3 id="1-子查询的结果是单行单列的"><a href="#1-子查询的结果是单行单列的" class="headerlink" title="1.子查询的结果是单行单列的"></a>1.子查询的结果是单行单列的</h3><p> 子查询可以作为条件，使用<strong>运算符去判断</strong>。 运算符： &gt; &gt;&#x3D; &lt; &lt;&#x3D; &#x3D;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工工资小于平均工资的人</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.salary <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp);</span><br></pre></td></tr></table></figure><h3 id="2-子查询的结果是多行单列的："><a href="#2-子查询的结果是多行单列的：" class="headerlink" title="2. 子查询的结果是多行单列的："></a>2. 子查询的结果是多行单列的：</h3><p>  子查询可以作为条件，使用<strong>运算符in</strong>来判断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询&#x27;财务部&#x27;和&#x27;市场部&#x27;所有的员工信息</span></span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">OR</span> NAME <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">OR</span> dept_id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> dept_id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> NAME <span class="operator">=</span> <span class="string">&#x27;财务部&#x27;</span> <span class="keyword">OR</span> NAME <span class="operator">=</span> <span class="string">&#x27;市场部&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="3-子查询的结果是多行多列的："><a href="#3-子查询的结果是多行多列的：" class="headerlink" title="3. 子查询的结果是多行多列的："></a>3. 子查询的结果是多行多列的：</h3><p>  子查询可以作为一张<strong>虚拟表</strong>参与查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息</span></span><br><span class="line"><span class="comment">-- 子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> dept t1 ,(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> emp.`join_date` <span class="operator">&gt;</span> <span class="string">&#x27;2011-11-11&#x27;</span>) t2 <span class="keyword">WHERE</span> t1.id <span class="operator">=</span> t2.dept_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 普通内连接</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp t1,dept t2 <span class="keyword">WHERE</span> t1.`dept_id` <span class="operator">=</span> t2.`id` <span class="keyword">AND</span> t1.`join_date` <span class="operator">&gt;</span>  <span class="string">&#x27;2011-11-11&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="DCL-Data-Control-Language-数据控制语言"><a href="#DCL-Data-Control-Language-数据控制语言" class="headerlink" title="DCL(Data Control Language)数据控制语言"></a>DCL(Data Control Language)数据控制语言</h1><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><h3 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span><span class="operator">*</span><span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;密码&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="修改用户密码"><a href="#修改用户密码" class="headerlink" title="修改用户密码"></a><strong>修改用户密码</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;新密码&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="查询权限"><a href="#查询权限" class="headerlink" title="查询权限"></a>查询权限</h3><ul><li>主机可以使用%通配</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询权限</span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> <span class="string">&#x27;lisi&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h3><p><img src="C:\Users\35351\AppData\Roaming\Typora\typora-user-images\image-20230316203703083.png" alt="image-20230316203703083"></p><ol><li>多个权限之间使用逗号隔开</li><li>授权时，数据库和表名可以使用*进行通配，代表所有</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 授予权限</span></span><br><span class="line"><span class="keyword">grant</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">to</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给张三用户授予所有权限，在任意数据库任意表上</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;zhangsan&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 撤销权限：</span></span><br><span class="line"><span class="keyword">revoke</span> 权限列表 <span class="keyword">on</span> 数据库名.表名 <span class="keyword">from</span> <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;主机名&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> db3.`account` <span class="keyword">FROM</span> <span class="string">&#x27;lisi&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-jvrfNzsz" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="147292559" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
